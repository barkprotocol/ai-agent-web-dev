{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"file":"exception.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/exception.ts"],"sourcesContent":["/**\n * Represents an error caused by an api call i.e. it has attributes for a HTTP status code\n * and the returned body object.\n *\n * Example\n * API returns a ErrorMessageObject whenever HTTP status code is not in [200, 299]\n * => ApiException(404, someErrorMessageObject)\n *\n */\nexport class ApiException<T> extends Error {\n    public constructor(public code: number, message: string, public body: T, public headers: { [key: string]: string; }) {\n        super(\"HTTP-Code: \" + code + \"\\nMessage: \" + message + \"\\nBody: \" + JSON.stringify(body) + \"\\nHeaders: \" +\n        JSON.stringify(headers))\n    }\n}\n"],"names":[],"mappings":";;;;;AASA,MAAa,YAAgB,SAAQ,KAAK;IACtC,YAA0B,IAAY,EAAE,OAAe,EAAS,IAAO,EAAS,OAAmC,CAAA;QAC/G,KAAK,CAAC,aAAa,GAAG,IAAI,GAAG,aAAa,GAAG,OAAO,GAAG,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,aAAa,GACxG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAA;QAFF,IAAA,CAAA,IAAI,GAAJ,IAAI,CAAQ;QAA0B,IAAA,CAAA,IAAI,GAAJ,IAAI,CAAG;QAAS,IAAA,CAAA,OAAO,GAAP,OAAO,CAA4B;IAGnH,CAAC;CACJ;AALD,QAAA,YAAA,GAAA,aAKC","ignoreList":[0]}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"file":"baseapi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/baseapi.ts"],"sourcesContent":["import { Configuration } from '../configuration'\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPIRequestFactory {\n\n    constructor(protected configuration: Configuration) {\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public api: string, public method: string, public field: string) {\n        super(\"Required parameter \" + field + \" was null or undefined when calling \" + api + \".\" + method + \".\");\n    }\n}\n"],"names":[],"mappings":";;;;;AAMa,QAAA,kBAAkB,GAAG;IAC9B,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,IAAI;IACT,KAAK,EAAE,GAAG;CACb,CAAC;AAQF,MAAa,qBAAqB;IAE9B,YAAsB,aAA4B,CAAA;QAA5B,IAAA,CAAA,aAAa,GAAb,aAAa,CAAe;IAClD,CAAC;CACJ;AAJD,QAAA,qBAAA,GAAA,sBAIC;;AAQD,MAAa,aAAc,SAAQ,KAAK;IAEpC,YAAmB,GAAW,EAAS,MAAc,EAAS,KAAa,CAAA;QACvE,KAAK,CAAC,qBAAqB,GAAG,KAAK,GAAG,sCAAsC,GAAG,GAAG,GAAG,GAAG,GAAG,MAAM,GAAG,GAAG,CAAC,CAAC;QAD1F,IAAA,CAAA,GAAG,GAAH,GAAG,CAAQ;QAAS,IAAA,CAAA,MAAM,GAAN,MAAM,CAAQ;QAAS,IAAA,CAAA,KAAK,GAAL,KAAK,CAAQ;QAD3E,IAAA,CAAA,IAAI,GAAoB,eAAe,CAAC;IAGxC,CAAC;CACJ;AALD,QAAA,aAAA,GAAA,cAKC","ignoreList":[0]}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"file":"ApplicationApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/ApplicationApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { ApplicationIn } from '../models/ApplicationIn';\nimport { ApplicationOut } from '../models/ApplicationOut';\nimport { ApplicationPatch } from '../models/ApplicationPatch';\nimport { ApplicationStats } from '../models/ApplicationStats';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { ListResponseApplicationOut } from '../models/ListResponseApplicationOut';\nimport { ListResponseApplicationStats } from '../models/ListResponseApplicationStats';\nimport { Ordering } from '../models/Ordering';\n\n/**\n * no description\n */\nexport class ApplicationApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Get basic statistics for all applications.\n     * Get App Usage Stats\n     * @param since Filter the range to data after this date.\n     * @param until Filter the range to data before this date.\n     * @param limit Limit the number of returned items.\n     * @param iterator The iterator to use (depends on the chosen ordering).\n     */\n    public async getAppUsageStatsApiV1AppStatsUsageGet(since: Date, until: Date, limit?: number, iterator?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'since' is not null or undefined\n        if (since === null || since === undefined) {\n            throw new RequiredError(\"ApplicationApi\", \"getAppUsageStatsApiV1AppStatsUsageGet\", \"since\");\n        }\n\n\n        // verify required parameter 'until' is not null or undefined\n        if (until === null || until === undefined) {\n            throw new RequiredError(\"ApplicationApi\", \"getAppUsageStatsApiV1AppStatsUsageGet\", \"until\");\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/stats/usage';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (since !== undefined) {\n            requestContext.setQueryParam(\"since\", ObjectSerializer.serialize(since, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (until !== undefined) {\n            requestContext.setQueryParam(\"until\", ObjectSerializer.serialize(until, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"int\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Create a new application.\n     * Create Application\n     * @param applicationIn \n     * @param getIfExists Get an existing application, or create a new one if doesn\\&#39;t exist. It\\&#39;s two separate functions in the libs.\n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1ApplicationCreate(applicationIn: ApplicationIn, getIfExists?: boolean, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'applicationIn' is not null or undefined\n        if (applicationIn === null || applicationIn === undefined) {\n            throw new RequiredError(\"ApplicationApi\", \"v1ApplicationCreate\", \"applicationIn\");\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (getIfExists !== undefined) {\n            requestContext.setQueryParam(\"get_if_exists\", ObjectSerializer.serialize(getIfExists, \"boolean\", \"\"));\n        }\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(applicationIn, \"ApplicationIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Delete an application.\n     * Delete Application\n     * @param appId The app\\&#39;s ID or UID\n     */\n    public async v1ApplicationDelete(appId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"ApplicationApi\", \"v1ApplicationDelete\", \"appId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get an application.\n     * Get Application\n     * @param appId The app\\&#39;s ID or UID\n     */\n    public async v1ApplicationGet(appId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"ApplicationApi\", \"v1ApplicationGet\", \"appId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get basic statistics for the application.\n     * Get App Stats\n     * @param since Filter the range to data starting from this date.\n     * @param until Filter the range to data ending by this date.\n     * @param appId The app\\&#39;s ID or UID\n     */\n    public async v1ApplicationGetStats(since: Date, until: Date, appId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'since' is not null or undefined\n        if (since === null || since === undefined) {\n            throw new RequiredError(\"ApplicationApi\", \"v1ApplicationGetStats\", \"since\");\n        }\n\n\n        // verify required parameter 'until' is not null or undefined\n        if (until === null || until === undefined) {\n            throw new RequiredError(\"ApplicationApi\", \"v1ApplicationGetStats\", \"until\");\n        }\n\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"ApplicationApi\", \"v1ApplicationGetStats\", \"appId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/stats'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (since !== undefined) {\n            requestContext.setQueryParam(\"since\", ObjectSerializer.serialize(since, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (until !== undefined) {\n            requestContext.setQueryParam(\"until\", ObjectSerializer.serialize(until, \"Date\", \"date-time\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List of all the organization\\'s applications.\n     * List Applications\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public async v1ApplicationList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (order !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(order, \"Ordering\", \"\");\n            for (const key of Object.keys(serializedParams)) {\n                requestContext.setQueryParam(key, serializedParams[key]);\n            }\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Partially update an application.\n     * Patch Application\n     * @param appId The app\\&#39;s ID or UID\n     * @param applicationPatch \n     */\n    public async v1ApplicationPatch(appId: string, applicationPatch: ApplicationPatch, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"ApplicationApi\", \"v1ApplicationPatch\", \"appId\");\n        }\n\n\n        // verify required parameter 'applicationPatch' is not null or undefined\n        if (applicationPatch === null || applicationPatch === undefined) {\n            throw new RequiredError(\"ApplicationApi\", \"v1ApplicationPatch\", \"applicationPatch\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PATCH);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(applicationPatch, \"ApplicationPatch\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Update an application.\n     * Update Application\n     * @param appId The app\\&#39;s ID or UID\n     * @param applicationIn \n     */\n    public async v1ApplicationUpdate(appId: string, applicationIn: ApplicationIn, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"ApplicationApi\", \"v1ApplicationUpdate\", \"appId\");\n        }\n\n\n        // verify required parameter 'applicationIn' is not null or undefined\n        if (applicationIn === null || applicationIn === undefined) {\n            throw new RequiredError(\"ApplicationApi\", \"v1ApplicationUpdate\", \"applicationIn\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(applicationIn, \"ApplicationIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class ApplicationApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getAppUsageStatsApiV1AppStatsUsageGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getAppUsageStatsApiV1AppStatsUsageGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseApplicationStats >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseApplicationStats = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseApplicationStats\", \"\"\n            ) as ListResponseApplicationStats;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseApplicationStats = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseApplicationStats\", \"\"\n            ) as ListResponseApplicationStats;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1ApplicationCreate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1ApplicationCreateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ApplicationOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1ApplicationDelete\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1ApplicationDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1ApplicationGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1ApplicationGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ApplicationOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1ApplicationGetStats\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1ApplicationGetStatsWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ApplicationStats >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ApplicationStats = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationStats\", \"\"\n            ) as ApplicationStats;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ApplicationStats = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationStats\", \"\"\n            ) as ApplicationStats;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1ApplicationList\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1ApplicationListWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseApplicationOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseApplicationOut\", \"\"\n            ) as ListResponseApplicationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseApplicationOut\", \"\"\n            ) as ListResponseApplicationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1ApplicationPatch\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1ApplicationPatchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ApplicationOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1ApplicationUpdate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1ApplicationUpdateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ApplicationOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 702, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 707, "column": 0}, "map": {"version":3,"file":"AuthenticationApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/AuthenticationApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { AppPortalAccessIn } from '../models/AppPortalAccessIn';\nimport { AppPortalAccessOut } from '../models/AppPortalAccessOut';\nimport { ApplicationTokenExpireIn } from '../models/ApplicationTokenExpireIn';\nimport { AuthTokenOut } from '../models/AuthTokenOut';\nimport { CreateTokenIn } from '../models/CreateTokenIn';\nimport { DashboardAccessOut } from '../models/DashboardAccessOut';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { OneTimeTokenIn } from '../models/OneTimeTokenIn';\nimport { OneTimeTokenOut } from '../models/OneTimeTokenOut';\nimport { RotatePollerTokenIn } from '../models/RotatePollerTokenIn';\n\n/**\n * no description\n */\nexport class AuthenticationApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.\n     * Get Consumer App Portal Access\n     * @param appId The app\\&#39;s ID or UID\n     * @param appPortalAccessIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1AuthenticationAppPortalAccess(appId: string, appPortalAccessIn: AppPortalAccessIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"AuthenticationApi\", \"v1AuthenticationAppPortalAccess\", \"appId\");\n        }\n\n\n        // verify required parameter 'appPortalAccessIn' is not null or undefined\n        if (appPortalAccessIn === null || appPortalAccessIn === undefined) {\n            throw new RequiredError(\"AuthenticationApi\", \"v1AuthenticationAppPortalAccess\", \"appPortalAccessIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/auth/app-portal-access/{app_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(appPortalAccessIn, \"AppPortalAccessIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Create a new access token that only allows creating messages inside this application.\n     * Create Cmg Token\n     * @param appId The app\\&#39;s ID or UID\n     * @param createTokenIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1AuthenticationCreateMessageToken(appId: string, createTokenIn: CreateTokenIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"AuthenticationApi\", \"v1AuthenticationCreateMessageToken\", \"appId\");\n        }\n\n\n        // verify required parameter 'createTokenIn' is not null or undefined\n        if (createTokenIn === null || createTokenIn === undefined) {\n            throw new RequiredError(\"AuthenticationApi\", \"v1AuthenticationCreateMessageToken\", \"createTokenIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/auth/app/{app_id}/create-message-token'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(createTokenIn, \"CreateTokenIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * DEPRECATED: Please use `app-portal-access` instead.  Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.\n     * Dashboard Access\n     * @param appId The app\\&#39;s ID or UID\n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1AuthenticationDashboardAccess(appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"AuthenticationApi\", \"v1AuthenticationDashboardAccess\", \"appId\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/auth/dashboard-access/{app_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * This is a one time token.\n     * Exchange One Time Token\n     * @param oneTimeTokenIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn: OneTimeTokenIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'oneTimeTokenIn' is not null or undefined\n        if (oneTimeTokenIn === null || oneTimeTokenIn === undefined) {\n            throw new RequiredError(\"AuthenticationApi\", \"v1AuthenticationExchangeOneTimeToken\", \"oneTimeTokenIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/auth/one-time-token';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(oneTimeTokenIn, \"OneTimeTokenIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Expire all of the tokens associated with a specific application.\n     * Expire All\n     * @param appId The app\\&#39;s ID or UID\n     * @param applicationTokenExpireIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1AuthenticationExpireAll(appId: string, applicationTokenExpireIn: ApplicationTokenExpireIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"AuthenticationApi\", \"v1AuthenticationExpireAll\", \"appId\");\n        }\n\n\n        // verify required parameter 'applicationTokenExpireIn' is not null or undefined\n        if (applicationTokenExpireIn === null || applicationTokenExpireIn === undefined) {\n            throw new RequiredError(\"AuthenticationApi\", \"v1AuthenticationExpireAll\", \"applicationTokenExpireIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/auth/app/{app_id}/expire-all'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(applicationTokenExpireIn, \"ApplicationTokenExpireIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get the current auth token for the poller.\n     * Get Poller Token\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public async v1AuthenticationGetPollerToken(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"AuthenticationApi\", \"v1AuthenticationGetPollerToken\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"AuthenticationApi\", \"v1AuthenticationGetPollerToken\", \"endpointId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/auth/app/{app_id}/poller/{endpoint_id}/token'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Logout an app token.  Trying to log out other tokens will fail.\n     * Logout\n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1AuthenticationLogout(idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n        // Path Params\n        const localVarPath = '/api/v1/auth/logout';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Create a new auth token that can for the poller API.\n     * Rotate Poller Token\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param rotatePollerTokenIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1AuthenticationRotatePollerToken(appId: string, endpointId: string, rotatePollerTokenIn: RotatePollerTokenIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"AuthenticationApi\", \"v1AuthenticationRotatePollerToken\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"AuthenticationApi\", \"v1AuthenticationRotatePollerToken\", \"endpointId\");\n        }\n\n\n        // verify required parameter 'rotatePollerTokenIn' is not null or undefined\n        if (rotatePollerTokenIn === null || rotatePollerTokenIn === undefined) {\n            throw new RequiredError(\"AuthenticationApi\", \"v1AuthenticationRotatePollerToken\", \"rotatePollerTokenIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/auth/app/{app_id}/poller/{endpoint_id}/token/rotate'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(rotatePollerTokenIn, \"RotatePollerTokenIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class AuthenticationApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1AuthenticationAppPortalAccess\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1AuthenticationAppPortalAccessWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AppPortalAccessOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: AppPortalAccessOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AppPortalAccessOut\", \"\"\n            ) as AppPortalAccessOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: AppPortalAccessOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AppPortalAccessOut\", \"\"\n            ) as AppPortalAccessOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1AuthenticationCreateMessageToken\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1AuthenticationCreateMessageTokenWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AuthTokenOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: AuthTokenOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AuthTokenOut\", \"\"\n            ) as AuthTokenOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: AuthTokenOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AuthTokenOut\", \"\"\n            ) as AuthTokenOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1AuthenticationDashboardAccess\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1AuthenticationDashboardAccessWithHttpInfo(response: ResponseContext): Promise<HttpInfo<DashboardAccessOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: DashboardAccessOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"DashboardAccessOut\", \"\"\n            ) as DashboardAccessOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: DashboardAccessOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"DashboardAccessOut\", \"\"\n            ) as DashboardAccessOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1AuthenticationExchangeOneTimeToken\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1AuthenticationExchangeOneTimeTokenWithHttpInfo(response: ResponseContext): Promise<HttpInfo<OneTimeTokenOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: OneTimeTokenOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"OneTimeTokenOut\", \"\"\n            ) as OneTimeTokenOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: OneTimeTokenOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"OneTimeTokenOut\", \"\"\n            ) as OneTimeTokenOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1AuthenticationExpireAll\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1AuthenticationExpireAllWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1AuthenticationGetPollerToken\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1AuthenticationGetPollerTokenWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AuthTokenOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: AuthTokenOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AuthTokenOut\", \"\"\n            ) as AuthTokenOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: AuthTokenOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AuthTokenOut\", \"\"\n            ) as AuthTokenOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1AuthenticationLogout\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1AuthenticationLogoutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1AuthenticationRotatePollerToken\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1AuthenticationRotatePollerTokenWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AuthTokenOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: AuthTokenOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AuthTokenOut\", \"\"\n            ) as AuthTokenOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: AuthTokenOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AuthTokenOut\", \"\"\n            ) as AuthTokenOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1342, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1347, "column": 0}, "map": {"version":3,"file":"BackgroundTasksApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/BackgroundTasksApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { BackgroundTaskOut } from '../models/BackgroundTaskOut';\nimport { BackgroundTaskStatus } from '../models/BackgroundTaskStatus';\nimport { BackgroundTaskType } from '../models/BackgroundTaskType';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { ListResponseBackgroundTaskOut } from '../models/ListResponseBackgroundTaskOut';\nimport { Ordering } from '../models/Ordering';\n\n/**\n * no description\n */\nexport class BackgroundTasksApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Get a background task by ID.\n     * Get Background Task\n     * @param taskId \n     */\n    public async getBackgroundTask(taskId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'taskId' is not null or undefined\n        if (taskId === null || taskId === undefined) {\n            throw new RequiredError(\"BackgroundTasksApi\", \"getBackgroundTask\", \"taskId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/background-task/{task_id}'\n            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List background tasks executed in the past 90 days.\n     * List Background Tasks\n     * @param status Filter the response based on the status.\n     * @param task Filter the response based on the type.\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public async listBackgroundTasks(status?: BackgroundTaskStatus, task?: BackgroundTaskType, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/background-task';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (status !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(status, \"BackgroundTaskStatus\", \"\");\n            for (const key of Object.keys(serializedParams)) {\n                requestContext.setQueryParam(key, serializedParams[key]);\n            }\n        }\n\n        // Query Params\n        if (task !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(task, \"BackgroundTaskType\", \"\");\n            for (const key of Object.keys(serializedParams)) {\n                requestContext.setQueryParam(key, serializedParams[key]);\n            }\n        }\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (order !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(order, \"Ordering\", \"\");\n            for (const key of Object.keys(serializedParams)) {\n                requestContext.setQueryParam(key, serializedParams[key]);\n            }\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class BackgroundTasksApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getBackgroundTask\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getBackgroundTaskWithHttpInfo(response: ResponseContext): Promise<HttpInfo<BackgroundTaskOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: BackgroundTaskOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"BackgroundTaskOut\", \"\"\n            ) as BackgroundTaskOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: BackgroundTaskOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"BackgroundTaskOut\", \"\"\n            ) as BackgroundTaskOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to listBackgroundTasks\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async listBackgroundTasksWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseBackgroundTaskOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseBackgroundTaskOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseBackgroundTaskOut\", \"\"\n            ) as ListResponseBackgroundTaskOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseBackgroundTaskOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseBackgroundTaskOut\", \"\"\n            ) as ListResponseBackgroundTaskOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAA,iCAAmF;AAEnF,MAAA,iCAA6F;AAC7F,MAAA,2DAA4D;AAC5D,MAAA,qCAAyC;AACzC,MAAA,4BAAsD;AAetD,MAAa,gCAAiC,SAAQ,UAAA,qBAAqB;IAO1D,iBAAiB,CAAC,MAAc,EAAE,QAAwB,EAAA;;;YACnE,IAAI,OAAO,GAAG,QAAQ,IAAI,IAAI,CAAC,aAAa,CAAC;YAG7C,IAAI,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,EAAE;gBACzC,MAAM,IAAI,UAAA,aAAa,CAAC,oBAAoB,EAAE,mBAAmB,EAAE,QAAQ,CAAC,CAAC;aAChF;YAID,MAAM,YAAY,GAAG,mCAAmC,CACnD,OAAO,CAAC,GAAG,GAAG,SAAS,GAAG,GAAG,EAAE,kBAAkB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAGxE,MAAM,cAAc,GAAG,OAAO,CAAC,UAAU,CAAC,kBAAkB,CAAC,YAAY,EAAE,OAAA,UAAU,CAAC,GAAG,CAAC,CAAC;YAC3F,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAA;YACtE,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;YAC5D,cAAc,CAAC,cAAc,CAAC,aAAa,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAA;YAIjE,IAAI,UAA8C,CAAC;YAEnD,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,CAAA;YAC9C,IAAI,UAAU,KAAA,QAAV,UAAU,KAAA,KAAA,IAAA,KAAA,IAAV,UAAU,CAAE,2BAA2B,EAAE;gBACzC,MAAM,UAAU,KAAA,QAAV,UAAU,KAAA,KAAA,IAAA,KAAA,IAAV,UAAU,CAAE,2BAA2B,CAAC,cAAc,CAAC,CAAA,CAAC;aACjE;YAED,MAAM,WAAW,GAAuC,CAAA,CAAA,KAAA,QAAQ,KAAA,QAAR,QAAQ,KAAA,KAAA,IAAA,KAAA,IAAR,QAAQ,CAAE,WAAW,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,OAAO,KAAA,CAAI,CAAA,KAAA,CAAA,KAAA,IAAI,CAAC,aAAa,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,WAAW,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,OAAO,CAAA,CAAA;YAClI,IAAI,WAAW,KAAA,QAAX,WAAW,KAAA,KAAA,IAAA,KAAA,IAAX,WAAW,CAAE,2BAA2B,EAAE;gBAC1C,MAAM,WAAW,KAAA,QAAX,WAAW,KAAA,KAAA,IAAA,KAAA,IAAX,WAAW,CAAE,2BAA2B,CAAC,cAAc,CAAC,CAAA,CAAC;aAClE;YAED,OAAO,cAAc,CAAC;;KACzB;IAWY,mBAAmB,CAAC,MAA6B,EAAE,IAAyB,EAAE,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;;;YACpK,IAAI,OAAO,GAAG,QAAQ,IAAI,IAAI,CAAC,aAAa,CAAC;YAQ7C,MAAM,YAAY,GAAG,yBAAyB,CAAC;YAG/C,MAAM,cAAc,GAAG,OAAO,CAAC,UAAU,CAAC,kBAAkB,CAAC,YAAY,EAAE,OAAA,UAAU,CAAC,GAAG,CAAC,CAAC;YAC3F,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAA;YACtE,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;YAC5D,cAAc,CAAC,cAAc,CAAC,aAAa,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAA;YAIjE,IAAI,MAAM,KAAK,SAAS,EAAE;gBACtB,MAAM,gBAAgB,GAAG,mBAAA,gBAAgB,CAAC,SAAS,CAAC,MAAM,EAAE,sBAAsB,EAAE,EAAE,CAAC,CAAC;gBACxF,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAE;oBAC7C,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC;iBAC5D;aACJ;YAGD,IAAI,IAAI,KAAK,SAAS,EAAE;gBACpB,MAAM,gBAAgB,GAAG,mBAAA,gBAAgB,CAAC,SAAS,CAAC,IAAI,EAAE,oBAAoB,EAAE,EAAE,CAAC,CAAC;gBACpF,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAE;oBAC7C,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC;iBAC5D;aACJ;YAGD,IAAI,KAAK,KAAK,SAAS,EAAE;gBACrB,cAAc,CAAC,aAAa,CAAC,OAAO,EAAE,mBAAA,gBAAgB,CAAC,SAAS,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;aAChG;YAGD,IAAI,QAAQ,KAAK,SAAS,EAAE;gBACxB,cAAc,CAAC,aAAa,CAAC,UAAU,EAAE,mBAAA,gBAAgB,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;aAChG;YAGD,IAAI,KAAK,KAAK,SAAS,EAAE;gBACrB,MAAM,gBAAgB,GAAG,mBAAA,gBAAgB,CAAC,SAAS,CAAC,KAAK,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;gBAC3E,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAE;oBAC7C,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC;iBAC5D;aACJ;YAGD,IAAI,UAA8C,CAAC;YAEnD,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,CAAA;YAC9C,IAAI,UAAU,KAAA,QAAV,UAAU,KAAA,KAAA,IAAA,KAAA,IAAV,UAAU,CAAE,2BAA2B,EAAE;gBACzC,MAAM,UAAU,KAAA,QAAV,UAAU,KAAA,KAAA,IAAA,KAAA,IAAV,UAAU,CAAE,2BAA2B,CAAC,cAAc,CAAC,CAAA,CAAC;aACjE;YAED,MAAM,WAAW,GAAuC,CAAA,CAAA,KAAA,QAAQ,KAAA,QAAR,QAAQ,KAAA,KAAA,IAAA,KAAA,IAAR,QAAQ,CAAE,WAAW,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,OAAO,KAAA,CAAI,CAAA,KAAA,CAAA,KAAA,IAAI,CAAC,aAAa,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,WAAW,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,OAAO,CAAA,CAAA;YAClI,IAAI,WAAW,KAAA,QAAX,WAAW,KAAA,KAAA,IAAA,KAAA,IAAX,WAAW,CAAE,2BAA2B,EAAE;gBAC1C,MAAM,WAAW,KAAA,QAAX,WAAW,KAAA,KAAA,IAAA,KAAA,IAAX,WAAW,CAAE,2BAA2B,CAAC,cAAc,CAAC,CAAA,CAAC;aAClE;YAED,OAAO,cAAc,CAAC;;KACzB;CAEJ;AAxHD,QAAA,gCAAA,GAAA,iCAwHC;AAED,MAAa,mCAAmC;IAS9B,6BAA6B,CAAC,QAAyB,EAAA;;YACjE,MAAM,WAAW,GAAG,mBAAA,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;YAC1F,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAsB,mBAAA,gBAAgB,CAAC,WAAW,CACxD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,mBAAmB,EAAE,EAAE,CACL,CAAC;gBACvB,OAAO,IAAI,OAAA,QAAQ,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aACvF;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,aAAa,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACxG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,cAAc,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACzG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACtG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACtG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACrG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAwB,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,qBAAqB,EAAE,EAAE,CACL,CAAC;gBACzB,MAAM,IAAI,YAAA,YAAY,CAAsB,QAAQ,CAAC,cAAc,EAAE,kBAAkB,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACpH;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,mBAAmB,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC9G;YAGD,IAAI,QAAQ,CAAC,cAAc,IAAI,GAAG,IAAI,QAAQ,CAAC,cAAc,IAAI,GAAG,EAAE;gBAClE,MAAM,IAAI,GAAsB,mBAAA,gBAAgB,CAAC,WAAW,CACxD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,mBAAmB,EAAE,EAAE,CACL,CAAC;gBACvB,OAAO,IAAI,OAAA,QAAQ,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aACvF;YACD,MAAM,IAAI,YAAA,YAAY,CAA4B,QAAQ,CAAC,cAAc,EAAE,0BAA0B,GAAE,MAAM,QAAQ,CAAC,YAAY,EAAA,CAAE,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC5J,CAAC;KAAA;IASa,+BAA+B,CAAC,QAAyB,EAAA;;YACnE,MAAM,WAAW,GAAG,mBAAA,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;YAC1F,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAkC,mBAAA,gBAAgB,CAAC,WAAW,CACpE,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,+BAA+B,EAAE,EAAE,CACL,CAAC;gBACnC,OAAO,IAAI,OAAA,QAAQ,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aACvF;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,aAAa,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACxG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,cAAc,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACzG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACtG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACtG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACrG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAwB,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,qBAAqB,EAAE,EAAE,CACL,CAAC;gBACzB,MAAM,IAAI,YAAA,YAAY,CAAsB,QAAQ,CAAC,cAAc,EAAE,kBAAkB,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACpH;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,mBAAmB,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC9G;YAGD,IAAI,QAAQ,CAAC,cAAc,IAAI,GAAG,IAAI,QAAQ,CAAC,cAAc,IAAI,GAAG,EAAE;gBAClE,MAAM,IAAI,GAAkC,mBAAA,gBAAgB,CAAC,WAAW,CACpE,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,+BAA+B,EAAE,EAAE,CACL,CAAC;gBACnC,OAAO,IAAI,OAAA,QAAQ,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aACvF;YACD,MAAM,IAAI,YAAA,YAAY,CAA4B,QAAQ,CAAC,cAAc,EAAE,0BAA0B,GAAE,MAAM,QAAQ,CAAC,YAAY,EAAA,CAAE,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC5J,CAAC;KAAA;CAEJ;AA5JD,QAAA,mCAAA,GAAA,oCA4JC","ignoreList":[0]}},
    {"offset": {"line": 1543, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1548, "column": 0}, "map": {"version":3,"file":"BroadcastApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/BroadcastApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { MessageBroadcastIn } from '../models/MessageBroadcastIn';\nimport { MessageBroadcastOut } from '../models/MessageBroadcastOut';\n\n/**\n * no description\n */\nexport class BroadcastApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Creates a background task to send the same message to each application in your organization.\n     * Create Broadcast Message\n     * @param messageBroadcastIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async createBroadcastMessage(messageBroadcastIn: MessageBroadcastIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'messageBroadcastIn' is not null or undefined\n        if (messageBroadcastIn === null || messageBroadcastIn === undefined) {\n            throw new RequiredError(\"BroadcastApi\", \"createBroadcastMessage\", \"messageBroadcastIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/msg/broadcast';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(messageBroadcastIn, \"MessageBroadcastIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class BroadcastApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to createBroadcastMessage\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async createBroadcastMessageWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageBroadcastOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: MessageBroadcastOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageBroadcastOut\", \"\"\n            ) as MessageBroadcastOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageBroadcastOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageBroadcastOut\", \"\"\n            ) as MessageBroadcastOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1666, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1671, "column": 0}, "map": {"version":3,"file":"EndpointApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/EndpointApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { EndpointHeadersIn } from '../models/EndpointHeadersIn';\nimport { EndpointHeadersOut } from '../models/EndpointHeadersOut';\nimport { EndpointHeadersPatchIn } from '../models/EndpointHeadersPatchIn';\nimport { EndpointIn } from '../models/EndpointIn';\nimport { EndpointMtlsConfigIn } from '../models/EndpointMtlsConfigIn';\nimport { EndpointOauthConfigIn } from '../models/EndpointOauthConfigIn';\nimport { EndpointOut } from '../models/EndpointOut';\nimport { EndpointPatch } from '../models/EndpointPatch';\nimport { EndpointSecretOut } from '../models/EndpointSecretOut';\nimport { EndpointSecretRotateIn } from '../models/EndpointSecretRotateIn';\nimport { EndpointStats } from '../models/EndpointStats';\nimport { EndpointTransformationIn } from '../models/EndpointTransformationIn';\nimport { EndpointTransformationOut } from '../models/EndpointTransformationOut';\nimport { EndpointTransformationSimulateIn } from '../models/EndpointTransformationSimulateIn';\nimport { EndpointTransformationSimulateOut } from '../models/EndpointTransformationSimulateOut';\nimport { EndpointUpdate } from '../models/EndpointUpdate';\nimport { EventExampleIn } from '../models/EventExampleIn';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { ListResponseEndpointOut } from '../models/ListResponseEndpointOut';\nimport { ListResponseSinkOut } from '../models/ListResponseSinkOut';\nimport { MessageOut } from '../models/MessageOut';\nimport { Ordering } from '../models/Ordering';\nimport { RecoverIn } from '../models/RecoverIn';\nimport { RecoverOut } from '../models/RecoverOut';\nimport { ReplayIn } from '../models/ReplayIn';\nimport { ReplayOut } from '../models/ReplayOut';\nimport { SinkIn } from '../models/SinkIn';\nimport { SinkOut } from '../models/SinkOut';\n\n/**\n * no description\n */\nexport class EndpointApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Create a new endpoint for the application.  When `secret` is `null` the secret is automatically generated (recommended).\n     * Create Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1EndpointCreate(appId: string, endpointIn: EndpointIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointCreate\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointIn' is not null or undefined\n        if (endpointIn === null || endpointIn === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointCreate\", \"endpointIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointIn, \"EndpointIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Delete an endpoint.\n     * Delete Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public async v1EndpointDelete(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointDelete\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointDelete\", \"endpointId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Delete endpoint mTLS configuration.\n     * Delete Endpoint Mtls Config\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public async v1EndpointDeleteMtlsConfig(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointDeleteMtlsConfig\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointDeleteMtlsConfig\", \"endpointId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/mtls'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Delete endpoint OAuth configuration.\n     * Delete Endpoint Oauth Config\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public async v1EndpointDeleteOauthConfig(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointDeleteOauthConfig\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointDeleteOauthConfig\", \"endpointId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/oauth'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get an endpoint.\n     * Get Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public async v1EndpointGet(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointGet\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointGet\", \"endpointId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get the additional headers to be sent with the webhook.\n     * Get Endpoint Headers\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public async v1EndpointGetHeaders(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointGetHeaders\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointGetHeaders\", \"endpointId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get the endpoint\\'s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).\n     * Get Endpoint Secret\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public async v1EndpointGetSecret(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointGetSecret\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointGetSecret\", \"endpointId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get basic statistics for the endpoint.\n     * Endpoint Stats\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param since Filter the range to data starting from this date.\n     * @param until Filter the range to data ending by this date.\n     */\n    public async v1EndpointGetStats(appId: string, endpointId: string, since?: Date, until?: Date, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointGetStats\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointGetStats\", \"endpointId\");\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (since !== undefined) {\n            requestContext.setQueryParam(\"since\", ObjectSerializer.serialize(since, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (until !== undefined) {\n            requestContext.setQueryParam(\"until\", ObjectSerializer.serialize(until, \"Date\", \"date-time\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List the application\\'s endpoints.\n     * List Endpoints\n     * @param appId The app\\&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public async v1EndpointList(appId: string, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointList\", \"appId\");\n        }\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (order !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(order, \"Ordering\", \"\");\n            for (const key of Object.keys(serializedParams)) {\n                requestContext.setQueryParam(key, serializedParams[key]);\n            }\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Partially update an endpoint.\n     * Patch Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointPatch \n     */\n    public async v1EndpointPatch(appId: string, endpointId: string, endpointPatch: EndpointPatch, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointPatch\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointPatch\", \"endpointId\");\n        }\n\n\n        // verify required parameter 'endpointPatch' is not null or undefined\n        if (endpointPatch === null || endpointPatch === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointPatch\", \"endpointPatch\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PATCH);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointPatch, \"EndpointPatch\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Partially set the additional headers to be sent with the webhook.\n     * Patch Endpoint Headers\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointHeadersPatchIn \n     */\n    public async v1EndpointPatchHeaders(appId: string, endpointId: string, endpointHeadersPatchIn: EndpointHeadersPatchIn, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointPatchHeaders\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointPatchHeaders\", \"endpointId\");\n        }\n\n\n        // verify required parameter 'endpointHeadersPatchIn' is not null or undefined\n        if (endpointHeadersPatchIn === null || endpointHeadersPatchIn === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointPatchHeaders\", \"endpointHeadersPatchIn\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PATCH);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointHeadersPatchIn, \"EndpointHeadersPatchIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Resend all failed messages since a given time.  Messages that were sent successfully, even if failed initially, are not resent.\n     * Recover Failed Webhooks\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param recoverIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1EndpointRecover(appId: string, endpointId: string, recoverIn: RecoverIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointRecover\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointRecover\", \"endpointId\");\n        }\n\n\n        // verify required parameter 'recoverIn' is not null or undefined\n        if (recoverIn === null || recoverIn === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointRecover\", \"recoverIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(recoverIn, \"RecoverIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Replays messages to the endpoint.  Only messages that were created after `since` will be sent. Messages that were previously sent to the endpoint are not resent.\n     * Replay Missing Webhooks\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param replayIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1EndpointReplayMissing(appId: string, endpointId: string, replayIn: ReplayIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointReplayMissing\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointReplayMissing\", \"endpointId\");\n        }\n\n\n        // verify required parameter 'replayIn' is not null or undefined\n        if (replayIn === null || replayIn === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointReplayMissing\", \"replayIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(replayIn, \"ReplayIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Rotates the endpoint\\'s signing secret.  The previous secret will remain valid for the next 24 hours.\n     * Rotate Endpoint Secret\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointSecretRotateIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1EndpointRotateSecret(appId: string, endpointId: string, endpointSecretRotateIn: EndpointSecretRotateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointRotateSecret\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointRotateSecret\", \"endpointId\");\n        }\n\n\n        // verify required parameter 'endpointSecretRotateIn' is not null or undefined\n        if (endpointSecretRotateIn === null || endpointSecretRotateIn === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointRotateSecret\", \"endpointSecretRotateIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointSecretRotateIn, \"EndpointSecretRotateIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Send an example message for an event.\n     * Send Event Type Example Message\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param eventExampleIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1EndpointSendExample(appId: string, endpointId: string, eventExampleIn: EventExampleIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointSendExample\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointSendExample\", \"endpointId\");\n        }\n\n\n        // verify required parameter 'eventExampleIn' is not null or undefined\n        if (eventExampleIn === null || eventExampleIn === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointSendExample\", \"eventExampleIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(eventExampleIn, \"EventExampleIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get the transformation code associated with this endpoint.\n     * Get Endpoint Transformation\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public async v1EndpointTransformationGet(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointTransformationGet\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointTransformationGet\", \"endpointId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Set or unset the transformation code associated with this endpoint.\n     * Set Endpoint Transformation\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointTransformationIn \n     */\n    public async v1EndpointTransformationPartialUpdate(appId: string, endpointId: string, endpointTransformationIn: EndpointTransformationIn, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointTransformationPartialUpdate\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointTransformationPartialUpdate\", \"endpointId\");\n        }\n\n\n        // verify required parameter 'endpointTransformationIn' is not null or undefined\n        if (endpointTransformationIn === null || endpointTransformationIn === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointTransformationPartialUpdate\", \"endpointTransformationIn\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PATCH);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointTransformationIn, \"EndpointTransformationIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Simulate running the transformation on the payload and code.\n     * Simulate\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointTransformationSimulateIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1EndpointTransformationSimulate(appId: string, endpointId: string, endpointTransformationSimulateIn: EndpointTransformationSimulateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointTransformationSimulate\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointTransformationSimulate\", \"endpointId\");\n        }\n\n\n        // verify required parameter 'endpointTransformationSimulateIn' is not null or undefined\n        if (endpointTransformationSimulateIn === null || endpointTransformationSimulateIn === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointTransformationSimulate\", \"endpointTransformationSimulateIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/simulate'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointTransformationSimulateIn, \"EndpointTransformationSimulateIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Update an endpoint.\n     * Update Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointUpdate \n     */\n    public async v1EndpointUpdate(appId: string, endpointId: string, endpointUpdate: EndpointUpdate, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointUpdate\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointUpdate\", \"endpointId\");\n        }\n\n\n        // verify required parameter 'endpointUpdate' is not null or undefined\n        if (endpointUpdate === null || endpointUpdate === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointUpdate\", \"endpointUpdate\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointUpdate, \"EndpointUpdate\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Set the additional headers to be sent with the webhook.\n     * Update Endpoint Headers\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointHeadersIn \n     */\n    public async v1EndpointUpdateHeaders(appId: string, endpointId: string, endpointHeadersIn: EndpointHeadersIn, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointUpdateHeaders\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointUpdateHeaders\", \"endpointId\");\n        }\n\n\n        // verify required parameter 'endpointHeadersIn' is not null or undefined\n        if (endpointHeadersIn === null || endpointHeadersIn === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointUpdateHeaders\", \"endpointHeadersIn\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointHeadersIn, \"EndpointHeadersIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Create/update endpoint mTLS configuration.\n     * Update Endpoint Mtls Config\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointMtlsConfigIn \n     */\n    public async v1EndpointUpdateMtlsConfig(appId: string, endpointId: string, endpointMtlsConfigIn: EndpointMtlsConfigIn, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointUpdateMtlsConfig\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointUpdateMtlsConfig\", \"endpointId\");\n        }\n\n\n        // verify required parameter 'endpointMtlsConfigIn' is not null or undefined\n        if (endpointMtlsConfigIn === null || endpointMtlsConfigIn === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointUpdateMtlsConfig\", \"endpointMtlsConfigIn\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/mtls'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointMtlsConfigIn, \"EndpointMtlsConfigIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Create/update endpoint OAuth configuration.\n     * Update Endpoint Oauth Config\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointOauthConfigIn \n     */\n    public async v1EndpointUpdateOauthConfig(appId: string, endpointId: string, endpointOauthConfigIn: EndpointOauthConfigIn, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointUpdateOauthConfig\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointUpdateOauthConfig\", \"endpointId\");\n        }\n\n\n        // verify required parameter 'endpointOauthConfigIn' is not null or undefined\n        if (endpointOauthConfigIn === null || endpointOauthConfigIn === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1EndpointUpdateOauthConfig\", \"endpointOauthConfigIn\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/oauth'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointOauthConfigIn, \"EndpointOauthConfigIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Create a new sink for the application.\n     * Create Sink\n     * @param appId The app\\&#39;s ID or UID\n     * @param sinkIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1SinkCreate(appId: string, sinkIn: SinkIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1SinkCreate\", \"appId\");\n        }\n\n\n        // verify required parameter 'sinkIn' is not null or undefined\n        if (sinkIn === null || sinkIn === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1SinkCreate\", \"sinkIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/sink'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(sinkIn, \"SinkIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get a sink.\n     * Get Sink\n     * @param appId The app\\&#39;s ID or UID\n     * @param sinkId The ep\\&#39;s ID or UID\n     */\n    public async v1SinkGet(appId: string, sinkId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1SinkGet\", \"appId\");\n        }\n\n\n        // verify required parameter 'sinkId' is not null or undefined\n        if (sinkId === null || sinkId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1SinkGet\", \"sinkId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/sink/{sink_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'sink_id' + '}', encodeURIComponent(String(sinkId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List the application\\'s sinks.\n     * List Sinks\n     * @param appId The app\\&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public async v1SinkList(appId: string, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"EndpointApi\", \"v1SinkList\", \"appId\");\n        }\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/sink'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (order !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(order, \"Ordering\", \"\");\n            for (const key of Object.keys(serializedParams)) {\n                requestContext.setQueryParam(key, serializedParams[key]);\n            }\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class EndpointApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointCreate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointCreateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EndpointOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: EndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointOut\", \"\"\n            ) as EndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointOut\", \"\"\n            ) as EndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointDelete\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointDeleteMtlsConfig\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointDeleteMtlsConfigWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointDeleteOauthConfig\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointDeleteOauthConfigWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EndpointOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointOut\", \"\"\n            ) as EndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointOut\", \"\"\n            ) as EndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointGetHeaders\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointGetHeadersWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EndpointHeadersOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EndpointHeadersOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointHeadersOut\", \"\"\n            ) as EndpointHeadersOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EndpointHeadersOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointHeadersOut\", \"\"\n            ) as EndpointHeadersOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointGetSecret\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointGetSecretWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EndpointSecretOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EndpointSecretOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointSecretOut\", \"\"\n            ) as EndpointSecretOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EndpointSecretOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointSecretOut\", \"\"\n            ) as EndpointSecretOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointGetStats\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointGetStatsWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EndpointStats >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EndpointStats = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointStats\", \"\"\n            ) as EndpointStats;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EndpointStats = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointStats\", \"\"\n            ) as EndpointStats;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointList\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointListWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseEndpointOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseEndpointOut\", \"\"\n            ) as ListResponseEndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseEndpointOut\", \"\"\n            ) as ListResponseEndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointPatch\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointPatchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EndpointOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointOut\", \"\"\n            ) as EndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointOut\", \"\"\n            ) as EndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointPatchHeaders\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointPatchHeadersWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointRecover\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointRecoverWithHttpInfo(response: ResponseContext): Promise<HttpInfo<RecoverOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: RecoverOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"RecoverOut\", \"\"\n            ) as RecoverOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: RecoverOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"RecoverOut\", \"\"\n            ) as RecoverOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointReplayMissing\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointReplayMissingWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ReplayOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: ReplayOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ReplayOut\", \"\"\n            ) as ReplayOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ReplayOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ReplayOut\", \"\"\n            ) as ReplayOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointRotateSecret\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointRotateSecretWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointSendExample\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointSendExampleWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: MessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageOut\", \"\"\n            ) as MessageOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageOut\", \"\"\n            ) as MessageOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointTransformationGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointTransformationGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EndpointTransformationOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EndpointTransformationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointTransformationOut\", \"\"\n            ) as EndpointTransformationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EndpointTransformationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointTransformationOut\", \"\"\n            ) as EndpointTransformationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointTransformationPartialUpdate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointTransformationPartialUpdateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointTransformationSimulate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointTransformationSimulateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EndpointTransformationSimulateOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EndpointTransformationSimulateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointTransformationSimulateOut\", \"\"\n            ) as EndpointTransformationSimulateOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EndpointTransformationSimulateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointTransformationSimulateOut\", \"\"\n            ) as EndpointTransformationSimulateOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointUpdate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointUpdateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EndpointOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointOut\", \"\"\n            ) as EndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: EndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointOut\", \"\"\n            ) as EndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointOut\", \"\"\n            ) as EndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointUpdateHeaders\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointUpdateHeadersWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointUpdateMtlsConfig\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointUpdateMtlsConfigWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointUpdateOauthConfig\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointUpdateOauthConfigWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1SinkCreate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1SinkCreateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<SinkOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: SinkOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"SinkOut\", \"\"\n            ) as SinkOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: SinkOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"SinkOut\", \"\"\n            ) as SinkOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1SinkGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1SinkGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<SinkOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: SinkOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"SinkOut\", \"\"\n            ) as SinkOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: SinkOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"SinkOut\", \"\"\n            ) as SinkOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1SinkList\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1SinkListWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseSinkOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseSinkOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseSinkOut\", \"\"\n            ) as ListResponseSinkOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseSinkOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseSinkOut\", \"\"\n            ) as ListResponseSinkOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3599, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3604, "column": 0}, "map": {"version":3,"file":"EnvironmentApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/EnvironmentApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { EnvironmentIn } from '../models/EnvironmentIn';\nimport { EnvironmentOut } from '../models/EnvironmentOut';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\n\n/**\n * no description\n */\nexport class EnvironmentApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Download a JSON file containing all org-settings and event types.\n     * Export Environment Configuration\n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1EnvironmentExport(idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n        // Path Params\n        const localVarPath = '/api/v1/environment/export';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Import a configuration into the active organization. It doesn\\'t delete anything, only adds/updates what was passed to it.\n     * Import Environment Configuration\n     * @param environmentIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1EnvironmentImport(environmentIn: EnvironmentIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'environmentIn' is not null or undefined\n        if (environmentIn === null || environmentIn === undefined) {\n            throw new RequiredError(\"EnvironmentApi\", \"v1EnvironmentImport\", \"environmentIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/environment/import';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(environmentIn, \"EnvironmentIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class EnvironmentApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EnvironmentExport\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EnvironmentExportWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EnvironmentOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EnvironmentOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EnvironmentOut\", \"\"\n            ) as EnvironmentOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EnvironmentOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EnvironmentOut\", \"\"\n            ) as EnvironmentOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EnvironmentImport\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EnvironmentImportWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAA,iCAAmF;AAEnF,MAAA,iCAA6F;AAC7F,MAAA,2DAA4D;AAC5D,MAAA,qCAAyC;AACzC,MAAA,4BAAsD;AAYtD,MAAa,4BAA6B,SAAQ,UAAA,qBAAqB;IAOtD,mBAAmB,CAAC,cAAuB,EAAE,QAAwB,EAAA;;;YAC9E,IAAI,OAAO,GAAG,QAAQ,IAAI,IAAI,CAAC,aAAa,CAAC;YAI7C,MAAM,YAAY,GAAG,4BAA4B,CAAC;YAGlD,MAAM,cAAc,GAAG,OAAO,CAAC,UAAU,CAAC,kBAAkB,CAAC,YAAY,EAAE,OAAA,UAAU,CAAC,IAAI,CAAC,CAAC;YAC5F,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAA;YACtE,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;YAC5D,cAAc,CAAC,cAAc,CAAC,aAAa,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAA;YAIjE,IAAI,cAAc,KAAK,SAAS,EAAE;gBAC9B,cAAc,CAAC,cAAc,CAAC,iBAAiB,EAAE,mBAAA,gBAAgB,CAAC,SAAS,CAAC,cAAc,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;aAC9G;YAGD,IAAI,UAA8C,CAAC;YAEnD,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,CAAA;YAC9C,IAAI,UAAU,KAAA,QAAV,UAAU,KAAA,KAAA,IAAA,KAAA,IAAV,UAAU,CAAE,2BAA2B,EAAE;gBACzC,MAAM,UAAU,KAAA,QAAV,UAAU,KAAA,KAAA,IAAA,KAAA,IAAV,UAAU,CAAE,2BAA2B,CAAC,cAAc,CAAC,CAAA,CAAC;aACjE;YAED,MAAM,WAAW,GAAuC,CAAA,CAAA,KAAA,QAAQ,KAAA,QAAR,QAAQ,KAAA,KAAA,IAAA,KAAA,IAAR,QAAQ,CAAE,WAAW,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,OAAO,KAAA,CAAI,CAAA,KAAA,CAAA,KAAA,IAAI,CAAC,aAAa,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,WAAW,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,OAAO,CAAA,CAAA;YAClI,IAAI,WAAW,KAAA,QAAX,WAAW,KAAA,KAAA,IAAA,KAAA,IAAX,WAAW,CAAE,2BAA2B,EAAE;gBAC1C,MAAM,WAAW,KAAA,QAAX,WAAW,KAAA,KAAA,IAAA,KAAA,IAAX,WAAW,CAAE,2BAA2B,CAAC,cAAc,CAAC,CAAA,CAAC;aAClE;YAED,OAAO,cAAc,CAAC;;KACzB;IAQY,mBAAmB,CAAC,aAA4B,EAAE,cAAuB,EAAE,QAAwB,EAAA;;;YAC5G,IAAI,OAAO,GAAG,QAAQ,IAAI,IAAI,CAAC,aAAa,CAAC;YAG7C,IAAI,aAAa,KAAK,IAAI,IAAI,aAAa,KAAK,SAAS,EAAE;gBACvD,MAAM,IAAI,UAAA,aAAa,CAAC,gBAAgB,EAAE,qBAAqB,EAAE,eAAe,CAAC,CAAC;aACrF;YAKD,MAAM,YAAY,GAAG,4BAA4B,CAAC;YAGlD,MAAM,cAAc,GAAG,OAAO,CAAC,UAAU,CAAC,kBAAkB,CAAC,YAAY,EAAE,OAAA,UAAU,CAAC,IAAI,CAAC,CAAC;YAC5F,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAA;YACtE,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;YAC5D,cAAc,CAAC,cAAc,CAAC,aAAa,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAA;YAIjE,IAAI,cAAc,KAAK,SAAS,EAAE;gBAC9B,cAAc,CAAC,cAAc,CAAC,iBAAiB,EAAE,mBAAA,gBAAgB,CAAC,SAAS,CAAC,cAAc,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;aAC9G;YAID,MAAM,WAAW,GAAG,mBAAA,gBAAgB,CAAC,qBAAqB,CAAC;gBACvD,kBAAkB;aACrB,CAAC,CAAC;YACH,cAAc,CAAC,cAAc,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;YAC3D,MAAM,cAAc,GAAG,mBAAA,gBAAgB,CAAC,SAAS,CAC7C,mBAAA,gBAAgB,CAAC,SAAS,CAAC,aAAa,EAAE,eAAe,EAAE,EAAE,CAAC,EAC9D,WAAW,CACd,CAAC;YACF,cAAc,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YAEvC,IAAI,UAA8C,CAAC;YAEnD,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,CAAA;YAC9C,IAAI,UAAU,KAAA,QAAV,UAAU,KAAA,KAAA,IAAA,KAAA,IAAV,UAAU,CAAE,2BAA2B,EAAE;gBACzC,MAAM,UAAU,KAAA,QAAV,UAAU,KAAA,KAAA,IAAA,KAAA,IAAV,UAAU,CAAE,2BAA2B,CAAC,cAAc,CAAC,CAAA,CAAC;aACjE;YAED,MAAM,WAAW,GAAuC,CAAA,CAAA,KAAA,QAAQ,KAAA,QAAR,QAAQ,KAAA,KAAA,IAAA,KAAA,IAAR,QAAQ,CAAE,WAAW,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,OAAO,KAAA,CAAI,CAAA,KAAA,CAAA,KAAA,IAAI,CAAC,aAAa,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,WAAW,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,OAAO,CAAA,CAAA;YAClI,IAAI,WAAW,KAAA,QAAX,WAAW,KAAA,KAAA,IAAA,KAAA,IAAX,WAAW,CAAE,2BAA2B,EAAE;gBAC1C,MAAM,WAAW,KAAA,QAAX,WAAW,KAAA,KAAA,IAAA,KAAA,IAAX,WAAW,CAAE,2BAA2B,CAAC,cAAc,CAAC,CAAA,CAAC;aAClE;YAED,OAAO,cAAc,CAAC;;KACzB;CAEJ;AApGD,QAAA,4BAAA,GAAA,6BAoGC;AAED,MAAa,+BAA+B;IAS1B,+BAA+B,CAAC,QAAyB,EAAA;;YACnE,MAAM,WAAW,GAAG,mBAAA,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;YAC1F,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAmB,mBAAA,gBAAgB,CAAC,WAAW,CACrD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,gBAAgB,EAAE,EAAE,CACL,CAAC;gBACpB,OAAO,IAAI,OAAA,QAAQ,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aACvF;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,aAAa,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACxG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,cAAc,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACzG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACtG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACtG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACrG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAwB,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,qBAAqB,EAAE,EAAE,CACL,CAAC;gBACzB,MAAM,IAAI,YAAA,YAAY,CAAsB,QAAQ,CAAC,cAAc,EAAE,kBAAkB,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACpH;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,mBAAmB,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC9G;YAGD,IAAI,QAAQ,CAAC,cAAc,IAAI,GAAG,IAAI,QAAQ,CAAC,cAAc,IAAI,GAAG,EAAE;gBAClE,MAAM,IAAI,GAAmB,mBAAA,gBAAgB,CAAC,WAAW,CACrD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,gBAAgB,EAAE,EAAE,CACL,CAAC;gBACpB,OAAO,IAAI,OAAA,QAAQ,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aACvF;YACD,MAAM,IAAI,YAAA,YAAY,CAA4B,QAAQ,CAAC,cAAc,EAAE,0BAA0B,GAAE,MAAM,QAAQ,CAAC,YAAY,EAAA,CAAE,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC5J,CAAC;KAAA;IASa,+BAA+B,CAAC,QAAyB,EAAA;;YACnE,MAAM,WAAW,GAAG,mBAAA,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;YAC1F,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,OAAO,IAAI,OAAA,QAAQ,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;aAC5F;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,aAAa,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACxG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,cAAc,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACzG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACtG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACtG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACrG;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAwB,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,qBAAqB,EAAE,EAAE,CACL,CAAC;gBACzB,MAAM,IAAI,YAAA,YAAY,CAAsB,QAAQ,CAAC,cAAc,EAAE,kBAAkB,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aACpH;YACD,IAAI,CAAA,GAAA,OAAA,aAAa,EAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAC/C,MAAM,IAAI,GAAiB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,cAAc,EAAE,EAAE,CACL,CAAC;gBAClB,MAAM,IAAI,YAAA,YAAY,CAAe,QAAQ,CAAC,cAAc,EAAE,mBAAmB,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC9G;YAGD,IAAI,QAAQ,CAAC,cAAc,IAAI,GAAG,IAAI,QAAQ,CAAC,cAAc,IAAI,GAAG,EAAE;gBAClE,MAAM,IAAI,GAAS,mBAAA,gBAAgB,CAAC,WAAW,CAC3C,mBAAA,gBAAgB,CAAC,KAAK,EAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAA,CAAE,EAAE,WAAW,CAAC,EAC/D,MAAM,EAAE,EAAE,CACL,CAAC;gBACV,OAAO,IAAI,OAAA,QAAQ,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aACvF;YACD,MAAM,IAAI,YAAA,YAAY,CAA4B,QAAQ,CAAC,cAAc,EAAE,0BAA0B,GAAE,MAAM,QAAQ,CAAC,YAAY,EAAA,CAAE,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC5J,CAAC;KAAA;CAEJ;AAxJD,QAAA,+BAAA,GAAA,gCAwJC","ignoreList":[0]}},
    {"offset": {"line": 3787, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3792, "column": 0}, "map": {"version":3,"file":"EnvironmentSettingsApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/EnvironmentSettingsApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { EnvironmentSettingsOut } from '../models/EnvironmentSettingsOut';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\n\n/**\n * no description\n */\nexport class EnvironmentSettingsApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Get the environment\\'s settings.\n     * Get Org Settings\n     */\n    public async v1EnvironmentGetSettings(_options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // Path Params\n        const localVarPath = '/api/v1/environment/settings';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class EnvironmentSettingsApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EnvironmentGetSettings\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EnvironmentGetSettingsWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EnvironmentSettingsOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EnvironmentSettingsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EnvironmentSettingsOut\", \"\"\n            ) as EnvironmentSettingsOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EnvironmentSettingsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EnvironmentSettingsOut\", \"\"\n            ) as EnvironmentSettingsOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3898, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3903, "column": 0}, "map": {"version":3,"file":"EventTypeApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/EventTypeApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { EventTypeExampleOut } from '../models/EventTypeExampleOut';\nimport { EventTypeImportOpenApiIn } from '../models/EventTypeImportOpenApiIn';\nimport { EventTypeImportOpenApiOut } from '../models/EventTypeImportOpenApiOut';\nimport { EventTypeIn } from '../models/EventTypeIn';\nimport { EventTypeOut } from '../models/EventTypeOut';\nimport { EventTypePatch } from '../models/EventTypePatch';\nimport { EventTypeSchemaIn } from '../models/EventTypeSchemaIn';\nimport { EventTypeUpdate } from '../models/EventTypeUpdate';\nimport { ExportEventTypeOut } from '../models/ExportEventTypeOut';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { ListResponseEventTypeOut } from '../models/ListResponseEventTypeOut';\nimport { Ordering } from '../models/Ordering';\nimport { RetryScheduleInOut } from '../models/RetryScheduleInOut';\n\n/**\n * no description\n */\nexport class EventTypeApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.\n     * Create Event Type\n     * @param eventTypeIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1EventTypeCreate(eventTypeIn: EventTypeIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'eventTypeIn' is not null or undefined\n        if (eventTypeIn === null || eventTypeIn === undefined) {\n            throw new RequiredError(\"EventTypeApi\", \"v1EventTypeCreate\", \"eventTypeIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(eventTypeIn, \"EventTypeIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).\n     * Delete Event Type\n     * @param eventTypeName The event type\\&#39;s name\n     * @param expunge By default event types are archived when \\&quot;deleted\\&quot;. Passing this to &#x60;true&#x60; deletes them entirely.\n     */\n    public async v1EventTypeDelete(eventTypeName: string, expunge?: boolean, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'eventTypeName' is not null or undefined\n        if (eventTypeName === null || eventTypeName === undefined) {\n            throw new RequiredError(\"EventTypeApi\", \"v1EventTypeDelete\", \"eventTypeName\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type/{event_type_name}'\n            .replace('{' + 'event_type_name' + '}', encodeURIComponent(String(eventTypeName)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (expunge !== undefined) {\n            requestContext.setQueryParam(\"expunge\", ObjectSerializer.serialize(expunge, \"boolean\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Exports event type definitions based on the OpenAPI schemas associated with each existing event type.\n     * Event Type Export From Openapi\n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1EventTypeExportOpenapi(idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type/export/openapi';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Generates a fake example from the given JSONSchema.\n     * Generate Schema Example\n     * @param eventTypeSchemaIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1EventTypeGenerateExample(eventTypeSchemaIn: EventTypeSchemaIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'eventTypeSchemaIn' is not null or undefined\n        if (eventTypeSchemaIn === null || eventTypeSchemaIn === undefined) {\n            throw new RequiredError(\"EventTypeApi\", \"v1EventTypeGenerateExample\", \"eventTypeSchemaIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type/schema/generate-example';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(eventTypeSchemaIn, \"EventTypeSchemaIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get an event type.\n     * Get Event Type\n     * @param eventTypeName The event type\\&#39;s name\n     */\n    public async v1EventTypeGet(eventTypeName: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'eventTypeName' is not null or undefined\n        if (eventTypeName === null || eventTypeName === undefined) {\n            throw new RequiredError(\"EventTypeApi\", \"v1EventTypeGet\", \"eventTypeName\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type/{event_type_name}'\n            .replace('{' + 'event_type_name' + '}', encodeURIComponent(String(eventTypeName)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Gets the retry schedule for messages using the given event type.\n     * Get Retry Schedule\n     * @param eventTypeName The event type\\&#39;s name\n     */\n    public async v1EventTypeGetRetrySchedule(eventTypeName: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'eventTypeName' is not null or undefined\n        if (eventTypeName === null || eventTypeName === undefined) {\n            throw new RequiredError(\"EventTypeApi\", \"v1EventTypeGetRetrySchedule\", \"eventTypeName\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type/{event_type_name}/retry-schedule'\n            .replace('{' + 'event_type_name' + '}', encodeURIComponent(String(eventTypeName)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Given an OpenAPI spec, create new or update existing event types. If an existing `archived` event type is updated, it will be unarchived.  The importer will convert all webhooks found in the either the `webhooks` or `x-webhooks` top-level.\n     * Event Type Import From Openapi\n     * @param eventTypeImportOpenApiIn Import a list of event types from webhooks defined in an OpenAPI spec.  The OpenAPI spec can be specified as either &#x60;spec&#x60; given the spec as a JSON object, or as &#x60;specRaw&#x60; (a &#x60;string&#x60;) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a &#x60;400&#x60; **Bad Request**.\n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1EventTypeImportOpenapi(eventTypeImportOpenApiIn: EventTypeImportOpenApiIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'eventTypeImportOpenApiIn' is not null or undefined\n        if (eventTypeImportOpenApiIn === null || eventTypeImportOpenApiIn === undefined) {\n            throw new RequiredError(\"EventTypeApi\", \"v1EventTypeImportOpenapi\", \"eventTypeImportOpenApiIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type/import/openapi';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(eventTypeImportOpenApiIn, \"EventTypeImportOpenApiIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Return the list of event types.\n     * List Event Types\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     * @param includeArchived When &#x60;true&#x60; archived (deleted but not expunged) items are included in the response.\n     * @param withContent When &#x60;true&#x60; the full item (including the schema) is included in the response.\n     */\n    public async v1EventTypeList(limit?: number, iterator?: string, order?: Ordering, includeArchived?: boolean, withContent?: boolean, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (order !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(order, \"Ordering\", \"\");\n            for (const key of Object.keys(serializedParams)) {\n                requestContext.setQueryParam(key, serializedParams[key]);\n            }\n        }\n\n        // Query Params\n        if (includeArchived !== undefined) {\n            requestContext.setQueryParam(\"include_archived\", ObjectSerializer.serialize(includeArchived, \"boolean\", \"\"));\n        }\n\n        // Query Params\n        if (withContent !== undefined) {\n            requestContext.setQueryParam(\"with_content\", ObjectSerializer.serialize(withContent, \"boolean\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Partially update an event type.\n     * Patch Event Type\n     * @param eventTypeName The event type\\&#39;s name\n     * @param eventTypePatch \n     */\n    public async v1EventTypePatch(eventTypeName: string, eventTypePatch: EventTypePatch, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'eventTypeName' is not null or undefined\n        if (eventTypeName === null || eventTypeName === undefined) {\n            throw new RequiredError(\"EventTypeApi\", \"v1EventTypePatch\", \"eventTypeName\");\n        }\n\n\n        // verify required parameter 'eventTypePatch' is not null or undefined\n        if (eventTypePatch === null || eventTypePatch === undefined) {\n            throw new RequiredError(\"EventTypeApi\", \"v1EventTypePatch\", \"eventTypePatch\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type/{event_type_name}'\n            .replace('{' + 'event_type_name' + '}', encodeURIComponent(String(eventTypeName)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PATCH);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(eventTypePatch, \"EventTypePatch\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Update an event type.\n     * Update Event Type\n     * @param eventTypeName The event type\\&#39;s name\n     * @param eventTypeUpdate \n     */\n    public async v1EventTypeUpdate(eventTypeName: string, eventTypeUpdate: EventTypeUpdate, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'eventTypeName' is not null or undefined\n        if (eventTypeName === null || eventTypeName === undefined) {\n            throw new RequiredError(\"EventTypeApi\", \"v1EventTypeUpdate\", \"eventTypeName\");\n        }\n\n\n        // verify required parameter 'eventTypeUpdate' is not null or undefined\n        if (eventTypeUpdate === null || eventTypeUpdate === undefined) {\n            throw new RequiredError(\"EventTypeApi\", \"v1EventTypeUpdate\", \"eventTypeUpdate\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type/{event_type_name}'\n            .replace('{' + 'event_type_name' + '}', encodeURIComponent(String(eventTypeName)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(eventTypeUpdate, \"EventTypeUpdate\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Sets a retry schedule for all messages using the given event type.\n     * Update Retry Schedule\n     * @param eventTypeName The event type\\&#39;s name\n     * @param retryScheduleInOut \n     */\n    public async v1EventTypeUpdateRetrySchedule(eventTypeName: string, retryScheduleInOut: RetryScheduleInOut, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'eventTypeName' is not null or undefined\n        if (eventTypeName === null || eventTypeName === undefined) {\n            throw new RequiredError(\"EventTypeApi\", \"v1EventTypeUpdateRetrySchedule\", \"eventTypeName\");\n        }\n\n\n        // verify required parameter 'retryScheduleInOut' is not null or undefined\n        if (retryScheduleInOut === null || retryScheduleInOut === undefined) {\n            throw new RequiredError(\"EventTypeApi\", \"v1EventTypeUpdateRetrySchedule\", \"retryScheduleInOut\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type/{event_type_name}/retry-schedule'\n            .replace('{' + 'event_type_name' + '}', encodeURIComponent(String(eventTypeName)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(retryScheduleInOut, \"RetryScheduleInOut\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class EventTypeApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeCreate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeCreateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EventTypeOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: EventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeOut\", \"\"\n            ) as EventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeOut\", \"\"\n            ) as EventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeDelete\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeExportOpenapi\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeExportOpenapiWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ExportEventTypeOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: ExportEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ExportEventTypeOut\", \"\"\n            ) as ExportEventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ExportEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ExportEventTypeOut\", \"\"\n            ) as ExportEventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeGenerateExample\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeGenerateExampleWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EventTypeExampleOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EventTypeExampleOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeExampleOut\", \"\"\n            ) as EventTypeExampleOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EventTypeExampleOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeExampleOut\", \"\"\n            ) as EventTypeExampleOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EventTypeOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeOut\", \"\"\n            ) as EventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeOut\", \"\"\n            ) as EventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeGetRetrySchedule\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeGetRetryScheduleWithHttpInfo(response: ResponseContext): Promise<HttpInfo<RetryScheduleInOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: RetryScheduleInOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"RetryScheduleInOut\", \"\"\n            ) as RetryScheduleInOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: RetryScheduleInOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"RetryScheduleInOut\", \"\"\n            ) as RetryScheduleInOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeImportOpenapi\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeImportOpenapiWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EventTypeImportOpenApiOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EventTypeImportOpenApiOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeImportOpenApiOut\", \"\"\n            ) as EventTypeImportOpenApiOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EventTypeImportOpenApiOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeImportOpenApiOut\", \"\"\n            ) as EventTypeImportOpenApiOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeList\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeListWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseEventTypeOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseEventTypeOut\", \"\"\n            ) as ListResponseEventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseEventTypeOut\", \"\"\n            ) as ListResponseEventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypePatch\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypePatchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EventTypeOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeOut\", \"\"\n            ) as EventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeOut\", \"\"\n            ) as EventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeUpdate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeUpdateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EventTypeOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeOut\", \"\"\n            ) as EventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: EventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeOut\", \"\"\n            ) as EventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeOut\", \"\"\n            ) as EventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeUpdateRetrySchedule\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeUpdateRetryScheduleWithHttpInfo(response: ResponseContext): Promise<HttpInfo<RetryScheduleInOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: RetryScheduleInOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"RetryScheduleInOut\", \"\"\n            ) as RetryScheduleInOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: RetryScheduleInOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"RetryScheduleInOut\", \"\"\n            ) as RetryScheduleInOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4747, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4752, "column": 0}, "map": {"version":3,"file":"EventsApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/EventsApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { MessageEventsOut } from '../models/MessageEventsOut';\n\n/**\n * no description\n */\nexport class EventsApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Reads the stream of operational webhook events for this environment.\n     * Events\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param eventTypes Filter response based on the event type\n     * @param channels Filter response based on the event type.\n     * @param after \n     */\n    public async v1Events(limit?: number, iterator?: string, eventTypes?: Array<string>, channels?: Array<string>, after?: Date, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/events';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (eventTypes !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\");\n            for (const serializedParam of serializedParams) {\n                requestContext.appendQueryParam(\"event_types\", serializedParam);\n            }\n        }\n\n        // Query Params\n        if (channels !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(channels, \"Array<string>\", \"\");\n            for (const serializedParam of serializedParams) {\n                requestContext.appendQueryParam(\"channels\", serializedParam);\n            }\n        }\n\n        // Query Params\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class EventsApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1Events\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventsWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageEventsOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: MessageEventsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageEventsOut\", \"\"\n            ) as MessageEventsOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageEventsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageEventsOut\", \"\"\n            ) as MessageEventsOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4879, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4884, "column": 0}, "map": {"version":3,"file":"HealthApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/HealthApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\n\n/**\n * no description\n */\nexport class HealthApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Verify the API server is up and running.\n     * Health\n     */\n    public async v1HealthGet(_options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // Path Params\n        const localVarPath = '/api/v1/health';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class HealthApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1HealthGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1HealthGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4984, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4989, "column": 0}, "map": {"version":3,"file":"InboundApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/InboundApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { MessageOut } from '../models/MessageOut';\nimport { RotatedUrlOut } from '../models/RotatedUrlOut';\n\n/**\n * no description\n */\nexport class InboundApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Handles a raw inbound webhook for the application.\n     * Handle Inbound\n     * @param appId The app\\&#39;s ID or UID\n     * @param inboundToken \n     * @param body \n     * @param eventType The event type\\&#39;s name\n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1InboundMsg(appId: string, inboundToken: string, body: string, eventType?: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"InboundApi\", \"v1InboundMsg\", \"appId\");\n        }\n\n\n        // verify required parameter 'inboundToken' is not null or undefined\n        if (inboundToken === null || inboundToken === undefined) {\n            throw new RequiredError(\"InboundApi\", \"v1InboundMsg\", \"inboundToken\");\n        }\n\n\n        // verify required parameter 'body' is not null or undefined\n        if (body === null || body === undefined) {\n            throw new RequiredError(\"InboundApi\", \"v1InboundMsg\", \"body\");\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/inbound/msg/{inbound_token}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'inbound_token' + '}', encodeURIComponent(String(inboundToken)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (eventType !== undefined) {\n            requestContext.setQueryParam(\"event_type\", ObjectSerializer.serialize(eventType, \"string\", \"\"));\n        }\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(body, \"string\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Invalidates the previous inbound url (if one exists), producing a new inbound URL for this app.\n     * Rotate Url\n     * @param appId The app\\&#39;s ID or UID\n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1InboundRotateUrl(appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"InboundApi\", \"v1InboundRotateUrl\", \"appId\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/inbound/rotate-url'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class InboundApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1InboundMsg\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1InboundMsgWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: MessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageOut\", \"\"\n            ) as MessageOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageOut\", \"\"\n            ) as MessageOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1InboundRotateUrl\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1InboundRotateUrlWithHttpInfo(response: ResponseContext): Promise<HttpInfo<RotatedUrlOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: RotatedUrlOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"RotatedUrlOut\", \"\"\n            ) as RotatedUrlOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: RotatedUrlOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"RotatedUrlOut\", \"\"\n            ) as RotatedUrlOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5185, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5190, "column": 0}, "map": {"version":3,"file":"IntegrationApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/IntegrationApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { IntegrationIn } from '../models/IntegrationIn';\nimport { IntegrationKeyOut } from '../models/IntegrationKeyOut';\nimport { IntegrationOut } from '../models/IntegrationOut';\nimport { IntegrationUpdate } from '../models/IntegrationUpdate';\nimport { ListResponseIntegrationOut } from '../models/ListResponseIntegrationOut';\nimport { Ordering } from '../models/Ordering';\n\n/**\n * no description\n */\nexport class IntegrationApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Create an integration.\n     * Create Integration\n     * @param appId The app\\&#39;s ID or UID\n     * @param integrationIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1IntegrationCreate(appId: string, integrationIn: IntegrationIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"IntegrationApi\", \"v1IntegrationCreate\", \"appId\");\n        }\n\n\n        // verify required parameter 'integrationIn' is not null or undefined\n        if (integrationIn === null || integrationIn === undefined) {\n            throw new RequiredError(\"IntegrationApi\", \"v1IntegrationCreate\", \"integrationIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/integration'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(integrationIn, \"IntegrationIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Delete an integration.\n     * Delete Integration\n     * @param appId The app\\&#39;s ID or UID\n     * @param integId The integ\\&#39;s ID\n     */\n    public async v1IntegrationDelete(appId: string, integId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"IntegrationApi\", \"v1IntegrationDelete\", \"appId\");\n        }\n\n\n        // verify required parameter 'integId' is not null or undefined\n        if (integId === null || integId === undefined) {\n            throw new RequiredError(\"IntegrationApi\", \"v1IntegrationDelete\", \"integId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/integration/{integ_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'integ_id' + '}', encodeURIComponent(String(integId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get an integration.\n     * Get Integration\n     * @param appId The app\\&#39;s ID or UID\n     * @param integId The integ\\&#39;s ID\n     */\n    public async v1IntegrationGet(appId: string, integId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"IntegrationApi\", \"v1IntegrationGet\", \"appId\");\n        }\n\n\n        // verify required parameter 'integId' is not null or undefined\n        if (integId === null || integId === undefined) {\n            throw new RequiredError(\"IntegrationApi\", \"v1IntegrationGet\", \"integId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/integration/{integ_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'integ_id' + '}', encodeURIComponent(String(integId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get an integration\\'s key.\n     * Get Integration Key\n     * @param appId The app\\&#39;s ID or UID\n     * @param integId The integ\\&#39;s ID\n     */\n    public async v1IntegrationGetKey(appId: string, integId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"IntegrationApi\", \"v1IntegrationGetKey\", \"appId\");\n        }\n\n\n        // verify required parameter 'integId' is not null or undefined\n        if (integId === null || integId === undefined) {\n            throw new RequiredError(\"IntegrationApi\", \"v1IntegrationGetKey\", \"integId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/integration/{integ_id}/key'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'integ_id' + '}', encodeURIComponent(String(integId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List the application\\'s integrations.\n     * List Integrations\n     * @param appId The app\\&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public async v1IntegrationList(appId: string, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"IntegrationApi\", \"v1IntegrationList\", \"appId\");\n        }\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/integration'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (order !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(order, \"Ordering\", \"\");\n            for (const key of Object.keys(serializedParams)) {\n                requestContext.setQueryParam(key, serializedParams[key]);\n            }\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Rotate the integration\\'s key. The previous key will be immediately revoked.\n     * Rotate Integration Key\n     * @param appId The app\\&#39;s ID or UID\n     * @param integId The integ\\&#39;s ID\n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1IntegrationRotateKey(appId: string, integId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"IntegrationApi\", \"v1IntegrationRotateKey\", \"appId\");\n        }\n\n\n        // verify required parameter 'integId' is not null or undefined\n        if (integId === null || integId === undefined) {\n            throw new RequiredError(\"IntegrationApi\", \"v1IntegrationRotateKey\", \"integId\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/integration/{integ_id}/key/rotate'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'integ_id' + '}', encodeURIComponent(String(integId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Update an integration.\n     * Update Integration\n     * @param appId The app\\&#39;s ID or UID\n     * @param integId The integ\\&#39;s ID\n     * @param integrationUpdate \n     */\n    public async v1IntegrationUpdate(appId: string, integId: string, integrationUpdate: IntegrationUpdate, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"IntegrationApi\", \"v1IntegrationUpdate\", \"appId\");\n        }\n\n\n        // verify required parameter 'integId' is not null or undefined\n        if (integId === null || integId === undefined) {\n            throw new RequiredError(\"IntegrationApi\", \"v1IntegrationUpdate\", \"integId\");\n        }\n\n\n        // verify required parameter 'integrationUpdate' is not null or undefined\n        if (integrationUpdate === null || integrationUpdate === undefined) {\n            throw new RequiredError(\"IntegrationApi\", \"v1IntegrationUpdate\", \"integrationUpdate\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/integration/{integ_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'integ_id' + '}', encodeURIComponent(String(integId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(integrationUpdate, \"IntegrationUpdate\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class IntegrationApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1IntegrationCreate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1IntegrationCreateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<IntegrationOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: IntegrationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationOut\", \"\"\n            ) as IntegrationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: IntegrationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationOut\", \"\"\n            ) as IntegrationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1IntegrationDelete\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1IntegrationDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1IntegrationGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1IntegrationGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<IntegrationOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: IntegrationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationOut\", \"\"\n            ) as IntegrationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: IntegrationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationOut\", \"\"\n            ) as IntegrationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1IntegrationGetKey\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1IntegrationGetKeyWithHttpInfo(response: ResponseContext): Promise<HttpInfo<IntegrationKeyOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: IntegrationKeyOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationKeyOut\", \"\"\n            ) as IntegrationKeyOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: IntegrationKeyOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationKeyOut\", \"\"\n            ) as IntegrationKeyOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1IntegrationList\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1IntegrationListWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseIntegrationOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseIntegrationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseIntegrationOut\", \"\"\n            ) as ListResponseIntegrationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseIntegrationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseIntegrationOut\", \"\"\n            ) as ListResponseIntegrationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1IntegrationRotateKey\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1IntegrationRotateKeyWithHttpInfo(response: ResponseContext): Promise<HttpInfo<IntegrationKeyOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: IntegrationKeyOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationKeyOut\", \"\"\n            ) as IntegrationKeyOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: IntegrationKeyOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationKeyOut\", \"\"\n            ) as IntegrationKeyOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1IntegrationUpdate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1IntegrationUpdateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<IntegrationOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: IntegrationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationOut\", \"\"\n            ) as IntegrationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: IntegrationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationOut\", \"\"\n            ) as IntegrationOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5745, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5750, "column": 0}, "map": {"version":3,"file":"MessageApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/MessageApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { ListResponseMessageOut } from '../models/ListResponseMessageOut';\nimport { MessageAttemptOut } from '../models/MessageAttemptOut';\nimport { MessageEventsOut } from '../models/MessageEventsOut';\nimport { MessageIn } from '../models/MessageIn';\nimport { MessageOut } from '../models/MessageOut';\nimport { MessageRawPayloadOut } from '../models/MessageRawPayloadOut';\nimport { MessageSubscriberAuthTokenOut } from '../models/MessageSubscriberAuthTokenOut';\n\n/**\n * no description\n */\nexport class MessageApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Creates and sends a message to the specified endpoint.  The message attempt and response from the endpoint is returned.\n     * Create Message Attempt For Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param messageIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async createMessageAttemptForEndpoint(appId: string, endpointId: string, messageIn: MessageIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageApi\", \"createMessageAttemptForEndpoint\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"MessageApi\", \"createMessageAttemptForEndpoint\", \"endpointId\");\n        }\n\n\n        // verify required parameter 'messageIn' is not null or undefined\n        if (messageIn === null || messageIn === undefined) {\n            throw new RequiredError(\"MessageApi\", \"createMessageAttemptForEndpoint\", \"messageIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg/test-attempt'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(messageIn, \"MessageIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Reads the stream of created messages for an application, filtered on the Sink\\'s event types and Channels.\n     * Public Events\n     * @param appId The app\\&#39;s ID or UID\n     * @param sinkId The ep\\&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param eventType Filters messages sent with this event type (optional).\n     * @param channel Filters messages sent with this channel (optional).\n     * @param after \n     */\n    public async v1EventsPublic(appId: string, sinkId: string, limit?: number, iterator?: string, eventType?: string, channel?: string, after?: Date, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageApi\", \"v1EventsPublic\", \"appId\");\n        }\n\n\n        // verify required parameter 'sinkId' is not null or undefined\n        if (sinkId === null || sinkId === undefined) {\n            throw new RequiredError(\"MessageApi\", \"v1EventsPublic\", \"sinkId\");\n        }\n\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/poller/{sink_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'sink_id' + '}', encodeURIComponent(String(sinkId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (eventType !== undefined) {\n            requestContext.setQueryParam(\"event_type\", ObjectSerializer.serialize(eventType, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (channel !== undefined) {\n            requestContext.setQueryParam(\"channel\", ObjectSerializer.serialize(channel, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Creates a new message and dispatches it to all of the application\\'s endpoints.  The `eventId` is an optional custom unique ID. It\\'s verified to be unique only up to a day, after that no verification will be made. If a message with the same `eventId` already exists for the application, a 409 conflict error will be returned.  The `eventType` indicates the type and schema of the event. All messages of a certain `eventType` are expected to have the same schema. Endpoints can choose to only listen to specific event types. Messages can also have `channels`, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don\\'t imply a specific message content or schema.  The `payload` property is the webhook\\'s body (the actual webhook message). Svix supports payload sizes of up to ~350kb, though it\\'s generally a good idea to keep webhook payloads small, probably no larger than 40kb.\n     * Create Message\n     * @param appId The app\\&#39;s ID or UID\n     * @param messageIn \n     * @param withContent When &#x60;true&#x60;, message payloads are included in the response.\n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1MessageCreate(appId: string, messageIn: MessageIn, withContent?: boolean, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageApi\", \"v1MessageCreate\", \"appId\");\n        }\n\n\n        // verify required parameter 'messageIn' is not null or undefined\n        if (messageIn === null || messageIn === undefined) {\n            throw new RequiredError(\"MessageApi\", \"v1MessageCreate\", \"messageIn\");\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (withContent !== undefined) {\n            requestContext.setQueryParam(\"with_content\", ObjectSerializer.serialize(withContent, \"boolean\", \"\"));\n        }\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(messageIn, \"MessageIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Reads the stream of created messages for an application.\n     * Message Events\n     * @param appId The app\\&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param eventTypes Filter response based on the event type\n     * @param channels Filter response based on the event type.\n     * @param after \n     */\n    public async v1MessageEvents(appId: string, limit?: number, iterator?: string, eventTypes?: Array<string>, channels?: Array<string>, after?: Date, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageApi\", \"v1MessageEvents\", \"appId\");\n        }\n\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/events'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (eventTypes !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\");\n            for (const serializedParam of serializedParams) {\n                requestContext.appendQueryParam(\"event_types\", serializedParam);\n            }\n        }\n\n        // Query Params\n        if (channels !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(channels, \"Array<string>\", \"\");\n            for (const serializedParam of serializedParams) {\n                requestContext.appendQueryParam(\"channels\", serializedParam);\n            }\n        }\n\n        // Query Params\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Reads the stream of created messages for an application, but using server-managed iterator tracking.\n     * Message Events Subscription\n     * @param appId The app\\&#39;s ID or UID\n     * @param subscriptionId The esub\\&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param eventTypes Filter response based on the event type\n     * @param channels Filter response based on the event type.\n     * @param after \n     */\n    public async v1MessageEventsSubscription(appId: string, subscriptionId: string, limit?: number, iterator?: string, eventTypes?: Array<string>, channels?: Array<string>, after?: Date, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageApi\", \"v1MessageEventsSubscription\", \"appId\");\n        }\n\n\n        // verify required parameter 'subscriptionId' is not null or undefined\n        if (subscriptionId === null || subscriptionId === undefined) {\n            throw new RequiredError(\"MessageApi\", \"v1MessageEventsSubscription\", \"subscriptionId\");\n        }\n\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/events/subscription/{subscription_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'subscription_id' + '}', encodeURIComponent(String(subscriptionId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (eventTypes !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\");\n            for (const serializedParam of serializedParams) {\n                requestContext.appendQueryParam(\"event_types\", serializedParam);\n            }\n        }\n\n        // Query Params\n        if (channels !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(channels, \"Array<string>\", \"\");\n            for (const serializedParam of serializedParams) {\n                requestContext.appendQueryParam(\"channels\", serializedParam);\n            }\n        }\n\n        // Query Params\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Creates an auth token that can be used with the `v1.message.events-subscription` endpoint.\n     * Message Events Create Token\n     * @param appId The app\\&#39;s ID or UID\n     * @param subscriptionId The esub\\&#39;s ID or UID\n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1MessageEventsSubscriptionCreateToken(appId: string, subscriptionId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageApi\", \"v1MessageEventsSubscriptionCreateToken\", \"appId\");\n        }\n\n\n        // verify required parameter 'subscriptionId' is not null or undefined\n        if (subscriptionId === null || subscriptionId === undefined) {\n            throw new RequiredError(\"MessageApi\", \"v1MessageEventsSubscriptionCreateToken\", \"subscriptionId\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/events/subscription/{subscription_id}/create-token'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'subscription_id' + '}', encodeURIComponent(String(subscriptionId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Delete the given message\\'s payload.  Useful in cases when a message was accidentally sent with sensitive content. The message can\\'t be replayed or resent once its payload has been deleted or expired.\n     * Delete message payload\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     */\n    public async v1MessageExpungeContent(appId: string, msgId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageApi\", \"v1MessageExpungeContent\", \"appId\");\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError(\"MessageApi\", \"v1MessageExpungeContent\", \"msgId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}/content'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get a message by its ID or eventID.\n     * Get Message\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param withContent When &#x60;true&#x60; message payloads are included in the response.\n     */\n    public async v1MessageGet(appId: string, msgId: string, withContent?: boolean, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageApi\", \"v1MessageGet\", \"appId\");\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError(\"MessageApi\", \"v1MessageGet\", \"msgId\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (withContent !== undefined) {\n            requestContext.setQueryParam(\"with_content\", ObjectSerializer.serialize(withContent, \"boolean\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get a message raw payload by its ID or eventID.\n     * Get Raw Message Payload\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     */\n    public async v1MessageGetRawPayload(appId: string, msgId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageApi\", \"v1MessageGetRawPayload\", \"appId\");\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError(\"MessageApi\", \"v1MessageGetRawPayload\", \"msgId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}/raw'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List all of the application\\'s messages.  The `before` and `after` parameters let you filter all items created before or after a certain date. These can be used alongside an iterator to paginate over results within a certain window.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Messages\n     * @param appId The app\\&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param channel Filter response based on the channel.\n     * @param before Only include items created before a certain date.\n     * @param after Only include items created after a certain date.\n     * @param withContent When &#x60;true&#x60; message payloads are included in the response.\n     * @param tag Filter messages matching the provided tag.\n     * @param eventTypes Filter response based on the event type\n     */\n    public async v1MessageList(appId: string, limit?: number, iterator?: string, channel?: string, before?: Date, after?: Date, withContent?: boolean, tag?: string, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageApi\", \"v1MessageList\", \"appId\");\n        }\n\n\n\n\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (channel !== undefined) {\n            requestContext.setQueryParam(\"channel\", ObjectSerializer.serialize(channel, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (before !== undefined) {\n            requestContext.setQueryParam(\"before\", ObjectSerializer.serialize(before, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (withContent !== undefined) {\n            requestContext.setQueryParam(\"with_content\", ObjectSerializer.serialize(withContent, \"boolean\", \"\"));\n        }\n\n        // Query Params\n        if (tag !== undefined) {\n            requestContext.setQueryParam(\"tag\", ObjectSerializer.serialize(tag, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (eventTypes !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\");\n            for (const serializedParam of serializedParams) {\n                requestContext.appendQueryParam(\"event_types\", serializedParam);\n            }\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class MessageApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to createMessageAttemptForEndpoint\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async createMessageAttemptForEndpointWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageAttemptOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: MessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageAttemptOut\", \"\"\n            ) as MessageAttemptOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageAttemptOut\", \"\"\n            ) as MessageAttemptOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventsPublic\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventsPublicWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageEventsOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: MessageEventsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageEventsOut\", \"\"\n            ) as MessageEventsOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageEventsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageEventsOut\", \"\"\n            ) as MessageEventsOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageCreate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageCreateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: MessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageOut\", \"\"\n            ) as MessageOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"413\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Payload too large\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageOut\", \"\"\n            ) as MessageOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageEvents\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageEventsWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageEventsOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: MessageEventsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageEventsOut\", \"\"\n            ) as MessageEventsOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageEventsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageEventsOut\", \"\"\n            ) as MessageEventsOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageEventsSubscription\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageEventsSubscriptionWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageEventsOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: MessageEventsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageEventsOut\", \"\"\n            ) as MessageEventsOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageEventsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageEventsOut\", \"\"\n            ) as MessageEventsOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageEventsSubscriptionCreateToken\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageEventsSubscriptionCreateTokenWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageSubscriberAuthTokenOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: MessageSubscriberAuthTokenOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageSubscriberAuthTokenOut\", \"\"\n            ) as MessageSubscriberAuthTokenOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageSubscriberAuthTokenOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageSubscriberAuthTokenOut\", \"\"\n            ) as MessageSubscriberAuthTokenOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageExpungeContent\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageExpungeContentWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: MessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageOut\", \"\"\n            ) as MessageOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageOut\", \"\"\n            ) as MessageOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageGetRawPayload\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageGetRawPayloadWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageRawPayloadOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: MessageRawPayloadOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageRawPayloadOut\", \"\"\n            ) as MessageRawPayloadOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageRawPayloadOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageRawPayloadOut\", \"\"\n            ) as MessageRawPayloadOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageList\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageListWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseMessageOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseMessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageOut\", \"\"\n            ) as ListResponseMessageOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseMessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageOut\", \"\"\n            ) as ListResponseMessageOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6594, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6599, "column": 0}, "map": {"version":3,"file":"MessageAttemptApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/MessageAttemptApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { CountOut } from '../models/CountOut';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { ListResponseEndpointMessageOut } from '../models/ListResponseEndpointMessageOut';\nimport { ListResponseMessageAttemptEndpointOut } from '../models/ListResponseMessageAttemptEndpointOut';\nimport { ListResponseMessageAttemptOut } from '../models/ListResponseMessageAttemptOut';\nimport { ListResponseMessageEndpointOut } from '../models/ListResponseMessageEndpointOut';\nimport { MessageAttemptHeadersOut } from '../models/MessageAttemptHeadersOut';\nimport { MessageAttemptOut } from '../models/MessageAttemptOut';\nimport { MessageStatus } from '../models/MessageStatus';\nimport { StatusCodeClass } from '../models/StatusCodeClass';\n\n/**\n * no description\n */\nexport class MessageAttemptApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Like `v1.message-attempt.list-by-endpoint` but returning a count only.\n     * Count Attempts By Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param status Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * @param statusCodeClass Filter response based on the HTTP status code\n     * @param channel Filter response based on the channel\n     * @param tag Filter response based on the tag\n     * @param before Only include items created before a certain date\n     * @param after Only include items created after a certain date\n     * @param eventTypes Filter response based on the event type\n     */\n    public async v1MessageAttemptCountByEndpoint(appId: string, endpointId: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, before?: Date, after?: Date, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptCountByEndpoint\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptCountByEndpoint\", \"endpointId\");\n        }\n\n\n\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}/count'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (status !== undefined) {\n            requestContext.setQueryParam(\"status\", ObjectSerializer.serialize(status, \"MessageStatus\", \"\"));\n        }\n\n        // Query Params\n        if (statusCodeClass !== undefined) {\n            requestContext.setQueryParam(\"status_code_class\", ObjectSerializer.serialize(statusCodeClass, \"StatusCodeClass\", \"\"));\n        }\n\n        // Query Params\n        if (channel !== undefined) {\n            requestContext.setQueryParam(\"channel\", ObjectSerializer.serialize(channel, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (tag !== undefined) {\n            requestContext.setQueryParam(\"tag\", ObjectSerializer.serialize(tag, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (before !== undefined) {\n            requestContext.setQueryParam(\"before\", ObjectSerializer.serialize(before, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (eventTypes !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\");\n            for (const serializedParam of serializedParams) {\n                requestContext.appendQueryParam(\"event_types\", serializedParam);\n            }\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Deletes the given attempt\\'s response body.  Useful when an endpoint accidentally returned sensitive content. The message can\\'t be replayed or resent once its payload has been deleted or expired.\n     * Delete attempt response body\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param attemptId The attempt\\&#39;s ID\n     */\n    public async v1MessageAttemptExpungeContent(appId: string, msgId: string, attemptId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptExpungeContent\", \"appId\");\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptExpungeContent\", \"msgId\");\n        }\n\n\n        // verify required parameter 'attemptId' is not null or undefined\n        if (attemptId === null || attemptId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptExpungeContent\", \"attemptId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)))\n            .replace('{' + 'attempt_id' + '}', encodeURIComponent(String(attemptId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * `msg_id`: Use a message id or a message `eventId`\n     * Get Attempt\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param attemptId The attempt\\&#39;s ID\n     */\n    public async v1MessageAttemptGet(appId: string, msgId: string, attemptId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptGet\", \"appId\");\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptGet\", \"msgId\");\n        }\n\n\n        // verify required parameter 'attemptId' is not null or undefined\n        if (attemptId === null || attemptId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptGet\", \"attemptId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)))\n            .replace('{' + 'attempt_id' + '}', encodeURIComponent(String(attemptId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Calculate and return headers used on a given message attempt\n     * Get Attempt Headers\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param attemptId The attempt\\&#39;s ID\n     */\n    public async v1MessageAttemptGetHeaders(appId: string, msgId: string, attemptId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptGetHeaders\", \"appId\");\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptGetHeaders\", \"msgId\");\n        }\n\n\n        // verify required parameter 'attemptId' is not null or undefined\n        if (attemptId === null || attemptId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptGetHeaders\", \"attemptId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/headers'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)))\n            .replace('{' + 'attempt_id' + '}', encodeURIComponent(String(attemptId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List endpoints attempted by a given message.  Additionally includes metadata about the latest message attempt. By default, endpoints are listed in ascending order by ID.\n     * List Attempted Destinations\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     */\n    public async v1MessageAttemptListAttemptedDestinations(appId: string, msgId: string, limit?: number, iterator?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptListAttemptedDestinations\", \"appId\");\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptListAttemptedDestinations\", \"msgId\");\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}/endpoint'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempted Messages\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param channel Filter response based on the channel\n     * @param tag Filter response based on the message tags\n     * @param status Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * @param before Only include items created before a certain date\n     * @param after Only include items created after a certain date\n     * @param withContent When &#x60;true&#x60; message payloads are included in the response\n     * @param eventTypes Filter response based on the event type\n     */\n    public async v1MessageAttemptListAttemptedMessages(appId: string, endpointId: string, limit?: number, iterator?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, withContent?: boolean, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptListAttemptedMessages\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptListAttemptedMessages\", \"endpointId\");\n        }\n\n\n\n\n\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (channel !== undefined) {\n            requestContext.setQueryParam(\"channel\", ObjectSerializer.serialize(channel, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (tag !== undefined) {\n            requestContext.setQueryParam(\"tag\", ObjectSerializer.serialize(tag, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (status !== undefined) {\n            requestContext.setQueryParam(\"status\", ObjectSerializer.serialize(status, \"MessageStatus\", \"\"));\n        }\n\n        // Query Params\n        if (before !== undefined) {\n            requestContext.setQueryParam(\"before\", ObjectSerializer.serialize(before, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (withContent !== undefined) {\n            requestContext.setQueryParam(\"with_content\", ObjectSerializer.serialize(withContent, \"boolean\", \"\"));\n        }\n\n        // Query Params\n        if (eventTypes !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\");\n            for (const serializedParam of serializedParams) {\n                requestContext.appendQueryParam(\"event_types\", serializedParam);\n            }\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List attempts by endpoint id  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts By Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param status Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * @param statusCodeClass Filter response based on the HTTP status code\n     * @param channel Filter response based on the channel\n     * @param tag Filter response based on the tag\n     * @param before Only include items created before a certain date\n     * @param after Only include items created after a certain date\n     * @param withContent When &#x60;true&#x60; attempt content is included in the response\n     * @param withMsg When &#x60;true&#x60;, the message information is included in the response\n     * @param eventTypes Filter response based on the event type\n     */\n    public async v1MessageAttemptListByEndpoint(appId: string, endpointId: string, limit?: number, iterator?: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, before?: Date, after?: Date, withContent?: boolean, withMsg?: boolean, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptListByEndpoint\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptListByEndpoint\", \"endpointId\");\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (status !== undefined) {\n            requestContext.setQueryParam(\"status\", ObjectSerializer.serialize(status, \"MessageStatus\", \"\"));\n        }\n\n        // Query Params\n        if (statusCodeClass !== undefined) {\n            requestContext.setQueryParam(\"status_code_class\", ObjectSerializer.serialize(statusCodeClass, \"StatusCodeClass\", \"\"));\n        }\n\n        // Query Params\n        if (channel !== undefined) {\n            requestContext.setQueryParam(\"channel\", ObjectSerializer.serialize(channel, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (tag !== undefined) {\n            requestContext.setQueryParam(\"tag\", ObjectSerializer.serialize(tag, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (before !== undefined) {\n            requestContext.setQueryParam(\"before\", ObjectSerializer.serialize(before, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (withContent !== undefined) {\n            requestContext.setQueryParam(\"with_content\", ObjectSerializer.serialize(withContent, \"boolean\", \"\"));\n        }\n\n        // Query Params\n        if (withMsg !== undefined) {\n            requestContext.setQueryParam(\"with_msg\", ObjectSerializer.serialize(withMsg, \"boolean\", \"\"));\n        }\n\n        // Query Params\n        if (eventTypes !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\");\n            for (const serializedParam of serializedParams) {\n                requestContext.appendQueryParam(\"event_types\", serializedParam);\n            }\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts For Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param channel Filter response based on the channel\n     * @param tag Filter response based on the tag\n     * @param status Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * @param before Only include items created before a certain date\n     * @param after Only include items created after a certain date\n     * @param eventTypes Filter response based on the event type\n     */\n    public async v1MessageAttemptListByEndpointDeprecated(appId: string, msgId: string, endpointId: string, limit?: number, iterator?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptListByEndpointDeprecated\", \"appId\");\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptListByEndpointDeprecated\", \"msgId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptListByEndpointDeprecated\", \"endpointId\");\n        }\n\n\n\n\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/attempt'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (channel !== undefined) {\n            requestContext.setQueryParam(\"channel\", ObjectSerializer.serialize(channel, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (tag !== undefined) {\n            requestContext.setQueryParam(\"tag\", ObjectSerializer.serialize(tag, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (status !== undefined) {\n            requestContext.setQueryParam(\"status\", ObjectSerializer.serialize(status, \"MessageStatus\", \"\"));\n        }\n\n        // Query Params\n        if (before !== undefined) {\n            requestContext.setQueryParam(\"before\", ObjectSerializer.serialize(before, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (eventTypes !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\");\n            for (const serializedParam of serializedParams) {\n                requestContext.appendQueryParam(\"event_types\", serializedParam);\n            }\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List attempts by message ID.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.\n     * List Attempts By Msg\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param status Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * @param statusCodeClass Filter response based on the HTTP status code\n     * @param channel Filter response based on the channel\n     * @param tag Filter response based on the tag\n     * @param endpointId Filter the attempts based on the attempted endpoint\n     * @param before Only include items created before a certain date\n     * @param after Only include items created after a certain date\n     * @param withContent When &#x60;true&#x60; attempt content is included in the response\n     * @param eventTypes Filter response based on the event type\n     */\n    public async v1MessageAttemptListByMsg(appId: string, msgId: string, limit?: number, iterator?: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, endpointId?: string, before?: Date, after?: Date, withContent?: boolean, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptListByMsg\", \"appId\");\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptListByMsg\", \"msgId\");\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/attempt/msg/{msg_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (status !== undefined) {\n            requestContext.setQueryParam(\"status\", ObjectSerializer.serialize(status, \"MessageStatus\", \"\"));\n        }\n\n        // Query Params\n        if (statusCodeClass !== undefined) {\n            requestContext.setQueryParam(\"status_code_class\", ObjectSerializer.serialize(statusCodeClass, \"StatusCodeClass\", \"\"));\n        }\n\n        // Query Params\n        if (channel !== undefined) {\n            requestContext.setQueryParam(\"channel\", ObjectSerializer.serialize(channel, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (tag !== undefined) {\n            requestContext.setQueryParam(\"tag\", ObjectSerializer.serialize(tag, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (endpointId !== undefined) {\n            requestContext.setQueryParam(\"endpoint_id\", ObjectSerializer.serialize(endpointId, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (before !== undefined) {\n            requestContext.setQueryParam(\"before\", ObjectSerializer.serialize(before, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (withContent !== undefined) {\n            requestContext.setQueryParam(\"with_content\", ObjectSerializer.serialize(withContent, \"boolean\", \"\"));\n        }\n\n        // Query Params\n        if (eventTypes !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\");\n            for (const serializedParam of serializedParams) {\n                requestContext.appendQueryParam(\"event_types\", serializedParam);\n            }\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Deprecated: Please use \\\"List Attempts by Endpoint\\\" and \\\"List Attempts by Msg\\\" instead.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.  `msg_id`: Use a message id or a message `eventId`\n     * List Attempts\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param endpointId Filter the attempts based on the attempted endpoint\n     * @param channel Filter response based on the channel\n     * @param tag Filter response based on the tag\n     * @param status Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * @param before Only include items created before a certain date\n     * @param after Only include items created after a certain date\n     * @param statusCodeClass Filter response based on the HTTP status code\n     * @param eventTypes Filter response based on the event type\n     */\n    public async v1MessageAttemptListByMsgDeprecated(appId: string, msgId: string, limit?: number, iterator?: string, endpointId?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, statusCodeClass?: StatusCodeClass, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptListByMsgDeprecated\", \"appId\");\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptListByMsgDeprecated\", \"msgId\");\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}/attempt'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (endpointId !== undefined) {\n            requestContext.setQueryParam(\"endpoint_id\", ObjectSerializer.serialize(endpointId, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (channel !== undefined) {\n            requestContext.setQueryParam(\"channel\", ObjectSerializer.serialize(channel, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (tag !== undefined) {\n            requestContext.setQueryParam(\"tag\", ObjectSerializer.serialize(tag, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (status !== undefined) {\n            requestContext.setQueryParam(\"status\", ObjectSerializer.serialize(status, \"MessageStatus\", \"\"));\n        }\n\n        // Query Params\n        if (before !== undefined) {\n            requestContext.setQueryParam(\"before\", ObjectSerializer.serialize(before, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (statusCodeClass !== undefined) {\n            requestContext.setQueryParam(\"status_code_class\", ObjectSerializer.serialize(statusCodeClass, \"StatusCodeClass\", \"\"));\n        }\n\n        // Query Params\n        if (eventTypes !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\");\n            for (const serializedParam of serializedParams) {\n                requestContext.appendQueryParam(\"event_types\", serializedParam);\n            }\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Resend a message to the specified endpoint.\n     * Resend Webhook\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1MessageAttemptResend(appId: string, msgId: string, endpointId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptResend\", \"appId\");\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptResend\", \"msgId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"MessageAttemptApi\", \"v1MessageAttemptResend\", \"endpointId\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class MessageAttemptApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptCountByEndpoint\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptCountByEndpointWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CountOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: CountOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"CountOut\", \"\"\n            ) as CountOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: CountOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"CountOut\", \"\"\n            ) as CountOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptExpungeContent\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptExpungeContentWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageAttemptOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: MessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageAttemptOut\", \"\"\n            ) as MessageAttemptOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageAttemptOut\", \"\"\n            ) as MessageAttemptOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptGetHeaders\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptGetHeadersWithHttpInfo(response: ResponseContext): Promise<HttpInfo<MessageAttemptHeadersOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: MessageAttemptHeadersOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageAttemptHeadersOut\", \"\"\n            ) as MessageAttemptHeadersOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageAttemptHeadersOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageAttemptHeadersOut\", \"\"\n            ) as MessageAttemptHeadersOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptListAttemptedDestinations\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptListAttemptedDestinationsWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseMessageEndpointOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseMessageEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageEndpointOut\", \"\"\n            ) as ListResponseMessageEndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseMessageEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageEndpointOut\", \"\"\n            ) as ListResponseMessageEndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptListAttemptedMessages\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptListAttemptedMessagesWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseEndpointMessageOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseEndpointMessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseEndpointMessageOut\", \"\"\n            ) as ListResponseEndpointMessageOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseEndpointMessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseEndpointMessageOut\", \"\"\n            ) as ListResponseEndpointMessageOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptListByEndpoint\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptListByEndpointWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseMessageAttemptOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseMessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageAttemptOut\", \"\"\n            ) as ListResponseMessageAttemptOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseMessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageAttemptOut\", \"\"\n            ) as ListResponseMessageAttemptOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptListByEndpointDeprecated\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptListByEndpointDeprecatedWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseMessageAttemptEndpointOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseMessageAttemptEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageAttemptEndpointOut\", \"\"\n            ) as ListResponseMessageAttemptEndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseMessageAttemptEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageAttemptEndpointOut\", \"\"\n            ) as ListResponseMessageAttemptEndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptListByMsg\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptListByMsgWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseMessageAttemptOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseMessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageAttemptOut\", \"\"\n            ) as ListResponseMessageAttemptOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseMessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageAttemptOut\", \"\"\n            ) as ListResponseMessageAttemptOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptListByMsgDeprecated\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptListByMsgDeprecatedWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseMessageAttemptOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseMessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageAttemptOut\", \"\"\n            ) as ListResponseMessageAttemptOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseMessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageAttemptOut\", \"\"\n            ) as ListResponseMessageAttemptOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptResend\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptResendWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7609, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7614, "column": 0}, "map": {"version":3,"file":"StatisticsApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/StatisticsApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { AggregateEventTypesOut } from '../models/AggregateEventTypesOut';\nimport { AppUsageStatsIn } from '../models/AppUsageStatsIn';\nimport { AppUsageStatsOut } from '../models/AppUsageStatsOut';\nimport { AttemptStatisticsResponse } from '../models/AttemptStatisticsResponse';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\n\n/**\n * no description\n */\nexport class StatisticsApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Creates a background task to calculate the message destinations for all applications in the environment.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.\n     * Aggregate App Stats\n     * @param appUsageStatsIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1StatisticsAggregateAppStats(appUsageStatsIn: AppUsageStatsIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appUsageStatsIn' is not null or undefined\n        if (appUsageStatsIn === null || appUsageStatsIn === undefined) {\n            throw new RequiredError(\"StatisticsApi\", \"v1StatisticsAggregateAppStats\", \"appUsageStatsIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stats/usage/app';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(appUsageStatsIn, \"AppUsageStatsIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Creates a background task to calculate the listed event types for all apps in the organization.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.\n     * Aggregate Event Types\n     */\n    public async v1StatisticsAggregateEventTypes(_options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // Path Params\n        const localVarPath = '/api/v1/stats/usage/event-types';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Returns application-level statistics on message attempts\n     * Get App Attempt Stats\n     * @param appId The app\\&#39;s ID or UID\n     * @param startDate Filter the range to data starting from this date.\n     * @param endDate Filter the range to data ending by this date.\n     */\n    public async v1StatsAppAttempts(appId: string, startDate?: Date, endDate?: Date, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"StatisticsApi\", \"v1StatsAppAttempts\", \"appId\");\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stats/app/{app_id}/attempt'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (startDate !== undefined) {\n            requestContext.setQueryParam(\"startDate\", ObjectSerializer.serialize(startDate, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (endDate !== undefined) {\n            requestContext.setQueryParam(\"endDate\", ObjectSerializer.serialize(endDate, \"Date\", \"date-time\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Returns endpoint-level statistics on message attempts.\n     * Get Ep Stats\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param startDate Filter the range to data starting from this date.\n     * @param endDate Filter the range to data ending by this date.\n     */\n    public async v1StatsEndpointAttempts(appId: string, endpointId: string, startDate?: Date, endDate?: Date, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"StatisticsApi\", \"v1StatsEndpointAttempts\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"StatisticsApi\", \"v1StatsEndpointAttempts\", \"endpointId\");\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stats/app/{app_id}/ep/{endpoint_id}/attempt'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (startDate !== undefined) {\n            requestContext.setQueryParam(\"startDate\", ObjectSerializer.serialize(startDate, \"Date\", \"date-time\"));\n        }\n\n        // Query Params\n        if (endDate !== undefined) {\n            requestContext.setQueryParam(\"endDate\", ObjectSerializer.serialize(endDate, \"Date\", \"date-time\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class StatisticsApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StatisticsAggregateAppStats\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StatisticsAggregateAppStatsWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AppUsageStatsOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: AppUsageStatsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AppUsageStatsOut\", \"\"\n            ) as AppUsageStatsOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: AppUsageStatsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AppUsageStatsOut\", \"\"\n            ) as AppUsageStatsOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StatisticsAggregateEventTypes\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StatisticsAggregateEventTypesWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AggregateEventTypesOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: AggregateEventTypesOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AggregateEventTypesOut\", \"\"\n            ) as AggregateEventTypesOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: AggregateEventTypesOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AggregateEventTypesOut\", \"\"\n            ) as AggregateEventTypesOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StatsAppAttempts\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StatsAppAttemptsWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AttemptStatisticsResponse >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: AttemptStatisticsResponse = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AttemptStatisticsResponse\", \"\"\n            ) as AttemptStatisticsResponse;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: AttemptStatisticsResponse = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AttemptStatisticsResponse\", \"\"\n            ) as AttemptStatisticsResponse;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StatsEndpointAttempts\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StatsEndpointAttemptsWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AttemptStatisticsResponse >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: AttemptStatisticsResponse = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AttemptStatisticsResponse\", \"\"\n            ) as AttemptStatisticsResponse;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: AttemptStatisticsResponse = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AttemptStatisticsResponse\", \"\"\n            ) as AttemptStatisticsResponse;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7942, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7947, "column": 0}, "map": {"version":3,"file":"StreamApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/StreamApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { CreateStreamIn } from '../models/CreateStreamIn';\nimport { EventStreamOut } from '../models/EventStreamOut';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { ListResponseStreamOut } from '../models/ListResponseStreamOut';\nimport { Ordering } from '../models/Ordering';\nimport { StreamIn } from '../models/StreamIn';\nimport { StreamOut } from '../models/StreamOut';\nimport { StreamPatch } from '../models/StreamPatch';\n\n/**\n * no description\n */\nexport class StreamApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Creates a new stream.\n     * Create Stream\n     * @param streamIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1StreamCreate(streamIn: StreamIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'streamIn' is not null or undefined\n        if (streamIn === null || streamIn === undefined) {\n            throw new RequiredError(\"StreamApi\", \"v1StreamCreate\", \"streamIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(streamIn, \"StreamIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Creates events on the Stream.\n     * Create Events\n     * @param streamId \n     * @param createStreamIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1StreamCreateEvents(streamId: string, createStreamIn: CreateStreamIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'streamId' is not null or undefined\n        if (streamId === null || streamId === undefined) {\n            throw new RequiredError(\"StreamApi\", \"v1StreamCreateEvents\", \"streamId\");\n        }\n\n\n        // verify required parameter 'createStreamIn' is not null or undefined\n        if (createStreamIn === null || createStreamIn === undefined) {\n            throw new RequiredError(\"StreamApi\", \"v1StreamCreateEvents\", \"createStreamIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream/{stream_id}/events'\n            .replace('{' + 'stream_id' + '}', encodeURIComponent(String(streamId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(createStreamIn, \"CreateStreamIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Delete a stream.\n     * Delete Stream\n     * @param streamId \n     */\n    public async v1StreamDelete(streamId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'streamId' is not null or undefined\n        if (streamId === null || streamId === undefined) {\n            throw new RequiredError(\"StreamApi\", \"v1StreamDelete\", \"streamId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream/{stream_id}'\n            .replace('{' + 'stream_id' + '}', encodeURIComponent(String(streamId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Iterate over a stream of events.\n     * Stream Events\n     * @param streamId \n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param after \n     */\n    public async v1StreamEventsGet(streamId: string, limit?: number, iterator?: string, after?: Date, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'streamId' is not null or undefined\n        if (streamId === null || streamId === undefined) {\n            throw new RequiredError(\"StreamApi\", \"v1StreamEventsGet\", \"streamId\");\n        }\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream/{stream_id}/events'\n            .replace('{' + 'stream_id' + '}', encodeURIComponent(String(streamId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get a stream by id or uid.\n     * Get Stream\n     * @param streamId \n     */\n    public async v1StreamGet(streamId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'streamId' is not null or undefined\n        if (streamId === null || streamId === undefined) {\n            throw new RequiredError(\"StreamApi\", \"v1StreamGet\", \"streamId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream/{stream_id}'\n            .replace('{' + 'stream_id' + '}', encodeURIComponent(String(streamId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List of all the organization\\'s streams.\n     * List Streams\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public async v1StreamList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (order !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(order, \"Ordering\", \"\");\n            for (const key of Object.keys(serializedParams)) {\n                requestContext.setQueryParam(key, serializedParams[key]);\n            }\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Partially update a stream.\n     * Patch Stream\n     * @param streamId \n     * @param streamPatch \n     */\n    public async v1StreamPatch(streamId: string, streamPatch: StreamPatch, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'streamId' is not null or undefined\n        if (streamId === null || streamId === undefined) {\n            throw new RequiredError(\"StreamApi\", \"v1StreamPatch\", \"streamId\");\n        }\n\n\n        // verify required parameter 'streamPatch' is not null or undefined\n        if (streamPatch === null || streamPatch === undefined) {\n            throw new RequiredError(\"StreamApi\", \"v1StreamPatch\", \"streamPatch\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream/{stream_id}'\n            .replace('{' + 'stream_id' + '}', encodeURIComponent(String(streamId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PATCH);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(streamPatch, \"StreamPatch\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Update a stream.\n     * Update Stream\n     * @param streamId \n     * @param streamIn \n     */\n    public async v1StreamUpdate(streamId: string, streamIn: StreamIn, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'streamId' is not null or undefined\n        if (streamId === null || streamId === undefined) {\n            throw new RequiredError(\"StreamApi\", \"v1StreamUpdate\", \"streamId\");\n        }\n\n\n        // verify required parameter 'streamIn' is not null or undefined\n        if (streamIn === null || streamIn === undefined) {\n            throw new RequiredError(\"StreamApi\", \"v1StreamUpdate\", \"streamIn\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream/{stream_id}'\n            .replace('{' + 'stream_id' + '}', encodeURIComponent(String(streamId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(streamIn, \"StreamIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class StreamApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamCreate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamCreateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<StreamOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamCreateEvents\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamCreateEventsWithHttpInfo(response: ResponseContext): Promise<HttpInfo<any >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: any = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"any\", \"\"\n            ) as any;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: any = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"any\", \"\"\n            ) as any;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamDelete\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamEventsGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamEventsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<EventStreamOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EventStreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventStreamOut\", \"\"\n            ) as EventStreamOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EventStreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventStreamOut\", \"\"\n            ) as EventStreamOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<StreamOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamList\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamListWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseStreamOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseStreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseStreamOut\", \"\"\n            ) as ListResponseStreamOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseStreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseStreamOut\", \"\"\n            ) as ListResponseStreamOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamPatch\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamPatchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<StreamOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamUpdate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamUpdateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<StreamOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 8582, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8587, "column": 0}, "map": {"version":3,"file":"StreamEventTypesApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/StreamEventTypesApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { ListResponseStreamEventTypeOut } from '../models/ListResponseStreamEventTypeOut';\nimport { Ordering } from '../models/Ordering';\nimport { StreamEventTypeIn } from '../models/StreamEventTypeIn';\nimport { StreamEventTypeOut } from '../models/StreamEventTypeOut';\nimport { StreamEventTypePatch } from '../models/StreamEventTypePatch';\n\n/**\n * no description\n */\nexport class StreamEventTypesApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Create an event type for Streams.\n     * Create Stream Event Type\n     * @param streamEventTypeIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1StreamEventTypeCreate(streamEventTypeIn: StreamEventTypeIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'streamEventTypeIn' is not null or undefined\n        if (streamEventTypeIn === null || streamEventTypeIn === undefined) {\n            throw new RequiredError(\"StreamEventTypesApi\", \"v1StreamEventTypeCreate\", \"streamEventTypeIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream/event-type';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(streamEventTypeIn, \"StreamEventTypeIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Delete an event type.\n     * Delete Stream Event Type\n     * @param name The event type\\&#39;s name\n     */\n    public async v1StreamEventTypeDelete(name: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'name' is not null or undefined\n        if (name === null || name === undefined) {\n            throw new RequiredError(\"StreamEventTypesApi\", \"v1StreamEventTypeDelete\", \"name\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream/event-type/{name}'\n            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get an event type.\n     * Get Stream Event Type\n     * @param name The event type\\&#39;s name\n     */\n    public async v1StreamEventTypeGet(name: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'name' is not null or undefined\n        if (name === null || name === undefined) {\n            throw new RequiredError(\"StreamEventTypesApi\", \"v1StreamEventTypeGet\", \"name\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream/event-type/{name}'\n            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List of all the organization\\'s event types for streaming.\n     * List Stream Event Types\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public async v1StreamEventTypeList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream/event-type';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (order !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(order, \"Ordering\", \"\");\n            for (const key of Object.keys(serializedParams)) {\n                requestContext.setQueryParam(key, serializedParams[key]);\n            }\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Patch an event type for Streams.\n     * Patch Stream Event Type\n     * @param name The event type\\&#39;s name\n     * @param streamEventTypePatch \n     */\n    public async v1StreamEventTypePatch(name: string, streamEventTypePatch: StreamEventTypePatch, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'name' is not null or undefined\n        if (name === null || name === undefined) {\n            throw new RequiredError(\"StreamEventTypesApi\", \"v1StreamEventTypePatch\", \"name\");\n        }\n\n\n        // verify required parameter 'streamEventTypePatch' is not null or undefined\n        if (streamEventTypePatch === null || streamEventTypePatch === undefined) {\n            throw new RequiredError(\"StreamEventTypesApi\", \"v1StreamEventTypePatch\", \"streamEventTypePatch\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream/event-type/{name}'\n            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PATCH);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(streamEventTypePatch, \"StreamEventTypePatch\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Update or create a event type for Streams.\n     * Update Stream Event Type\n     * @param name The event type\\&#39;s name\n     * @param streamEventTypeIn \n     */\n    public async v1StreamEventTypeUpdate(name: string, streamEventTypeIn: StreamEventTypeIn, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'name' is not null or undefined\n        if (name === null || name === undefined) {\n            throw new RequiredError(\"StreamEventTypesApi\", \"v1StreamEventTypeUpdate\", \"name\");\n        }\n\n\n        // verify required parameter 'streamEventTypeIn' is not null or undefined\n        if (streamEventTypeIn === null || streamEventTypeIn === undefined) {\n            throw new RequiredError(\"StreamEventTypesApi\", \"v1StreamEventTypeUpdate\", \"streamEventTypeIn\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream/event-type/{name}'\n            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(streamEventTypeIn, \"StreamEventTypeIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class StreamEventTypesApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamEventTypeCreate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamEventTypeCreateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<StreamEventTypeOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: StreamEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamEventTypeOut\", \"\"\n            ) as StreamEventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: StreamEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamEventTypeOut\", \"\"\n            ) as StreamEventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamEventTypeDelete\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamEventTypeDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamEventTypeGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamEventTypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<StreamEventTypeOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: StreamEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamEventTypeOut\", \"\"\n            ) as StreamEventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: StreamEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamEventTypeOut\", \"\"\n            ) as StreamEventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamEventTypeList\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamEventTypeListWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseStreamEventTypeOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseStreamEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseStreamEventTypeOut\", \"\"\n            ) as ListResponseStreamEventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseStreamEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseStreamEventTypeOut\", \"\"\n            ) as ListResponseStreamEventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamEventTypePatch\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamEventTypePatchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<StreamEventTypeOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: StreamEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamEventTypeOut\", \"\"\n            ) as StreamEventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: StreamEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamEventTypeOut\", \"\"\n            ) as StreamEventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamEventTypeUpdate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamEventTypeUpdateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<StreamEventTypeOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: StreamEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamEventTypeOut\", \"\"\n            ) as StreamEventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: StreamEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamEventTypeOut\", \"\"\n            ) as StreamEventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: StreamEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamEventTypeOut\", \"\"\n            ) as StreamEventTypeOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 9065, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9070, "column": 0}, "map": {"version":3,"file":"TransformationTemplateApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/TransformationTemplateApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { GenerateIn } from '../models/GenerateIn';\nimport { GenerateOut } from '../models/GenerateOut';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { HubspotOauthConfigIn } from '../models/HubspotOauthConfigIn';\nimport { IncomingWebhookPayloadOut } from '../models/IncomingWebhookPayloadOut';\nimport { ListResponseTemplateOut } from '../models/ListResponseTemplateOut';\nimport { OAuthPayloadIn } from '../models/OAuthPayloadIn';\nimport { OAuthPayloadOut } from '../models/OAuthPayloadOut';\nimport { Ordering } from '../models/Ordering';\nimport { TemplateIn } from '../models/TemplateIn';\nimport { TemplateOut } from '../models/TemplateOut';\nimport { TemplatePatch } from '../models/TemplatePatch';\nimport { TemplateUpdate } from '../models/TemplateUpdate';\nimport { TransformationSimulateIn } from '../models/TransformationSimulateIn';\nimport { TransformationSimulateOut } from '../models/TransformationSimulateOut';\n\n/**\n * no description\n */\nexport class TransformationTemplateApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Create/update endpoint Hubspot OAuth configuration Specific private endpoint just for us, to avoid exposing the Hubspot secret to the client.\n     * Update Hubspot Oauth Config\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param hubspotOauthConfigIn \n     */\n    public async v1EndpointUpdateHubspotOauthConfig(appId: string, endpointId: string, hubspotOauthConfigIn: HubspotOauthConfigIn, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError(\"TransformationTemplateApi\", \"v1EndpointUpdateHubspotOauthConfig\", \"appId\");\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"TransformationTemplateApi\", \"v1EndpointUpdateHubspotOauthConfig\", \"endpointId\");\n        }\n\n\n        // verify required parameter 'hubspotOauthConfigIn' is not null or undefined\n        if (hubspotOauthConfigIn === null || hubspotOauthConfigIn === undefined) {\n            throw new RequiredError(\"TransformationTemplateApi\", \"v1EndpointUpdateHubspotOauthConfig\", \"hubspotOauthConfigIn\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation-template/oauth/hubspot'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(hubspotOauthConfigIn, \"HubspotOauthConfigIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Create a new transformation template.\n     * Create Transformation Template\n     * @param templateIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1TransformationTemplateCreate(templateIn: TemplateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'templateIn' is not null or undefined\n        if (templateIn === null || templateIn === undefined) {\n            throw new RequiredError(\"TransformationTemplateApi\", \"v1TransformationTemplateCreate\", \"templateIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(templateIn, \"TemplateIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Delete a transformation template.\n     * Delete Transformation Template\n     * @param transformationTemplateId \n     */\n    public async v1TransformationTemplateDelete(transformationTemplateId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'transformationTemplateId' is not null or undefined\n        if (transformationTemplateId === null || transformationTemplateId === undefined) {\n            throw new RequiredError(\"TransformationTemplateApi\", \"v1TransformationTemplateDelete\", \"transformationTemplateId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template/{transformation_template_id}'\n            .replace('{' + 'transformation_template_id' + '}', encodeURIComponent(String(transformationTemplateId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Use OpenAI\\'s Completion API to generate code for a transformation template.\n     * Generate\n     * @param generateIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1TransformationTemplateGenerate(generateIn: GenerateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'generateIn' is not null or undefined\n        if (generateIn === null || generateIn === undefined) {\n            throw new RequiredError(\"TransformationTemplateApi\", \"v1TransformationTemplateGenerate\", \"generateIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template/generate';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(generateIn, \"GenerateIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get a transformation template.\n     * Get Transformation Template\n     * @param transformationTemplateId \n     */\n    public async v1TransformationTemplateGet(transformationTemplateId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'transformationTemplateId' is not null or undefined\n        if (transformationTemplateId === null || transformationTemplateId === undefined) {\n            throw new RequiredError(\"TransformationTemplateApi\", \"v1TransformationTemplateGet\", \"transformationTemplateId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template/{transformation_template_id}'\n            .replace('{' + 'transformation_template_id' + '}', encodeURIComponent(String(transformationTemplateId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List all transformation templates for an application.\n     * List Transformation Templates\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public async v1TransformationTemplateList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (order !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(order, \"Ordering\", \"\");\n            for (const key of Object.keys(serializedParams)) {\n                requestContext.setQueryParam(key, serializedParams[key]);\n            }\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get Discord Incoming webhook URL.\n     * Authorize Discord\n     * @param oAuthPayloadIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1TransformationTemplateOauthDiscord(oAuthPayloadIn: OAuthPayloadIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'oAuthPayloadIn' is not null or undefined\n        if (oAuthPayloadIn === null || oAuthPayloadIn === undefined) {\n            throw new RequiredError(\"TransformationTemplateApi\", \"v1TransformationTemplateOauthDiscord\", \"oAuthPayloadIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template/oauth/discord';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(oAuthPayloadIn, \"OAuthPayloadIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get Hubspot access token using authorization code.\n     * Authorize Hubspot\n     * @param oAuthPayloadIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1TransformationTemplateOauthHubspot(oAuthPayloadIn: OAuthPayloadIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'oAuthPayloadIn' is not null or undefined\n        if (oAuthPayloadIn === null || oAuthPayloadIn === undefined) {\n            throw new RequiredError(\"TransformationTemplateApi\", \"v1TransformationTemplateOauthHubspot\", \"oAuthPayloadIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template/oauth/hubspot';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(oAuthPayloadIn, \"OAuthPayloadIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get Slack Incoming webhook URL.\n     * Authorize Slack\n     * @param oAuthPayloadIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1TransformationTemplateOauthSlack(oAuthPayloadIn: OAuthPayloadIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'oAuthPayloadIn' is not null or undefined\n        if (oAuthPayloadIn === null || oAuthPayloadIn === undefined) {\n            throw new RequiredError(\"TransformationTemplateApi\", \"v1TransformationTemplateOauthSlack\", \"oAuthPayloadIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template/oauth/slack';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(oAuthPayloadIn, \"OAuthPayloadIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Partially update a transformation template.\n     * Patch Transformation Template\n     * @param transformationTemplateId \n     * @param templatePatch \n     */\n    public async v1TransformationTemplatePatch(transformationTemplateId: string, templatePatch: TemplatePatch, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'transformationTemplateId' is not null or undefined\n        if (transformationTemplateId === null || transformationTemplateId === undefined) {\n            throw new RequiredError(\"TransformationTemplateApi\", \"v1TransformationTemplatePatch\", \"transformationTemplateId\");\n        }\n\n\n        // verify required parameter 'templatePatch' is not null or undefined\n        if (templatePatch === null || templatePatch === undefined) {\n            throw new RequiredError(\"TransformationTemplateApi\", \"v1TransformationTemplatePatch\", \"templatePatch\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template/{transformation_template_id}'\n            .replace('{' + 'transformation_template_id' + '}', encodeURIComponent(String(transformationTemplateId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PATCH);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(templatePatch, \"TemplatePatch\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Simulate running the transformation on the payload and code.\n     * Simulate\n     * @param transformationSimulateIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async v1TransformationTemplateSimulate(transformationSimulateIn: TransformationSimulateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'transformationSimulateIn' is not null or undefined\n        if (transformationSimulateIn === null || transformationSimulateIn === undefined) {\n            throw new RequiredError(\"TransformationTemplateApi\", \"v1TransformationTemplateSimulate\", \"transformationSimulateIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template/simulate';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(transformationSimulateIn, \"TransformationSimulateIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Update a transformation template.\n     * Update Transformation Template\n     * @param transformationTemplateId \n     * @param templateUpdate \n     */\n    public async v1TransformationTemplateUpdate(transformationTemplateId: string, templateUpdate: TemplateUpdate, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'transformationTemplateId' is not null or undefined\n        if (transformationTemplateId === null || transformationTemplateId === undefined) {\n            throw new RequiredError(\"TransformationTemplateApi\", \"v1TransformationTemplateUpdate\", \"transformationTemplateId\");\n        }\n\n\n        // verify required parameter 'templateUpdate' is not null or undefined\n        if (templateUpdate === null || templateUpdate === undefined) {\n            throw new RequiredError(\"TransformationTemplateApi\", \"v1TransformationTemplateUpdate\", \"templateUpdate\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template/{transformation_template_id}'\n            .replace('{' + 'transformation_template_id' + '}', encodeURIComponent(String(transformationTemplateId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(templateUpdate, \"TemplateUpdate\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class TransformationTemplateApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointUpdateHubspotOauthConfig\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointUpdateHubspotOauthConfigWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateCreate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateCreateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<TemplateOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: TemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TemplateOut\", \"\"\n            ) as TemplateOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: TemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TemplateOut\", \"\"\n            ) as TemplateOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateDelete\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateGenerate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateGenerateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<GenerateOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: GenerateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"GenerateOut\", \"\"\n            ) as GenerateOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: GenerateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"GenerateOut\", \"\"\n            ) as GenerateOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<TemplateOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: TemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TemplateOut\", \"\"\n            ) as TemplateOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: TemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TemplateOut\", \"\"\n            ) as TemplateOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateList\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateListWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseTemplateOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseTemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseTemplateOut\", \"\"\n            ) as ListResponseTemplateOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseTemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseTemplateOut\", \"\"\n            ) as ListResponseTemplateOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateOauthDiscord\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateOauthDiscordWithHttpInfo(response: ResponseContext): Promise<HttpInfo<IncomingWebhookPayloadOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: IncomingWebhookPayloadOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IncomingWebhookPayloadOut\", \"\"\n            ) as IncomingWebhookPayloadOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: IncomingWebhookPayloadOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IncomingWebhookPayloadOut\", \"\"\n            ) as IncomingWebhookPayloadOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateOauthHubspot\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateOauthHubspotWithHttpInfo(response: ResponseContext): Promise<HttpInfo<OAuthPayloadOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: OAuthPayloadOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"OAuthPayloadOut\", \"\"\n            ) as OAuthPayloadOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: OAuthPayloadOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"OAuthPayloadOut\", \"\"\n            ) as OAuthPayloadOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateOauthSlack\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateOauthSlackWithHttpInfo(response: ResponseContext): Promise<HttpInfo<IncomingWebhookPayloadOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: IncomingWebhookPayloadOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IncomingWebhookPayloadOut\", \"\"\n            ) as IncomingWebhookPayloadOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: IncomingWebhookPayloadOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IncomingWebhookPayloadOut\", \"\"\n            ) as IncomingWebhookPayloadOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplatePatch\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplatePatchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<TemplateOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: TemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TemplateOut\", \"\"\n            ) as TemplateOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: TemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TemplateOut\", \"\"\n            ) as TemplateOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateSimulate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateSimulateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<TransformationSimulateOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: TransformationSimulateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TransformationSimulateOut\", \"\"\n            ) as TransformationSimulateOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: TransformationSimulateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TransformationSimulateOut\", \"\"\n            ) as TransformationSimulateOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateUpdate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateUpdateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<TemplateOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: TemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TemplateOut\", \"\"\n            ) as TemplateOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: TemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TemplateOut\", \"\"\n            ) as TemplateOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: TemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TemplateOut\", \"\"\n            ) as TemplateOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 10000, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10005, "column": 0}, "map": {"version":3,"file":"WebhookEndpointApi.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/apis/WebhookEndpointApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { ListResponseOperationalWebhookEndpointOut } from '../models/ListResponseOperationalWebhookEndpointOut';\nimport { OperationalWebhookEndpointIn } from '../models/OperationalWebhookEndpointIn';\nimport { OperationalWebhookEndpointOut } from '../models/OperationalWebhookEndpointOut';\nimport { OperationalWebhookEndpointSecretIn } from '../models/OperationalWebhookEndpointSecretIn';\nimport { OperationalWebhookEndpointSecretOut } from '../models/OperationalWebhookEndpointSecretOut';\nimport { OperationalWebhookEndpointUpdate } from '../models/OperationalWebhookEndpointUpdate';\nimport { Ordering } from '../models/Ordering';\n\n/**\n * no description\n */\nexport class WebhookEndpointApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Create an operational webhook endpoint.\n     * Create Operational Webhook Endpoint\n     * @param operationalWebhookEndpointIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async createOperationalWebhookEndpoint(operationalWebhookEndpointIn: OperationalWebhookEndpointIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'operationalWebhookEndpointIn' is not null or undefined\n        if (operationalWebhookEndpointIn === null || operationalWebhookEndpointIn === undefined) {\n            throw new RequiredError(\"WebhookEndpointApi\", \"createOperationalWebhookEndpoint\", \"operationalWebhookEndpointIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/operational-webhook/endpoint';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(operationalWebhookEndpointIn, \"OperationalWebhookEndpointIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Delete an operational webhook endpoint.\n     * Delete Operational Webhook Endpoint\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public async deleteOperationalWebhookEndpoint(endpointId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"WebhookEndpointApi\", \"deleteOperationalWebhookEndpoint\", \"endpointId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/operational-webhook/endpoint/{endpoint_id}'\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get an operational webhook endpoint.\n     * Get Operational Webhook Endpoint\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public async getOperationalWebhookEndpoint(endpointId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"WebhookEndpointApi\", \"getOperationalWebhookEndpoint\", \"endpointId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/operational-webhook/endpoint/{endpoint_id}'\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get an operational webhook endpoint\\'s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).\n     * Get Operational Webhook Endpoint Secret\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public async getOperationalWebhookEndpointSecret(endpointId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"WebhookEndpointApi\", \"getOperationalWebhookEndpointSecret\", \"endpointId\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/operational-webhook/endpoint/{endpoint_id}/secret'\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List operational webhook endpoints.\n     * List Operational Webhook Endpoints\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public async listOperationalWebhookEndpoints(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/operational-webhook/endpoint';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n\n        // Query Params\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (order !== undefined) {\n            const serializedParams = ObjectSerializer.serialize(order, \"Ordering\", \"\");\n            for (const key of Object.keys(serializedParams)) {\n                requestContext.setQueryParam(key, serializedParams[key]);\n            }\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Rotates an operational webhook endpoint\\'s signing secret.  The previous secret will remain valid for the next 24 hours.\n     * Rotate Operational Webhook Endpoint Secret\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param operationalWebhookEndpointSecretIn \n     * @param idempotencyKey The request\\&#39;s idempotency key\n     */\n    public async rotateOperationalWebhookEndpointSecret(endpointId: string, operationalWebhookEndpointSecretIn: OperationalWebhookEndpointSecretIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"WebhookEndpointApi\", \"rotateOperationalWebhookEndpointSecret\", \"endpointId\");\n        }\n\n\n        // verify required parameter 'operationalWebhookEndpointSecretIn' is not null or undefined\n        if (operationalWebhookEndpointSecretIn === null || operationalWebhookEndpointSecretIn === undefined) {\n            throw new RequiredError(\"WebhookEndpointApi\", \"rotateOperationalWebhookEndpointSecret\", \"operationalWebhookEndpointSecretIn\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/operational-webhook/endpoint/{endpoint_id}/secret/rotate'\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(operationalWebhookEndpointSecretIn, \"OperationalWebhookEndpointSecretIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Update an operational webhook endpoint.\n     * Update Operational Webhook Endpoint\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param operationalWebhookEndpointUpdate \n     */\n    public async updateOperationalWebhookEndpoint(endpointId: string, operationalWebhookEndpointUpdate: OperationalWebhookEndpointUpdate, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError(\"WebhookEndpointApi\", \"updateOperationalWebhookEndpoint\", \"endpointId\");\n        }\n\n\n        // verify required parameter 'operationalWebhookEndpointUpdate' is not null or undefined\n        if (operationalWebhookEndpointUpdate === null || operationalWebhookEndpointUpdate === undefined) {\n            throw new RequiredError(\"WebhookEndpointApi\", \"updateOperationalWebhookEndpoint\", \"operationalWebhookEndpointUpdate\");\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/operational-webhook/endpoint/{endpoint_id}'\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(operationalWebhookEndpointUpdate, \"OperationalWebhookEndpointUpdate\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n\n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class WebhookEndpointApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to createOperationalWebhookEndpoint\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async createOperationalWebhookEndpointWithHttpInfo(response: ResponseContext): Promise<HttpInfo<OperationalWebhookEndpointOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: OperationalWebhookEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"OperationalWebhookEndpointOut\", \"\"\n            ) as OperationalWebhookEndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: OperationalWebhookEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"OperationalWebhookEndpointOut\", \"\"\n            ) as OperationalWebhookEndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to deleteOperationalWebhookEndpoint\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async deleteOperationalWebhookEndpointWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getOperationalWebhookEndpoint\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getOperationalWebhookEndpointWithHttpInfo(response: ResponseContext): Promise<HttpInfo<OperationalWebhookEndpointOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: OperationalWebhookEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"OperationalWebhookEndpointOut\", \"\"\n            ) as OperationalWebhookEndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: OperationalWebhookEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"OperationalWebhookEndpointOut\", \"\"\n            ) as OperationalWebhookEndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getOperationalWebhookEndpointSecret\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getOperationalWebhookEndpointSecretWithHttpInfo(response: ResponseContext): Promise<HttpInfo<OperationalWebhookEndpointSecretOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: OperationalWebhookEndpointSecretOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"OperationalWebhookEndpointSecretOut\", \"\"\n            ) as OperationalWebhookEndpointSecretOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: OperationalWebhookEndpointSecretOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"OperationalWebhookEndpointSecretOut\", \"\"\n            ) as OperationalWebhookEndpointSecretOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to listOperationalWebhookEndpoints\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async listOperationalWebhookEndpointsWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseOperationalWebhookEndpointOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseOperationalWebhookEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseOperationalWebhookEndpointOut\", \"\"\n            ) as ListResponseOperationalWebhookEndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseOperationalWebhookEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseOperationalWebhookEndpointOut\", \"\"\n            ) as ListResponseOperationalWebhookEndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to rotateOperationalWebhookEndpointSecret\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async rotateOperationalWebhookEndpointSecretWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to updateOperationalWebhookEndpoint\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async updateOperationalWebhookEndpointWithHttpInfo(response: ResponseContext): Promise<HttpInfo<OperationalWebhookEndpointOut >> {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: OperationalWebhookEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"OperationalWebhookEndpointOut\", \"\"\n            ) as OperationalWebhookEndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Bad request\", body, response.headers);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Unauthorized\", body, response.headers);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Forbidden\", body, response.headers);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Not Found\", body, response.headers);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Conflict\", body, response.headers);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(response.httpStatusCode, \"Validation Error\", body, response.headers);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(response.httpStatusCode, \"Too Many Requests\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: OperationalWebhookEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"OperationalWebhookEndpointOut\", \"\"\n            ) as OperationalWebhookEndpointOut;\n            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);\n        }\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 10547, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}