{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"file":"ObservableAPI.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/types/ObservableAPI.ts"],"sourcesContent":["import { ResponseContext, RequestContext, HttpFile, HttpInfo } from '../http/http';\nimport { Configuration} from '../configuration'\nimport { Observable, of, from } from '../rxjsStub';\nimport {mergeMap, map} from  '../rxjsStub';\nimport { AggregateEventTypesOut } from '../models/AggregateEventTypesOut';\nimport { AppPortalAccessIn } from '../models/AppPortalAccessIn';\nimport { AppPortalAccessOut } from '../models/AppPortalAccessOut';\nimport { AppUsageStatsIn } from '../models/AppUsageStatsIn';\nimport { AppUsageStatsOut } from '../models/AppUsageStatsOut';\nimport { ApplicationIn } from '../models/ApplicationIn';\nimport { ApplicationOut } from '../models/ApplicationOut';\nimport { ApplicationPatch } from '../models/ApplicationPatch';\nimport { ApplicationStats } from '../models/ApplicationStats';\nimport { ApplicationTokenExpireIn } from '../models/ApplicationTokenExpireIn';\nimport { AttemptStatisticsData } from '../models/AttemptStatisticsData';\nimport { AttemptStatisticsResponse } from '../models/AttemptStatisticsResponse';\nimport { AuthTokenOut } from '../models/AuthTokenOut';\nimport { AzureBlobStorageConfig } from '../models/AzureBlobStorageConfig';\nimport { BackgroundTaskOut } from '../models/BackgroundTaskOut';\nimport { BackgroundTaskStatus } from '../models/BackgroundTaskStatus';\nimport { BackgroundTaskType } from '../models/BackgroundTaskType';\nimport { BigQueryConfig } from '../models/BigQueryConfig';\nimport { BorderRadiusConfig } from '../models/BorderRadiusConfig';\nimport { BorderRadiusEnum } from '../models/BorderRadiusEnum';\nimport { ClientSecretJwtParamsIn } from '../models/ClientSecretJwtParamsIn';\nimport { CompletionChoice } from '../models/CompletionChoice';\nimport { CompletionMessage } from '../models/CompletionMessage';\nimport { CountOut } from '../models/CountOut';\nimport { CreateStreamIn } from '../models/CreateStreamIn';\nimport { CreateTokenIn } from '../models/CreateTokenIn';\nimport { CustomColorPalette } from '../models/CustomColorPalette';\nimport { CustomStringsOverride } from '../models/CustomStringsOverride';\nimport { CustomThemeOverride } from '../models/CustomThemeOverride';\nimport { DashboardAccessOut } from '../models/DashboardAccessOut';\nimport { Duration } from '../models/Duration';\nimport { EndpointCreatedEvent } from '../models/EndpointCreatedEvent';\nimport { EndpointCreatedEventData } from '../models/EndpointCreatedEventData';\nimport { EndpointDeletedEvent } from '../models/EndpointDeletedEvent';\nimport { EndpointDeletedEventData } from '../models/EndpointDeletedEventData';\nimport { EndpointDisabledEvent } from '../models/EndpointDisabledEvent';\nimport { EndpointDisabledEventData } from '../models/EndpointDisabledEventData';\nimport { EndpointHeadersIn } from '../models/EndpointHeadersIn';\nimport { EndpointHeadersOut } from '../models/EndpointHeadersOut';\nimport { EndpointHeadersPatchIn } from '../models/EndpointHeadersPatchIn';\nimport { EndpointIn } from '../models/EndpointIn';\nimport { EndpointMessageOut } from '../models/EndpointMessageOut';\nimport { EndpointMtlsConfigIn } from '../models/EndpointMtlsConfigIn';\nimport { EndpointOauthConfigIn } from '../models/EndpointOauthConfigIn';\nimport { EndpointOut } from '../models/EndpointOut';\nimport { EndpointPatch } from '../models/EndpointPatch';\nimport { EndpointSecretOut } from '../models/EndpointSecretOut';\nimport { EndpointSecretRotateIn } from '../models/EndpointSecretRotateIn';\nimport { EndpointStats } from '../models/EndpointStats';\nimport { EndpointTransformationIn } from '../models/EndpointTransformationIn';\nimport { EndpointTransformationOut } from '../models/EndpointTransformationOut';\nimport { EndpointTransformationSimulateIn } from '../models/EndpointTransformationSimulateIn';\nimport { EndpointTransformationSimulateOut } from '../models/EndpointTransformationSimulateOut';\nimport { EndpointUpdate } from '../models/EndpointUpdate';\nimport { EndpointUpdatedEvent } from '../models/EndpointUpdatedEvent';\nimport { EndpointUpdatedEventData } from '../models/EndpointUpdatedEventData';\nimport { EnvironmentIn } from '../models/EnvironmentIn';\nimport { EnvironmentOut } from '../models/EnvironmentOut';\nimport { EnvironmentSettingsOut } from '../models/EnvironmentSettingsOut';\nimport { EventExampleIn } from '../models/EventExampleIn';\nimport { EventIn } from '../models/EventIn';\nimport { EventOut } from '../models/EventOut';\nimport { EventStreamOut } from '../models/EventStreamOut';\nimport { EventTypeExampleOut } from '../models/EventTypeExampleOut';\nimport { EventTypeFromOpenApi } from '../models/EventTypeFromOpenApi';\nimport { EventTypeImportOpenApiIn } from '../models/EventTypeImportOpenApiIn';\nimport { EventTypeImportOpenApiOut } from '../models/EventTypeImportOpenApiOut';\nimport { EventTypeImportOpenApiOutData } from '../models/EventTypeImportOpenApiOutData';\nimport { EventTypeIn } from '../models/EventTypeIn';\nimport { EventTypeOut } from '../models/EventTypeOut';\nimport { EventTypePatch } from '../models/EventTypePatch';\nimport { EventTypeSchemaIn } from '../models/EventTypeSchemaIn';\nimport { EventTypeUpdate } from '../models/EventTypeUpdate';\nimport { ExportEventTypeOut } from '../models/ExportEventTypeOut';\nimport { FontSizeConfig } from '../models/FontSizeConfig';\nimport { GenerateIn } from '../models/GenerateIn';\nimport { GenerateOut } from '../models/GenerateOut';\nimport { GoogleCloudStorageConfig } from '../models/GoogleCloudStorageConfig';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { HubspotOauthConfigIn } from '../models/HubspotOauthConfigIn';\nimport { InboundPathParams } from '../models/InboundPathParams';\nimport { IncomingWebhookPayloadOut } from '../models/IncomingWebhookPayloadOut';\nimport { IntegrationIn } from '../models/IntegrationIn';\nimport { IntegrationKeyOut } from '../models/IntegrationKeyOut';\nimport { IntegrationOut } from '../models/IntegrationOut';\nimport { IntegrationUpdate } from '../models/IntegrationUpdate';\nimport { KafkaSecurityProtocolType } from '../models/KafkaSecurityProtocolType';\nimport { ListResponseApplicationOut } from '../models/ListResponseApplicationOut';\nimport { ListResponseApplicationStats } from '../models/ListResponseApplicationStats';\nimport { ListResponseBackgroundTaskOut } from '../models/ListResponseBackgroundTaskOut';\nimport { ListResponseEndpointMessageOut } from '../models/ListResponseEndpointMessageOut';\nimport { ListResponseEndpointOut } from '../models/ListResponseEndpointOut';\nimport { ListResponseEventTypeOut } from '../models/ListResponseEventTypeOut';\nimport { ListResponseIntegrationOut } from '../models/ListResponseIntegrationOut';\nimport { ListResponseMessageAttemptEndpointOut } from '../models/ListResponseMessageAttemptEndpointOut';\nimport { ListResponseMessageAttemptOut } from '../models/ListResponseMessageAttemptOut';\nimport { ListResponseMessageEndpointOut } from '../models/ListResponseMessageEndpointOut';\nimport { ListResponseMessageOut } from '../models/ListResponseMessageOut';\nimport { ListResponseOperationalWebhookEndpointOut } from '../models/ListResponseOperationalWebhookEndpointOut';\nimport { ListResponseSinkOut } from '../models/ListResponseSinkOut';\nimport { ListResponseStreamEventTypeOut } from '../models/ListResponseStreamEventTypeOut';\nimport { ListResponseStreamOut } from '../models/ListResponseStreamOut';\nimport { ListResponseStreamSinkOut } from '../models/ListResponseStreamSinkOut';\nimport { ListResponseTemplateOut } from '../models/ListResponseTemplateOut';\nimport { MessageAttemptEndpointOut } from '../models/MessageAttemptEndpointOut';\nimport { MessageAttemptExhaustedEvent } from '../models/MessageAttemptExhaustedEvent';\nimport { MessageAttemptExhaustedEventData } from '../models/MessageAttemptExhaustedEventData';\nimport { MessageAttemptFailedData } from '../models/MessageAttemptFailedData';\nimport { MessageAttemptFailingEvent } from '../models/MessageAttemptFailingEvent';\nimport { MessageAttemptFailingEventData } from '../models/MessageAttemptFailingEventData';\nimport { MessageAttemptHeadersOut } from '../models/MessageAttemptHeadersOut';\nimport { MessageAttemptOut } from '../models/MessageAttemptOut';\nimport { MessageAttemptRecoveredEvent } from '../models/MessageAttemptRecoveredEvent';\nimport { MessageAttemptRecoveredEventData } from '../models/MessageAttemptRecoveredEventData';\nimport { MessageAttemptTriggerType } from '../models/MessageAttemptTriggerType';\nimport { MessageBroadcastIn } from '../models/MessageBroadcastIn';\nimport { MessageBroadcastOut } from '../models/MessageBroadcastOut';\nimport { MessageEndpointOut } from '../models/MessageEndpointOut';\nimport { MessageEventsOut } from '../models/MessageEventsOut';\nimport { MessageIn } from '../models/MessageIn';\nimport { MessageOut } from '../models/MessageOut';\nimport { MessageRawPayloadOut } from '../models/MessageRawPayloadOut';\nimport { MessageStatus } from '../models/MessageStatus';\nimport { MessageSubscriberAuthTokenOut } from '../models/MessageSubscriberAuthTokenOut';\nimport { OAuthPayloadIn } from '../models/OAuthPayloadIn';\nimport { OAuthPayloadOut } from '../models/OAuthPayloadOut';\nimport { Oauth2AuthMethodIn } from '../models/Oauth2AuthMethodIn';\nimport { Oauth2GrantTypeIn } from '../models/Oauth2GrantTypeIn';\nimport { OauthJwsSigningAlgorithm } from '../models/OauthJwsSigningAlgorithm';\nimport { OneTimeTokenIn } from '../models/OneTimeTokenIn';\nimport { OneTimeTokenOut } from '../models/OneTimeTokenOut';\nimport { OperationalWebhookEndpointIn } from '../models/OperationalWebhookEndpointIn';\nimport { OperationalWebhookEndpointOut } from '../models/OperationalWebhookEndpointOut';\nimport { OperationalWebhookEndpointSecretIn } from '../models/OperationalWebhookEndpointSecretIn';\nimport { OperationalWebhookEndpointSecretOut } from '../models/OperationalWebhookEndpointSecretOut';\nimport { OperationalWebhookEndpointUpdate } from '../models/OperationalWebhookEndpointUpdate';\nimport { Ordering } from '../models/Ordering';\nimport { RecoverIn } from '../models/RecoverIn';\nimport { RecoverOut } from '../models/RecoverOut';\nimport { RedshiftConfig } from '../models/RedshiftConfig';\nimport { ReplayIn } from '../models/ReplayIn';\nimport { ReplayOut } from '../models/ReplayOut';\nimport { RetryScheduleInOut } from '../models/RetryScheduleInOut';\nimport { RotatePollerTokenIn } from '../models/RotatePollerTokenIn';\nimport { RotatedUrlOut } from '../models/RotatedUrlOut';\nimport { S3Config } from '../models/S3Config';\nimport { SinkHttpConfig } from '../models/SinkHttpConfig';\nimport { SinkIn } from '../models/SinkIn';\nimport { SinkInOneOf } from '../models/SinkInOneOf';\nimport { SinkInOneOf1 } from '../models/SinkInOneOf1';\nimport { SinkInOneOf2 } from '../models/SinkInOneOf2';\nimport { SinkInOneOf3 } from '../models/SinkInOneOf3';\nimport { SinkInOneOf4 } from '../models/SinkInOneOf4';\nimport { SinkOtelV1Config } from '../models/SinkOtelV1Config';\nimport { SinkOut } from '../models/SinkOut';\nimport { SinkPayloadFormat } from '../models/SinkPayloadFormat';\nimport { SinkStatus } from '../models/SinkStatus';\nimport { SinkStatusIn } from '../models/SinkStatusIn';\nimport { SinkTransformIn } from '../models/SinkTransformIn';\nimport { SinkTransformationOut } from '../models/SinkTransformationOut';\nimport { SnowflakeConfig } from '../models/SnowflakeConfig';\nimport { StatisticsPeriod } from '../models/StatisticsPeriod';\nimport { StatusCodeClass } from '../models/StatusCodeClass';\nimport { StreamEventTypeIn } from '../models/StreamEventTypeIn';\nimport { StreamEventTypeOut } from '../models/StreamEventTypeOut';\nimport { StreamEventTypePatch } from '../models/StreamEventTypePatch';\nimport { StreamIn } from '../models/StreamIn';\nimport { StreamOut } from '../models/StreamOut';\nimport { StreamPatch } from '../models/StreamPatch';\nimport { StreamSinkIn } from '../models/StreamSinkIn';\nimport { StreamSinkInOneOf } from '../models/StreamSinkInOneOf';\nimport { StreamSinkInOneOf1 } from '../models/StreamSinkInOneOf1';\nimport { StreamSinkInOneOf2 } from '../models/StreamSinkInOneOf2';\nimport { StreamSinkInOneOf3 } from '../models/StreamSinkInOneOf3';\nimport { StreamSinkInOneOf4 } from '../models/StreamSinkInOneOf4';\nimport { StreamSinkInOneOf5 } from '../models/StreamSinkInOneOf5';\nimport { StreamSinkInOneOf6 } from '../models/StreamSinkInOneOf6';\nimport { StreamSinkInOneOf7 } from '../models/StreamSinkInOneOf7';\nimport { StreamSinkOut } from '../models/StreamSinkOut';\nimport { StreamSinkPatch } from '../models/StreamSinkPatch';\nimport { TemplateIn } from '../models/TemplateIn';\nimport { TemplateOut } from '../models/TemplateOut';\nimport { TemplatePatch } from '../models/TemplatePatch';\nimport { TemplateUpdate } from '../models/TemplateUpdate';\nimport { TransformationHttpMethod } from '../models/TransformationHttpMethod';\nimport { TransformationSimulateIn } from '../models/TransformationSimulateIn';\nimport { TransformationSimulateOut } from '../models/TransformationSimulateOut';\nimport { TransformationTemplateKind } from '../models/TransformationTemplateKind';\nimport { ValidationError } from '../models/ValidationError';\n\nimport { ApplicationApiRequestFactory, ApplicationApiResponseProcessor} from \"../apis/ApplicationApi\";\nexport class ObservableApplicationApi {\n    private requestFactory: ApplicationApiRequestFactory;\n    private responseProcessor: ApplicationApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: ApplicationApiRequestFactory,\n        responseProcessor?: ApplicationApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new ApplicationApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new ApplicationApiResponseProcessor();\n    }\n\n    /**\n     * Get basic statistics for all applications.\n     * Get App Usage Stats\n     * @param since Filter the range to data after this date.\n     * @param until Filter the range to data before this date.\n     * @param [limit] Limit the number of returned items.\n     * @param [iterator] The iterator to use (depends on the chosen ordering).\n     */\n    public getAppUsageStatsApiV1AppStatsUsageGetWithHttpInfo(since: Date, until: Date, limit?: number, iterator?: string, _options?: Configuration): Observable<HttpInfo<ListResponseApplicationStats>> {\n        const requestContextPromise = this.requestFactory.getAppUsageStatsApiV1AppStatsUsageGet(since, until, limit, iterator, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getAppUsageStatsApiV1AppStatsUsageGetWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get basic statistics for all applications.\n     * Get App Usage Stats\n     * @param since Filter the range to data after this date.\n     * @param until Filter the range to data before this date.\n     * @param [limit] Limit the number of returned items.\n     * @param [iterator] The iterator to use (depends on the chosen ordering).\n     */\n    public getAppUsageStatsApiV1AppStatsUsageGet(since: Date, until: Date, limit?: number, iterator?: string, _options?: Configuration): Observable<ListResponseApplicationStats> {\n        return this.getAppUsageStatsApiV1AppStatsUsageGetWithHttpInfo(since, until, limit, iterator, _options).pipe(map((apiResponse: HttpInfo<ListResponseApplicationStats>) => apiResponse.data));\n    }\n\n    /**\n     * Create a new application.\n     * Create Application\n     * @param applicationIn\n     * @param [getIfExists] Get an existing application, or create a new one if doesn\\&#39;t exist. It\\&#39;s two separate functions in the libs.\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1ApplicationCreateWithHttpInfo(applicationIn: ApplicationIn, getIfExists?: boolean, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<ApplicationOut>> {\n        const requestContextPromise = this.requestFactory.v1ApplicationCreate(applicationIn, getIfExists, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1ApplicationCreateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Create a new application.\n     * Create Application\n     * @param applicationIn\n     * @param [getIfExists] Get an existing application, or create a new one if doesn\\&#39;t exist. It\\&#39;s two separate functions in the libs.\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1ApplicationCreate(applicationIn: ApplicationIn, getIfExists?: boolean, idempotencyKey?: string, _options?: Configuration): Observable<ApplicationOut> {\n        return this.v1ApplicationCreateWithHttpInfo(applicationIn, getIfExists, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<ApplicationOut>) => apiResponse.data));\n    }\n\n    /**\n     * Delete an application.\n     * Delete Application\n     * @param appId The app\\&#39;s ID or UID\n     */\n    public v1ApplicationDeleteWithHttpInfo(appId: string, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1ApplicationDelete(appId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1ApplicationDeleteWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Delete an application.\n     * Delete Application\n     * @param appId The app\\&#39;s ID or UID\n     */\n    public v1ApplicationDelete(appId: string, _options?: Configuration): Observable<void> {\n        return this.v1ApplicationDeleteWithHttpInfo(appId, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Get an application.\n     * Get Application\n     * @param appId The app\\&#39;s ID or UID\n     */\n    public v1ApplicationGetWithHttpInfo(appId: string, _options?: Configuration): Observable<HttpInfo<ApplicationOut>> {\n        const requestContextPromise = this.requestFactory.v1ApplicationGet(appId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1ApplicationGetWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get an application.\n     * Get Application\n     * @param appId The app\\&#39;s ID or UID\n     */\n    public v1ApplicationGet(appId: string, _options?: Configuration): Observable<ApplicationOut> {\n        return this.v1ApplicationGetWithHttpInfo(appId, _options).pipe(map((apiResponse: HttpInfo<ApplicationOut>) => apiResponse.data));\n    }\n\n    /**\n     * Get basic statistics for the application.\n     * Get App Stats\n     * @param since Filter the range to data starting from this date.\n     * @param until Filter the range to data ending by this date.\n     * @param appId The app\\&#39;s ID or UID\n     */\n    public v1ApplicationGetStatsWithHttpInfo(since: Date, until: Date, appId: string, _options?: Configuration): Observable<HttpInfo<ApplicationStats>> {\n        const requestContextPromise = this.requestFactory.v1ApplicationGetStats(since, until, appId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1ApplicationGetStatsWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get basic statistics for the application.\n     * Get App Stats\n     * @param since Filter the range to data starting from this date.\n     * @param until Filter the range to data ending by this date.\n     * @param appId The app\\&#39;s ID or UID\n     */\n    public v1ApplicationGetStats(since: Date, until: Date, appId: string, _options?: Configuration): Observable<ApplicationStats> {\n        return this.v1ApplicationGetStatsWithHttpInfo(since, until, appId, _options).pipe(map((apiResponse: HttpInfo<ApplicationStats>) => apiResponse.data));\n    }\n\n    /**\n     * List of all the organization\\'s applications.\n     * List Applications\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     */\n    public v1ApplicationListWithHttpInfo(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<HttpInfo<ListResponseApplicationOut>> {\n        const requestContextPromise = this.requestFactory.v1ApplicationList(limit, iterator, order, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1ApplicationListWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * List of all the organization\\'s applications.\n     * List Applications\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     */\n    public v1ApplicationList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseApplicationOut> {\n        return this.v1ApplicationListWithHttpInfo(limit, iterator, order, _options).pipe(map((apiResponse: HttpInfo<ListResponseApplicationOut>) => apiResponse.data));\n    }\n\n    /**\n     * Partially update an application.\n     * Patch Application\n     * @param appId The app\\&#39;s ID or UID\n     * @param applicationPatch\n     */\n    public v1ApplicationPatchWithHttpInfo(appId: string, applicationPatch: ApplicationPatch, _options?: Configuration): Observable<HttpInfo<ApplicationOut>> {\n        const requestContextPromise = this.requestFactory.v1ApplicationPatch(appId, applicationPatch, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1ApplicationPatchWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Partially update an application.\n     * Patch Application\n     * @param appId The app\\&#39;s ID or UID\n     * @param applicationPatch\n     */\n    public v1ApplicationPatch(appId: string, applicationPatch: ApplicationPatch, _options?: Configuration): Observable<ApplicationOut> {\n        return this.v1ApplicationPatchWithHttpInfo(appId, applicationPatch, _options).pipe(map((apiResponse: HttpInfo<ApplicationOut>) => apiResponse.data));\n    }\n\n    /**\n     * Update an application.\n     * Update Application\n     * @param appId The app\\&#39;s ID or UID\n     * @param applicationIn\n     */\n    public v1ApplicationUpdateWithHttpInfo(appId: string, applicationIn: ApplicationIn, _options?: Configuration): Observable<HttpInfo<ApplicationOut>> {\n        const requestContextPromise = this.requestFactory.v1ApplicationUpdate(appId, applicationIn, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1ApplicationUpdateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Update an application.\n     * Update Application\n     * @param appId The app\\&#39;s ID or UID\n     * @param applicationIn\n     */\n    public v1ApplicationUpdate(appId: string, applicationIn: ApplicationIn, _options?: Configuration): Observable<ApplicationOut> {\n        return this.v1ApplicationUpdateWithHttpInfo(appId, applicationIn, _options).pipe(map((apiResponse: HttpInfo<ApplicationOut>) => apiResponse.data));\n    }\n\n}\n\nimport { AuthenticationApiRequestFactory, AuthenticationApiResponseProcessor} from \"../apis/AuthenticationApi\";\nexport class ObservableAuthenticationApi {\n    private requestFactory: AuthenticationApiRequestFactory;\n    private responseProcessor: AuthenticationApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: AuthenticationApiRequestFactory,\n        responseProcessor?: AuthenticationApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new AuthenticationApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new AuthenticationApiResponseProcessor();\n    }\n\n    /**\n     * Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.\n     * Get Consumer App Portal Access\n     * @param appId The app\\&#39;s ID or UID\n     * @param appPortalAccessIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1AuthenticationAppPortalAccessWithHttpInfo(appId: string, appPortalAccessIn: AppPortalAccessIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<AppPortalAccessOut>> {\n        const requestContextPromise = this.requestFactory.v1AuthenticationAppPortalAccess(appId, appPortalAccessIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1AuthenticationAppPortalAccessWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.\n     * Get Consumer App Portal Access\n     * @param appId The app\\&#39;s ID or UID\n     * @param appPortalAccessIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1AuthenticationAppPortalAccess(appId: string, appPortalAccessIn: AppPortalAccessIn, idempotencyKey?: string, _options?: Configuration): Observable<AppPortalAccessOut> {\n        return this.v1AuthenticationAppPortalAccessWithHttpInfo(appId, appPortalAccessIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<AppPortalAccessOut>) => apiResponse.data));\n    }\n\n    /**\n     * Create a new access token that only allows creating messages inside this application.\n     * Create Cmg Token\n     * @param appId The app\\&#39;s ID or UID\n     * @param createTokenIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1AuthenticationCreateMessageTokenWithHttpInfo(appId: string, createTokenIn: CreateTokenIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<AuthTokenOut>> {\n        const requestContextPromise = this.requestFactory.v1AuthenticationCreateMessageToken(appId, createTokenIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1AuthenticationCreateMessageTokenWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Create a new access token that only allows creating messages inside this application.\n     * Create Cmg Token\n     * @param appId The app\\&#39;s ID or UID\n     * @param createTokenIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1AuthenticationCreateMessageToken(appId: string, createTokenIn: CreateTokenIn, idempotencyKey?: string, _options?: Configuration): Observable<AuthTokenOut> {\n        return this.v1AuthenticationCreateMessageTokenWithHttpInfo(appId, createTokenIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<AuthTokenOut>) => apiResponse.data));\n    }\n\n    /**\n     * DEPRECATED: Please use `app-portal-access` instead.  Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.\n     * Dashboard Access\n     * @param appId The app\\&#39;s ID or UID\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1AuthenticationDashboardAccessWithHttpInfo(appId: string, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<DashboardAccessOut>> {\n        const requestContextPromise = this.requestFactory.v1AuthenticationDashboardAccess(appId, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1AuthenticationDashboardAccessWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * DEPRECATED: Please use `app-portal-access` instead.  Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.\n     * Dashboard Access\n     * @param appId The app\\&#39;s ID or UID\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1AuthenticationDashboardAccess(appId: string, idempotencyKey?: string, _options?: Configuration): Observable<DashboardAccessOut> {\n        return this.v1AuthenticationDashboardAccessWithHttpInfo(appId, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<DashboardAccessOut>) => apiResponse.data));\n    }\n\n    /**\n     * This is a one time token.\n     * Exchange One Time Token\n     * @param oneTimeTokenIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1AuthenticationExchangeOneTimeTokenWithHttpInfo(oneTimeTokenIn: OneTimeTokenIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<OneTimeTokenOut>> {\n        const requestContextPromise = this.requestFactory.v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1AuthenticationExchangeOneTimeTokenWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * This is a one time token.\n     * Exchange One Time Token\n     * @param oneTimeTokenIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn: OneTimeTokenIn, idempotencyKey?: string, _options?: Configuration): Observable<OneTimeTokenOut> {\n        return this.v1AuthenticationExchangeOneTimeTokenWithHttpInfo(oneTimeTokenIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<OneTimeTokenOut>) => apiResponse.data));\n    }\n\n    /**\n     * Expire all of the tokens associated with a specific application.\n     * Expire All\n     * @param appId The app\\&#39;s ID or UID\n     * @param applicationTokenExpireIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1AuthenticationExpireAllWithHttpInfo(appId: string, applicationTokenExpireIn: ApplicationTokenExpireIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1AuthenticationExpireAll(appId, applicationTokenExpireIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1AuthenticationExpireAllWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Expire all of the tokens associated with a specific application.\n     * Expire All\n     * @param appId The app\\&#39;s ID or UID\n     * @param applicationTokenExpireIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1AuthenticationExpireAll(appId: string, applicationTokenExpireIn: ApplicationTokenExpireIn, idempotencyKey?: string, _options?: Configuration): Observable<void> {\n        return this.v1AuthenticationExpireAllWithHttpInfo(appId, applicationTokenExpireIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Get the current auth token for the poller.\n     * Get Poller Token\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public v1AuthenticationGetPollerTokenWithHttpInfo(appId: string, endpointId: string, _options?: Configuration): Observable<HttpInfo<AuthTokenOut>> {\n        const requestContextPromise = this.requestFactory.v1AuthenticationGetPollerToken(appId, endpointId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1AuthenticationGetPollerTokenWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get the current auth token for the poller.\n     * Get Poller Token\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public v1AuthenticationGetPollerToken(appId: string, endpointId: string, _options?: Configuration): Observable<AuthTokenOut> {\n        return this.v1AuthenticationGetPollerTokenWithHttpInfo(appId, endpointId, _options).pipe(map((apiResponse: HttpInfo<AuthTokenOut>) => apiResponse.data));\n    }\n\n    /**\n     * Logout an app token.  Trying to log out other tokens will fail.\n     * Logout\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1AuthenticationLogoutWithHttpInfo(idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1AuthenticationLogout(idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1AuthenticationLogoutWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Logout an app token.  Trying to log out other tokens will fail.\n     * Logout\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1AuthenticationLogout(idempotencyKey?: string, _options?: Configuration): Observable<void> {\n        return this.v1AuthenticationLogoutWithHttpInfo(idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Create a new auth token that can for the poller API.\n     * Rotate Poller Token\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param rotatePollerTokenIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1AuthenticationRotatePollerTokenWithHttpInfo(appId: string, endpointId: string, rotatePollerTokenIn: RotatePollerTokenIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<AuthTokenOut>> {\n        const requestContextPromise = this.requestFactory.v1AuthenticationRotatePollerToken(appId, endpointId, rotatePollerTokenIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1AuthenticationRotatePollerTokenWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Create a new auth token that can for the poller API.\n     * Rotate Poller Token\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param rotatePollerTokenIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1AuthenticationRotatePollerToken(appId: string, endpointId: string, rotatePollerTokenIn: RotatePollerTokenIn, idempotencyKey?: string, _options?: Configuration): Observable<AuthTokenOut> {\n        return this.v1AuthenticationRotatePollerTokenWithHttpInfo(appId, endpointId, rotatePollerTokenIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<AuthTokenOut>) => apiResponse.data));\n    }\n\n}\n\nimport { BackgroundTasksApiRequestFactory, BackgroundTasksApiResponseProcessor} from \"../apis/BackgroundTasksApi\";\nexport class ObservableBackgroundTasksApi {\n    private requestFactory: BackgroundTasksApiRequestFactory;\n    private responseProcessor: BackgroundTasksApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: BackgroundTasksApiRequestFactory,\n        responseProcessor?: BackgroundTasksApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new BackgroundTasksApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new BackgroundTasksApiResponseProcessor();\n    }\n\n    /**\n     * Get a background task by ID.\n     * Get Background Task\n     * @param taskId\n     */\n    public getBackgroundTaskWithHttpInfo(taskId: string, _options?: Configuration): Observable<HttpInfo<BackgroundTaskOut>> {\n        const requestContextPromise = this.requestFactory.getBackgroundTask(taskId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getBackgroundTaskWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get a background task by ID.\n     * Get Background Task\n     * @param taskId\n     */\n    public getBackgroundTask(taskId: string, _options?: Configuration): Observable<BackgroundTaskOut> {\n        return this.getBackgroundTaskWithHttpInfo(taskId, _options).pipe(map((apiResponse: HttpInfo<BackgroundTaskOut>) => apiResponse.data));\n    }\n\n    /**\n     * List background tasks executed in the past 90 days.\n     * List Background Tasks\n     * @param [status] Filter the response based on the status.\n     * @param [task] Filter the response based on the type.\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     */\n    public listBackgroundTasksWithHttpInfo(status?: BackgroundTaskStatus, task?: BackgroundTaskType, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<HttpInfo<ListResponseBackgroundTaskOut>> {\n        const requestContextPromise = this.requestFactory.listBackgroundTasks(status, task, limit, iterator, order, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.listBackgroundTasksWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * List background tasks executed in the past 90 days.\n     * List Background Tasks\n     * @param [status] Filter the response based on the status.\n     * @param [task] Filter the response based on the type.\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     */\n    public listBackgroundTasks(status?: BackgroundTaskStatus, task?: BackgroundTaskType, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseBackgroundTaskOut> {\n        return this.listBackgroundTasksWithHttpInfo(status, task, limit, iterator, order, _options).pipe(map((apiResponse: HttpInfo<ListResponseBackgroundTaskOut>) => apiResponse.data));\n    }\n\n}\n\nimport { BroadcastApiRequestFactory, BroadcastApiResponseProcessor} from \"../apis/BroadcastApi\";\nexport class ObservableBroadcastApi {\n    private requestFactory: BroadcastApiRequestFactory;\n    private responseProcessor: BroadcastApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: BroadcastApiRequestFactory,\n        responseProcessor?: BroadcastApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new BroadcastApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new BroadcastApiResponseProcessor();\n    }\n\n    /**\n     * Creates a background task to send the same message to each application in your organization.\n     * Create Broadcast Message\n     * @param messageBroadcastIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public createBroadcastMessageWithHttpInfo(messageBroadcastIn: MessageBroadcastIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<MessageBroadcastOut>> {\n        const requestContextPromise = this.requestFactory.createBroadcastMessage(messageBroadcastIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.createBroadcastMessageWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Creates a background task to send the same message to each application in your organization.\n     * Create Broadcast Message\n     * @param messageBroadcastIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public createBroadcastMessage(messageBroadcastIn: MessageBroadcastIn, idempotencyKey?: string, _options?: Configuration): Observable<MessageBroadcastOut> {\n        return this.createBroadcastMessageWithHttpInfo(messageBroadcastIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<MessageBroadcastOut>) => apiResponse.data));\n    }\n\n}\n\nimport { EndpointApiRequestFactory, EndpointApiResponseProcessor} from \"../apis/EndpointApi\";\nexport class ObservableEndpointApi {\n    private requestFactory: EndpointApiRequestFactory;\n    private responseProcessor: EndpointApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: EndpointApiRequestFactory,\n        responseProcessor?: EndpointApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new EndpointApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new EndpointApiResponseProcessor();\n    }\n\n    /**\n     * Create a new endpoint for the application.  When `secret` is `null` the secret is automatically generated (recommended).\n     * Create Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EndpointCreateWithHttpInfo(appId: string, endpointIn: EndpointIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<EndpointOut>> {\n        const requestContextPromise = this.requestFactory.v1EndpointCreate(appId, endpointIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointCreateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Create a new endpoint for the application.  When `secret` is `null` the secret is automatically generated (recommended).\n     * Create Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EndpointCreate(appId: string, endpointIn: EndpointIn, idempotencyKey?: string, _options?: Configuration): Observable<EndpointOut> {\n        return this.v1EndpointCreateWithHttpInfo(appId, endpointIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<EndpointOut>) => apiResponse.data));\n    }\n\n    /**\n     * Delete an endpoint.\n     * Delete Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public v1EndpointDeleteWithHttpInfo(appId: string, endpointId: string, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1EndpointDelete(appId, endpointId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointDeleteWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Delete an endpoint.\n     * Delete Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public v1EndpointDelete(appId: string, endpointId: string, _options?: Configuration): Observable<void> {\n        return this.v1EndpointDeleteWithHttpInfo(appId, endpointId, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Delete endpoint mTLS configuration.\n     * Delete Endpoint Mtls Config\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public v1EndpointDeleteMtlsConfigWithHttpInfo(appId: string, endpointId: string, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1EndpointDeleteMtlsConfig(appId, endpointId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointDeleteMtlsConfigWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Delete endpoint mTLS configuration.\n     * Delete Endpoint Mtls Config\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public v1EndpointDeleteMtlsConfig(appId: string, endpointId: string, _options?: Configuration): Observable<void> {\n        return this.v1EndpointDeleteMtlsConfigWithHttpInfo(appId, endpointId, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Delete endpoint OAuth configuration.\n     * Delete Endpoint Oauth Config\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public v1EndpointDeleteOauthConfigWithHttpInfo(appId: string, endpointId: string, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1EndpointDeleteOauthConfig(appId, endpointId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointDeleteOauthConfigWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Delete endpoint OAuth configuration.\n     * Delete Endpoint Oauth Config\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public v1EndpointDeleteOauthConfig(appId: string, endpointId: string, _options?: Configuration): Observable<void> {\n        return this.v1EndpointDeleteOauthConfigWithHttpInfo(appId, endpointId, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Get an endpoint.\n     * Get Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public v1EndpointGetWithHttpInfo(appId: string, endpointId: string, _options?: Configuration): Observable<HttpInfo<EndpointOut>> {\n        const requestContextPromise = this.requestFactory.v1EndpointGet(appId, endpointId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointGetWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get an endpoint.\n     * Get Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public v1EndpointGet(appId: string, endpointId: string, _options?: Configuration): Observable<EndpointOut> {\n        return this.v1EndpointGetWithHttpInfo(appId, endpointId, _options).pipe(map((apiResponse: HttpInfo<EndpointOut>) => apiResponse.data));\n    }\n\n    /**\n     * Get the additional headers to be sent with the webhook.\n     * Get Endpoint Headers\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public v1EndpointGetHeadersWithHttpInfo(appId: string, endpointId: string, _options?: Configuration): Observable<HttpInfo<EndpointHeadersOut>> {\n        const requestContextPromise = this.requestFactory.v1EndpointGetHeaders(appId, endpointId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointGetHeadersWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get the additional headers to be sent with the webhook.\n     * Get Endpoint Headers\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public v1EndpointGetHeaders(appId: string, endpointId: string, _options?: Configuration): Observable<EndpointHeadersOut> {\n        return this.v1EndpointGetHeadersWithHttpInfo(appId, endpointId, _options).pipe(map((apiResponse: HttpInfo<EndpointHeadersOut>) => apiResponse.data));\n    }\n\n    /**\n     * Get the endpoint\\'s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).\n     * Get Endpoint Secret\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public v1EndpointGetSecretWithHttpInfo(appId: string, endpointId: string, _options?: Configuration): Observable<HttpInfo<EndpointSecretOut>> {\n        const requestContextPromise = this.requestFactory.v1EndpointGetSecret(appId, endpointId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointGetSecretWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get the endpoint\\'s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).\n     * Get Endpoint Secret\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public v1EndpointGetSecret(appId: string, endpointId: string, _options?: Configuration): Observable<EndpointSecretOut> {\n        return this.v1EndpointGetSecretWithHttpInfo(appId, endpointId, _options).pipe(map((apiResponse: HttpInfo<EndpointSecretOut>) => apiResponse.data));\n    }\n\n    /**\n     * Get basic statistics for the endpoint.\n     * Endpoint Stats\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param [since] Filter the range to data starting from this date.\n     * @param [until] Filter the range to data ending by this date.\n     */\n    public v1EndpointGetStatsWithHttpInfo(appId: string, endpointId: string, since?: Date, until?: Date, _options?: Configuration): Observable<HttpInfo<EndpointStats>> {\n        const requestContextPromise = this.requestFactory.v1EndpointGetStats(appId, endpointId, since, until, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointGetStatsWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get basic statistics for the endpoint.\n     * Endpoint Stats\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param [since] Filter the range to data starting from this date.\n     * @param [until] Filter the range to data ending by this date.\n     */\n    public v1EndpointGetStats(appId: string, endpointId: string, since?: Date, until?: Date, _options?: Configuration): Observable<EndpointStats> {\n        return this.v1EndpointGetStatsWithHttpInfo(appId, endpointId, since, until, _options).pipe(map((apiResponse: HttpInfo<EndpointStats>) => apiResponse.data));\n    }\n\n    /**\n     * List the application\\'s endpoints.\n     * List Endpoints\n     * @param appId The app\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     */\n    public v1EndpointListWithHttpInfo(appId: string, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<HttpInfo<ListResponseEndpointOut>> {\n        const requestContextPromise = this.requestFactory.v1EndpointList(appId, limit, iterator, order, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointListWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * List the application\\'s endpoints.\n     * List Endpoints\n     * @param appId The app\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     */\n    public v1EndpointList(appId: string, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseEndpointOut> {\n        return this.v1EndpointListWithHttpInfo(appId, limit, iterator, order, _options).pipe(map((apiResponse: HttpInfo<ListResponseEndpointOut>) => apiResponse.data));\n    }\n\n    /**\n     * Partially update an endpoint.\n     * Patch Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointPatch\n     */\n    public v1EndpointPatchWithHttpInfo(appId: string, endpointId: string, endpointPatch: EndpointPatch, _options?: Configuration): Observable<HttpInfo<EndpointOut>> {\n        const requestContextPromise = this.requestFactory.v1EndpointPatch(appId, endpointId, endpointPatch, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointPatchWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Partially update an endpoint.\n     * Patch Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointPatch\n     */\n    public v1EndpointPatch(appId: string, endpointId: string, endpointPatch: EndpointPatch, _options?: Configuration): Observable<EndpointOut> {\n        return this.v1EndpointPatchWithHttpInfo(appId, endpointId, endpointPatch, _options).pipe(map((apiResponse: HttpInfo<EndpointOut>) => apiResponse.data));\n    }\n\n    /**\n     * Partially set the additional headers to be sent with the webhook.\n     * Patch Endpoint Headers\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointHeadersPatchIn\n     */\n    public v1EndpointPatchHeadersWithHttpInfo(appId: string, endpointId: string, endpointHeadersPatchIn: EndpointHeadersPatchIn, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1EndpointPatchHeaders(appId, endpointId, endpointHeadersPatchIn, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointPatchHeadersWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Partially set the additional headers to be sent with the webhook.\n     * Patch Endpoint Headers\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointHeadersPatchIn\n     */\n    public v1EndpointPatchHeaders(appId: string, endpointId: string, endpointHeadersPatchIn: EndpointHeadersPatchIn, _options?: Configuration): Observable<void> {\n        return this.v1EndpointPatchHeadersWithHttpInfo(appId, endpointId, endpointHeadersPatchIn, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Resend all failed messages since a given time.  Messages that were sent successfully, even if failed initially, are not resent.\n     * Recover Failed Webhooks\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param recoverIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EndpointRecoverWithHttpInfo(appId: string, endpointId: string, recoverIn: RecoverIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<RecoverOut>> {\n        const requestContextPromise = this.requestFactory.v1EndpointRecover(appId, endpointId, recoverIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointRecoverWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Resend all failed messages since a given time.  Messages that were sent successfully, even if failed initially, are not resent.\n     * Recover Failed Webhooks\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param recoverIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EndpointRecover(appId: string, endpointId: string, recoverIn: RecoverIn, idempotencyKey?: string, _options?: Configuration): Observable<RecoverOut> {\n        return this.v1EndpointRecoverWithHttpInfo(appId, endpointId, recoverIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<RecoverOut>) => apiResponse.data));\n    }\n\n    /**\n     * Replays messages to the endpoint.  Only messages that were created after `since` will be sent. Messages that were previously sent to the endpoint are not resent.\n     * Replay Missing Webhooks\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param replayIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EndpointReplayMissingWithHttpInfo(appId: string, endpointId: string, replayIn: ReplayIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<ReplayOut>> {\n        const requestContextPromise = this.requestFactory.v1EndpointReplayMissing(appId, endpointId, replayIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointReplayMissingWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Replays messages to the endpoint.  Only messages that were created after `since` will be sent. Messages that were previously sent to the endpoint are not resent.\n     * Replay Missing Webhooks\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param replayIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EndpointReplayMissing(appId: string, endpointId: string, replayIn: ReplayIn, idempotencyKey?: string, _options?: Configuration): Observable<ReplayOut> {\n        return this.v1EndpointReplayMissingWithHttpInfo(appId, endpointId, replayIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<ReplayOut>) => apiResponse.data));\n    }\n\n    /**\n     * Rotates the endpoint\\'s signing secret.  The previous secret will remain valid for the next 24 hours.\n     * Rotate Endpoint Secret\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointSecretRotateIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EndpointRotateSecretWithHttpInfo(appId: string, endpointId: string, endpointSecretRotateIn: EndpointSecretRotateIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1EndpointRotateSecret(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointRotateSecretWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Rotates the endpoint\\'s signing secret.  The previous secret will remain valid for the next 24 hours.\n     * Rotate Endpoint Secret\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointSecretRotateIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EndpointRotateSecret(appId: string, endpointId: string, endpointSecretRotateIn: EndpointSecretRotateIn, idempotencyKey?: string, _options?: Configuration): Observable<void> {\n        return this.v1EndpointRotateSecretWithHttpInfo(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Send an example message for an event.\n     * Send Event Type Example Message\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param eventExampleIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EndpointSendExampleWithHttpInfo(appId: string, endpointId: string, eventExampleIn: EventExampleIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<MessageOut>> {\n        const requestContextPromise = this.requestFactory.v1EndpointSendExample(appId, endpointId, eventExampleIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointSendExampleWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Send an example message for an event.\n     * Send Event Type Example Message\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param eventExampleIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EndpointSendExample(appId: string, endpointId: string, eventExampleIn: EventExampleIn, idempotencyKey?: string, _options?: Configuration): Observable<MessageOut> {\n        return this.v1EndpointSendExampleWithHttpInfo(appId, endpointId, eventExampleIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<MessageOut>) => apiResponse.data));\n    }\n\n    /**\n     * Get the transformation code associated with this endpoint.\n     * Get Endpoint Transformation\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public v1EndpointTransformationGetWithHttpInfo(appId: string, endpointId: string, _options?: Configuration): Observable<HttpInfo<EndpointTransformationOut>> {\n        const requestContextPromise = this.requestFactory.v1EndpointTransformationGet(appId, endpointId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointTransformationGetWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get the transformation code associated with this endpoint.\n     * Get Endpoint Transformation\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public v1EndpointTransformationGet(appId: string, endpointId: string, _options?: Configuration): Observable<EndpointTransformationOut> {\n        return this.v1EndpointTransformationGetWithHttpInfo(appId, endpointId, _options).pipe(map((apiResponse: HttpInfo<EndpointTransformationOut>) => apiResponse.data));\n    }\n\n    /**\n     * Set or unset the transformation code associated with this endpoint.\n     * Set Endpoint Transformation\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointTransformationIn\n     */\n    public v1EndpointTransformationPartialUpdateWithHttpInfo(appId: string, endpointId: string, endpointTransformationIn: EndpointTransformationIn, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1EndpointTransformationPartialUpdate(appId, endpointId, endpointTransformationIn, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointTransformationPartialUpdateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Set or unset the transformation code associated with this endpoint.\n     * Set Endpoint Transformation\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointTransformationIn\n     */\n    public v1EndpointTransformationPartialUpdate(appId: string, endpointId: string, endpointTransformationIn: EndpointTransformationIn, _options?: Configuration): Observable<void> {\n        return this.v1EndpointTransformationPartialUpdateWithHttpInfo(appId, endpointId, endpointTransformationIn, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Simulate running the transformation on the payload and code.\n     * Simulate\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointTransformationSimulateIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EndpointTransformationSimulateWithHttpInfo(appId: string, endpointId: string, endpointTransformationSimulateIn: EndpointTransformationSimulateIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<EndpointTransformationSimulateOut>> {\n        const requestContextPromise = this.requestFactory.v1EndpointTransformationSimulate(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointTransformationSimulateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Simulate running the transformation on the payload and code.\n     * Simulate\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointTransformationSimulateIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EndpointTransformationSimulate(appId: string, endpointId: string, endpointTransformationSimulateIn: EndpointTransformationSimulateIn, idempotencyKey?: string, _options?: Configuration): Observable<EndpointTransformationSimulateOut> {\n        return this.v1EndpointTransformationSimulateWithHttpInfo(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<EndpointTransformationSimulateOut>) => apiResponse.data));\n    }\n\n    /**\n     * Update an endpoint.\n     * Update Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointUpdate\n     */\n    public v1EndpointUpdateWithHttpInfo(appId: string, endpointId: string, endpointUpdate: EndpointUpdate, _options?: Configuration): Observable<HttpInfo<EndpointOut>> {\n        const requestContextPromise = this.requestFactory.v1EndpointUpdate(appId, endpointId, endpointUpdate, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointUpdateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Update an endpoint.\n     * Update Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointUpdate\n     */\n    public v1EndpointUpdate(appId: string, endpointId: string, endpointUpdate: EndpointUpdate, _options?: Configuration): Observable<EndpointOut> {\n        return this.v1EndpointUpdateWithHttpInfo(appId, endpointId, endpointUpdate, _options).pipe(map((apiResponse: HttpInfo<EndpointOut>) => apiResponse.data));\n    }\n\n    /**\n     * Set the additional headers to be sent with the webhook.\n     * Update Endpoint Headers\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointHeadersIn\n     */\n    public v1EndpointUpdateHeadersWithHttpInfo(appId: string, endpointId: string, endpointHeadersIn: EndpointHeadersIn, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1EndpointUpdateHeaders(appId, endpointId, endpointHeadersIn, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointUpdateHeadersWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Set the additional headers to be sent with the webhook.\n     * Update Endpoint Headers\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointHeadersIn\n     */\n    public v1EndpointUpdateHeaders(appId: string, endpointId: string, endpointHeadersIn: EndpointHeadersIn, _options?: Configuration): Observable<void> {\n        return this.v1EndpointUpdateHeadersWithHttpInfo(appId, endpointId, endpointHeadersIn, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Create/update endpoint mTLS configuration.\n     * Update Endpoint Mtls Config\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointMtlsConfigIn\n     */\n    public v1EndpointUpdateMtlsConfigWithHttpInfo(appId: string, endpointId: string, endpointMtlsConfigIn: EndpointMtlsConfigIn, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1EndpointUpdateMtlsConfig(appId, endpointId, endpointMtlsConfigIn, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointUpdateMtlsConfigWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Create/update endpoint mTLS configuration.\n     * Update Endpoint Mtls Config\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointMtlsConfigIn\n     */\n    public v1EndpointUpdateMtlsConfig(appId: string, endpointId: string, endpointMtlsConfigIn: EndpointMtlsConfigIn, _options?: Configuration): Observable<void> {\n        return this.v1EndpointUpdateMtlsConfigWithHttpInfo(appId, endpointId, endpointMtlsConfigIn, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Create/update endpoint OAuth configuration.\n     * Update Endpoint Oauth Config\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointOauthConfigIn\n     */\n    public v1EndpointUpdateOauthConfigWithHttpInfo(appId: string, endpointId: string, endpointOauthConfigIn: EndpointOauthConfigIn, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1EndpointUpdateOauthConfig(appId, endpointId, endpointOauthConfigIn, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointUpdateOauthConfigWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Create/update endpoint OAuth configuration.\n     * Update Endpoint Oauth Config\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param endpointOauthConfigIn\n     */\n    public v1EndpointUpdateOauthConfig(appId: string, endpointId: string, endpointOauthConfigIn: EndpointOauthConfigIn, _options?: Configuration): Observable<void> {\n        return this.v1EndpointUpdateOauthConfigWithHttpInfo(appId, endpointId, endpointOauthConfigIn, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Create a new sink for the application.\n     * Create Sink\n     * @param appId The app\\&#39;s ID or UID\n     * @param sinkIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1SinkCreateWithHttpInfo(appId: string, sinkIn: SinkIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<SinkOut>> {\n        const requestContextPromise = this.requestFactory.v1SinkCreate(appId, sinkIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1SinkCreateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Create a new sink for the application.\n     * Create Sink\n     * @param appId The app\\&#39;s ID or UID\n     * @param sinkIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1SinkCreate(appId: string, sinkIn: SinkIn, idempotencyKey?: string, _options?: Configuration): Observable<SinkOut> {\n        return this.v1SinkCreateWithHttpInfo(appId, sinkIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<SinkOut>) => apiResponse.data));\n    }\n\n    /**\n     * Get a sink.\n     * Get Sink\n     * @param appId The app\\&#39;s ID or UID\n     * @param sinkId The ep\\&#39;s ID or UID\n     */\n    public v1SinkGetWithHttpInfo(appId: string, sinkId: string, _options?: Configuration): Observable<HttpInfo<SinkOut>> {\n        const requestContextPromise = this.requestFactory.v1SinkGet(appId, sinkId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1SinkGetWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get a sink.\n     * Get Sink\n     * @param appId The app\\&#39;s ID or UID\n     * @param sinkId The ep\\&#39;s ID or UID\n     */\n    public v1SinkGet(appId: string, sinkId: string, _options?: Configuration): Observable<SinkOut> {\n        return this.v1SinkGetWithHttpInfo(appId, sinkId, _options).pipe(map((apiResponse: HttpInfo<SinkOut>) => apiResponse.data));\n    }\n\n    /**\n     * List the application\\'s sinks.\n     * List Sinks\n     * @param appId The app\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     */\n    public v1SinkListWithHttpInfo(appId: string, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<HttpInfo<ListResponseSinkOut>> {\n        const requestContextPromise = this.requestFactory.v1SinkList(appId, limit, iterator, order, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1SinkListWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * List the application\\'s sinks.\n     * List Sinks\n     * @param appId The app\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     */\n    public v1SinkList(appId: string, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseSinkOut> {\n        return this.v1SinkListWithHttpInfo(appId, limit, iterator, order, _options).pipe(map((apiResponse: HttpInfo<ListResponseSinkOut>) => apiResponse.data));\n    }\n\n}\n\nimport { EnvironmentApiRequestFactory, EnvironmentApiResponseProcessor} from \"../apis/EnvironmentApi\";\nexport class ObservableEnvironmentApi {\n    private requestFactory: EnvironmentApiRequestFactory;\n    private responseProcessor: EnvironmentApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: EnvironmentApiRequestFactory,\n        responseProcessor?: EnvironmentApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new EnvironmentApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new EnvironmentApiResponseProcessor();\n    }\n\n    /**\n     * Download a JSON file containing all org-settings and event types.\n     * Export Environment Configuration\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EnvironmentExportWithHttpInfo(idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<EnvironmentOut>> {\n        const requestContextPromise = this.requestFactory.v1EnvironmentExport(idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EnvironmentExportWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Download a JSON file containing all org-settings and event types.\n     * Export Environment Configuration\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EnvironmentExport(idempotencyKey?: string, _options?: Configuration): Observable<EnvironmentOut> {\n        return this.v1EnvironmentExportWithHttpInfo(idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<EnvironmentOut>) => apiResponse.data));\n    }\n\n    /**\n     * Import a configuration into the active organization. It doesn\\'t delete anything, only adds/updates what was passed to it.\n     * Import Environment Configuration\n     * @param environmentIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EnvironmentImportWithHttpInfo(environmentIn: EnvironmentIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1EnvironmentImport(environmentIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EnvironmentImportWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Import a configuration into the active organization. It doesn\\'t delete anything, only adds/updates what was passed to it.\n     * Import Environment Configuration\n     * @param environmentIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EnvironmentImport(environmentIn: EnvironmentIn, idempotencyKey?: string, _options?: Configuration): Observable<void> {\n        return this.v1EnvironmentImportWithHttpInfo(environmentIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n}\n\nimport { EnvironmentSettingsApiRequestFactory, EnvironmentSettingsApiResponseProcessor} from \"../apis/EnvironmentSettingsApi\";\nexport class ObservableEnvironmentSettingsApi {\n    private requestFactory: EnvironmentSettingsApiRequestFactory;\n    private responseProcessor: EnvironmentSettingsApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: EnvironmentSettingsApiRequestFactory,\n        responseProcessor?: EnvironmentSettingsApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new EnvironmentSettingsApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new EnvironmentSettingsApiResponseProcessor();\n    }\n\n    /**\n     * Get the environment\\'s settings.\n     * Get Org Settings\n     */\n    public v1EnvironmentGetSettingsWithHttpInfo(_options?: Configuration): Observable<HttpInfo<EnvironmentSettingsOut>> {\n        const requestContextPromise = this.requestFactory.v1EnvironmentGetSettings(_options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EnvironmentGetSettingsWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get the environment\\'s settings.\n     * Get Org Settings\n     */\n    public v1EnvironmentGetSettings(_options?: Configuration): Observable<EnvironmentSettingsOut> {\n        return this.v1EnvironmentGetSettingsWithHttpInfo(_options).pipe(map((apiResponse: HttpInfo<EnvironmentSettingsOut>) => apiResponse.data));\n    }\n\n}\n\nimport { EventTypeApiRequestFactory, EventTypeApiResponseProcessor} from \"../apis/EventTypeApi\";\nexport class ObservableEventTypeApi {\n    private requestFactory: EventTypeApiRequestFactory;\n    private responseProcessor: EventTypeApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: EventTypeApiRequestFactory,\n        responseProcessor?: EventTypeApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new EventTypeApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new EventTypeApiResponseProcessor();\n    }\n\n    /**\n     * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.\n     * Create Event Type\n     * @param eventTypeIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EventTypeCreateWithHttpInfo(eventTypeIn: EventTypeIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<EventTypeOut>> {\n        const requestContextPromise = this.requestFactory.v1EventTypeCreate(eventTypeIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeCreateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.\n     * Create Event Type\n     * @param eventTypeIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EventTypeCreate(eventTypeIn: EventTypeIn, idempotencyKey?: string, _options?: Configuration): Observable<EventTypeOut> {\n        return this.v1EventTypeCreateWithHttpInfo(eventTypeIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<EventTypeOut>) => apiResponse.data));\n    }\n\n    /**\n     * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).\n     * Delete Event Type\n     * @param eventTypeName The event type\\&#39;s name\n     * @param [expunge] By default event types are archived when \\&quot;deleted\\&quot;. Passing this to &#x60;true&#x60; deletes them entirely.\n     */\n    public v1EventTypeDeleteWithHttpInfo(eventTypeName: string, expunge?: boolean, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1EventTypeDelete(eventTypeName, expunge, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeDeleteWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).\n     * Delete Event Type\n     * @param eventTypeName The event type\\&#39;s name\n     * @param [expunge] By default event types are archived when \\&quot;deleted\\&quot;. Passing this to &#x60;true&#x60; deletes them entirely.\n     */\n    public v1EventTypeDelete(eventTypeName: string, expunge?: boolean, _options?: Configuration): Observable<void> {\n        return this.v1EventTypeDeleteWithHttpInfo(eventTypeName, expunge, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Exports event type definitions based on the OpenAPI schemas associated with each existing event type.\n     * Event Type Export From Openapi\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EventTypeExportOpenapiWithHttpInfo(idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<ExportEventTypeOut>> {\n        const requestContextPromise = this.requestFactory.v1EventTypeExportOpenapi(idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeExportOpenapiWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Exports event type definitions based on the OpenAPI schemas associated with each existing event type.\n     * Event Type Export From Openapi\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EventTypeExportOpenapi(idempotencyKey?: string, _options?: Configuration): Observable<ExportEventTypeOut> {\n        return this.v1EventTypeExportOpenapiWithHttpInfo(idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<ExportEventTypeOut>) => apiResponse.data));\n    }\n\n    /**\n     * Generates a fake example from the given JSONSchema.\n     * Generate Schema Example\n     * @param eventTypeSchemaIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EventTypeGenerateExampleWithHttpInfo(eventTypeSchemaIn: EventTypeSchemaIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<EventTypeExampleOut>> {\n        const requestContextPromise = this.requestFactory.v1EventTypeGenerateExample(eventTypeSchemaIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeGenerateExampleWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Generates a fake example from the given JSONSchema.\n     * Generate Schema Example\n     * @param eventTypeSchemaIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EventTypeGenerateExample(eventTypeSchemaIn: EventTypeSchemaIn, idempotencyKey?: string, _options?: Configuration): Observable<EventTypeExampleOut> {\n        return this.v1EventTypeGenerateExampleWithHttpInfo(eventTypeSchemaIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<EventTypeExampleOut>) => apiResponse.data));\n    }\n\n    /**\n     * Get an event type.\n     * Get Event Type\n     * @param eventTypeName The event type\\&#39;s name\n     */\n    public v1EventTypeGetWithHttpInfo(eventTypeName: string, _options?: Configuration): Observable<HttpInfo<EventTypeOut>> {\n        const requestContextPromise = this.requestFactory.v1EventTypeGet(eventTypeName, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeGetWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get an event type.\n     * Get Event Type\n     * @param eventTypeName The event type\\&#39;s name\n     */\n    public v1EventTypeGet(eventTypeName: string, _options?: Configuration): Observable<EventTypeOut> {\n        return this.v1EventTypeGetWithHttpInfo(eventTypeName, _options).pipe(map((apiResponse: HttpInfo<EventTypeOut>) => apiResponse.data));\n    }\n\n    /**\n     * Gets the retry schedule for messages using the given event type.\n     * Get Retry Schedule\n     * @param eventTypeName The event type\\&#39;s name\n     */\n    public v1EventTypeGetRetryScheduleWithHttpInfo(eventTypeName: string, _options?: Configuration): Observable<HttpInfo<RetryScheduleInOut>> {\n        const requestContextPromise = this.requestFactory.v1EventTypeGetRetrySchedule(eventTypeName, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeGetRetryScheduleWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Gets the retry schedule for messages using the given event type.\n     * Get Retry Schedule\n     * @param eventTypeName The event type\\&#39;s name\n     */\n    public v1EventTypeGetRetrySchedule(eventTypeName: string, _options?: Configuration): Observable<RetryScheduleInOut> {\n        return this.v1EventTypeGetRetryScheduleWithHttpInfo(eventTypeName, _options).pipe(map((apiResponse: HttpInfo<RetryScheduleInOut>) => apiResponse.data));\n    }\n\n    /**\n     * Given an OpenAPI spec, create new or update existing event types. If an existing `archived` event type is updated, it will be unarchived.  The importer will convert all webhooks found in the either the `webhooks` or `x-webhooks` top-level.\n     * Event Type Import From Openapi\n     * @param eventTypeImportOpenApiIn Import a list of event types from webhooks defined in an OpenAPI spec.  The OpenAPI spec can be specified as either &#x60;spec&#x60; given the spec as a JSON object, or as &#x60;specRaw&#x60; (a &#x60;string&#x60;) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a &#x60;400&#x60; **Bad Request**.\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EventTypeImportOpenapiWithHttpInfo(eventTypeImportOpenApiIn: EventTypeImportOpenApiIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<EventTypeImportOpenApiOut>> {\n        const requestContextPromise = this.requestFactory.v1EventTypeImportOpenapi(eventTypeImportOpenApiIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeImportOpenapiWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Given an OpenAPI spec, create new or update existing event types. If an existing `archived` event type is updated, it will be unarchived.  The importer will convert all webhooks found in the either the `webhooks` or `x-webhooks` top-level.\n     * Event Type Import From Openapi\n     * @param eventTypeImportOpenApiIn Import a list of event types from webhooks defined in an OpenAPI spec.  The OpenAPI spec can be specified as either &#x60;spec&#x60; given the spec as a JSON object, or as &#x60;specRaw&#x60; (a &#x60;string&#x60;) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a &#x60;400&#x60; **Bad Request**.\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1EventTypeImportOpenapi(eventTypeImportOpenApiIn: EventTypeImportOpenApiIn, idempotencyKey?: string, _options?: Configuration): Observable<EventTypeImportOpenApiOut> {\n        return this.v1EventTypeImportOpenapiWithHttpInfo(eventTypeImportOpenApiIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<EventTypeImportOpenApiOut>) => apiResponse.data));\n    }\n\n    /**\n     * Return the list of event types.\n     * List Event Types\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     * @param [includeArchived] When &#x60;true&#x60; archived (deleted but not expunged) items are included in the response.\n     * @param [withContent] When &#x60;true&#x60; the full item (including the schema) is included in the response.\n     */\n    public v1EventTypeListWithHttpInfo(limit?: number, iterator?: string, order?: Ordering, includeArchived?: boolean, withContent?: boolean, _options?: Configuration): Observable<HttpInfo<ListResponseEventTypeOut>> {\n        const requestContextPromise = this.requestFactory.v1EventTypeList(limit, iterator, order, includeArchived, withContent, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeListWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Return the list of event types.\n     * List Event Types\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     * @param [includeArchived] When &#x60;true&#x60; archived (deleted but not expunged) items are included in the response.\n     * @param [withContent] When &#x60;true&#x60; the full item (including the schema) is included in the response.\n     */\n    public v1EventTypeList(limit?: number, iterator?: string, order?: Ordering, includeArchived?: boolean, withContent?: boolean, _options?: Configuration): Observable<ListResponseEventTypeOut> {\n        return this.v1EventTypeListWithHttpInfo(limit, iterator, order, includeArchived, withContent, _options).pipe(map((apiResponse: HttpInfo<ListResponseEventTypeOut>) => apiResponse.data));\n    }\n\n    /**\n     * Partially update an event type.\n     * Patch Event Type\n     * @param eventTypeName The event type\\&#39;s name\n     * @param eventTypePatch\n     */\n    public v1EventTypePatchWithHttpInfo(eventTypeName: string, eventTypePatch: EventTypePatch, _options?: Configuration): Observable<HttpInfo<EventTypeOut>> {\n        const requestContextPromise = this.requestFactory.v1EventTypePatch(eventTypeName, eventTypePatch, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypePatchWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Partially update an event type.\n     * Patch Event Type\n     * @param eventTypeName The event type\\&#39;s name\n     * @param eventTypePatch\n     */\n    public v1EventTypePatch(eventTypeName: string, eventTypePatch: EventTypePatch, _options?: Configuration): Observable<EventTypeOut> {\n        return this.v1EventTypePatchWithHttpInfo(eventTypeName, eventTypePatch, _options).pipe(map((apiResponse: HttpInfo<EventTypeOut>) => apiResponse.data));\n    }\n\n    /**\n     * Update an event type.\n     * Update Event Type\n     * @param eventTypeName The event type\\&#39;s name\n     * @param eventTypeUpdate\n     */\n    public v1EventTypeUpdateWithHttpInfo(eventTypeName: string, eventTypeUpdate: EventTypeUpdate, _options?: Configuration): Observable<HttpInfo<EventTypeOut>> {\n        const requestContextPromise = this.requestFactory.v1EventTypeUpdate(eventTypeName, eventTypeUpdate, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeUpdateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Update an event type.\n     * Update Event Type\n     * @param eventTypeName The event type\\&#39;s name\n     * @param eventTypeUpdate\n     */\n    public v1EventTypeUpdate(eventTypeName: string, eventTypeUpdate: EventTypeUpdate, _options?: Configuration): Observable<EventTypeOut> {\n        return this.v1EventTypeUpdateWithHttpInfo(eventTypeName, eventTypeUpdate, _options).pipe(map((apiResponse: HttpInfo<EventTypeOut>) => apiResponse.data));\n    }\n\n    /**\n     * Sets a retry schedule for all messages using the given event type.\n     * Update Retry Schedule\n     * @param eventTypeName The event type\\&#39;s name\n     * @param retryScheduleInOut\n     */\n    public v1EventTypeUpdateRetryScheduleWithHttpInfo(eventTypeName: string, retryScheduleInOut: RetryScheduleInOut, _options?: Configuration): Observable<HttpInfo<RetryScheduleInOut>> {\n        const requestContextPromise = this.requestFactory.v1EventTypeUpdateRetrySchedule(eventTypeName, retryScheduleInOut, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeUpdateRetryScheduleWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Sets a retry schedule for all messages using the given event type.\n     * Update Retry Schedule\n     * @param eventTypeName The event type\\&#39;s name\n     * @param retryScheduleInOut\n     */\n    public v1EventTypeUpdateRetrySchedule(eventTypeName: string, retryScheduleInOut: RetryScheduleInOut, _options?: Configuration): Observable<RetryScheduleInOut> {\n        return this.v1EventTypeUpdateRetryScheduleWithHttpInfo(eventTypeName, retryScheduleInOut, _options).pipe(map((apiResponse: HttpInfo<RetryScheduleInOut>) => apiResponse.data));\n    }\n\n}\n\nimport { EventsApiRequestFactory, EventsApiResponseProcessor} from \"../apis/EventsApi\";\nexport class ObservableEventsApi {\n    private requestFactory: EventsApiRequestFactory;\n    private responseProcessor: EventsApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: EventsApiRequestFactory,\n        responseProcessor?: EventsApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new EventsApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new EventsApiResponseProcessor();\n    }\n\n    /**\n     * Reads the stream of operational webhook events for this environment.\n     * Events\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [eventTypes] Filter response based on the event type\n     * @param [channels] Filter response based on the event type.\n     * @param [after]\n     */\n    public v1EventsWithHttpInfo(limit?: number, iterator?: string, eventTypes?: Array<string>, channels?: Array<string>, after?: Date, _options?: Configuration): Observable<HttpInfo<MessageEventsOut>> {\n        const requestContextPromise = this.requestFactory.v1Events(limit, iterator, eventTypes, channels, after, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventsWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Reads the stream of operational webhook events for this environment.\n     * Events\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [eventTypes] Filter response based on the event type\n     * @param [channels] Filter response based on the event type.\n     * @param [after]\n     */\n    public v1Events(limit?: number, iterator?: string, eventTypes?: Array<string>, channels?: Array<string>, after?: Date, _options?: Configuration): Observable<MessageEventsOut> {\n        return this.v1EventsWithHttpInfo(limit, iterator, eventTypes, channels, after, _options).pipe(map((apiResponse: HttpInfo<MessageEventsOut>) => apiResponse.data));\n    }\n\n}\n\nimport { HealthApiRequestFactory, HealthApiResponseProcessor} from \"../apis/HealthApi\";\nexport class ObservableHealthApi {\n    private requestFactory: HealthApiRequestFactory;\n    private responseProcessor: HealthApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: HealthApiRequestFactory,\n        responseProcessor?: HealthApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new HealthApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new HealthApiResponseProcessor();\n    }\n\n    /**\n     * Verify the API server is up and running.\n     * Health\n     */\n    public v1HealthGetWithHttpInfo(_options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1HealthGet(_options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1HealthGetWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Verify the API server is up and running.\n     * Health\n     */\n    public v1HealthGet(_options?: Configuration): Observable<void> {\n        return this.v1HealthGetWithHttpInfo(_options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n}\n\nimport { InboundApiRequestFactory, InboundApiResponseProcessor} from \"../apis/InboundApi\";\nexport class ObservableInboundApi {\n    private requestFactory: InboundApiRequestFactory;\n    private responseProcessor: InboundApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: InboundApiRequestFactory,\n        responseProcessor?: InboundApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new InboundApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new InboundApiResponseProcessor();\n    }\n\n    /**\n     * Handles a raw inbound webhook for the application.\n     * Handle Inbound\n     * @param appId The app\\&#39;s ID or UID\n     * @param inboundToken\n     * @param body\n     * @param [eventType] The event type\\&#39;s name\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1InboundMsgWithHttpInfo(appId: string, inboundToken: string, body: string, eventType?: string, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<MessageOut>> {\n        const requestContextPromise = this.requestFactory.v1InboundMsg(appId, inboundToken, body, eventType, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1InboundMsgWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Handles a raw inbound webhook for the application.\n     * Handle Inbound\n     * @param appId The app\\&#39;s ID or UID\n     * @param inboundToken\n     * @param body\n     * @param [eventType] The event type\\&#39;s name\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1InboundMsg(appId: string, inboundToken: string, body: string, eventType?: string, idempotencyKey?: string, _options?: Configuration): Observable<MessageOut> {\n        return this.v1InboundMsgWithHttpInfo(appId, inboundToken, body, eventType, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<MessageOut>) => apiResponse.data));\n    }\n\n    /**\n     * Invalidates the previous inbound url (if one exists), producing a new inbound URL for this app.\n     * Rotate Url\n     * @param appId The app\\&#39;s ID or UID\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1InboundRotateUrlWithHttpInfo(appId: string, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<RotatedUrlOut>> {\n        const requestContextPromise = this.requestFactory.v1InboundRotateUrl(appId, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1InboundRotateUrlWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Invalidates the previous inbound url (if one exists), producing a new inbound URL for this app.\n     * Rotate Url\n     * @param appId The app\\&#39;s ID or UID\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1InboundRotateUrl(appId: string, idempotencyKey?: string, _options?: Configuration): Observable<RotatedUrlOut> {\n        return this.v1InboundRotateUrlWithHttpInfo(appId, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<RotatedUrlOut>) => apiResponse.data));\n    }\n\n}\n\nimport { IntegrationApiRequestFactory, IntegrationApiResponseProcessor} from \"../apis/IntegrationApi\";\nexport class ObservableIntegrationApi {\n    private requestFactory: IntegrationApiRequestFactory;\n    private responseProcessor: IntegrationApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: IntegrationApiRequestFactory,\n        responseProcessor?: IntegrationApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new IntegrationApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new IntegrationApiResponseProcessor();\n    }\n\n    /**\n     * Create an integration.\n     * Create Integration\n     * @param appId The app\\&#39;s ID or UID\n     * @param integrationIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1IntegrationCreateWithHttpInfo(appId: string, integrationIn: IntegrationIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<IntegrationOut>> {\n        const requestContextPromise = this.requestFactory.v1IntegrationCreate(appId, integrationIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1IntegrationCreateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Create an integration.\n     * Create Integration\n     * @param appId The app\\&#39;s ID or UID\n     * @param integrationIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1IntegrationCreate(appId: string, integrationIn: IntegrationIn, idempotencyKey?: string, _options?: Configuration): Observable<IntegrationOut> {\n        return this.v1IntegrationCreateWithHttpInfo(appId, integrationIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<IntegrationOut>) => apiResponse.data));\n    }\n\n    /**\n     * Delete an integration.\n     * Delete Integration\n     * @param appId The app\\&#39;s ID or UID\n     * @param integId The integ\\&#39;s ID\n     */\n    public v1IntegrationDeleteWithHttpInfo(appId: string, integId: string, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1IntegrationDelete(appId, integId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1IntegrationDeleteWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Delete an integration.\n     * Delete Integration\n     * @param appId The app\\&#39;s ID or UID\n     * @param integId The integ\\&#39;s ID\n     */\n    public v1IntegrationDelete(appId: string, integId: string, _options?: Configuration): Observable<void> {\n        return this.v1IntegrationDeleteWithHttpInfo(appId, integId, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Get an integration.\n     * Get Integration\n     * @param appId The app\\&#39;s ID or UID\n     * @param integId The integ\\&#39;s ID\n     */\n    public v1IntegrationGetWithHttpInfo(appId: string, integId: string, _options?: Configuration): Observable<HttpInfo<IntegrationOut>> {\n        const requestContextPromise = this.requestFactory.v1IntegrationGet(appId, integId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1IntegrationGetWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get an integration.\n     * Get Integration\n     * @param appId The app\\&#39;s ID or UID\n     * @param integId The integ\\&#39;s ID\n     */\n    public v1IntegrationGet(appId: string, integId: string, _options?: Configuration): Observable<IntegrationOut> {\n        return this.v1IntegrationGetWithHttpInfo(appId, integId, _options).pipe(map((apiResponse: HttpInfo<IntegrationOut>) => apiResponse.data));\n    }\n\n    /**\n     * Get an integration\\'s key.\n     * Get Integration Key\n     * @param appId The app\\&#39;s ID or UID\n     * @param integId The integ\\&#39;s ID\n     */\n    public v1IntegrationGetKeyWithHttpInfo(appId: string, integId: string, _options?: Configuration): Observable<HttpInfo<IntegrationKeyOut>> {\n        const requestContextPromise = this.requestFactory.v1IntegrationGetKey(appId, integId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1IntegrationGetKeyWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get an integration\\'s key.\n     * Get Integration Key\n     * @param appId The app\\&#39;s ID or UID\n     * @param integId The integ\\&#39;s ID\n     */\n    public v1IntegrationGetKey(appId: string, integId: string, _options?: Configuration): Observable<IntegrationKeyOut> {\n        return this.v1IntegrationGetKeyWithHttpInfo(appId, integId, _options).pipe(map((apiResponse: HttpInfo<IntegrationKeyOut>) => apiResponse.data));\n    }\n\n    /**\n     * List the application\\'s integrations.\n     * List Integrations\n     * @param appId The app\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     */\n    public v1IntegrationListWithHttpInfo(appId: string, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<HttpInfo<ListResponseIntegrationOut>> {\n        const requestContextPromise = this.requestFactory.v1IntegrationList(appId, limit, iterator, order, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1IntegrationListWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * List the application\\'s integrations.\n     * List Integrations\n     * @param appId The app\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     */\n    public v1IntegrationList(appId: string, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseIntegrationOut> {\n        return this.v1IntegrationListWithHttpInfo(appId, limit, iterator, order, _options).pipe(map((apiResponse: HttpInfo<ListResponseIntegrationOut>) => apiResponse.data));\n    }\n\n    /**\n     * Rotate the integration\\'s key. The previous key will be immediately revoked.\n     * Rotate Integration Key\n     * @param appId The app\\&#39;s ID or UID\n     * @param integId The integ\\&#39;s ID\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1IntegrationRotateKeyWithHttpInfo(appId: string, integId: string, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<IntegrationKeyOut>> {\n        const requestContextPromise = this.requestFactory.v1IntegrationRotateKey(appId, integId, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1IntegrationRotateKeyWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Rotate the integration\\'s key. The previous key will be immediately revoked.\n     * Rotate Integration Key\n     * @param appId The app\\&#39;s ID or UID\n     * @param integId The integ\\&#39;s ID\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1IntegrationRotateKey(appId: string, integId: string, idempotencyKey?: string, _options?: Configuration): Observable<IntegrationKeyOut> {\n        return this.v1IntegrationRotateKeyWithHttpInfo(appId, integId, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<IntegrationKeyOut>) => apiResponse.data));\n    }\n\n    /**\n     * Update an integration.\n     * Update Integration\n     * @param appId The app\\&#39;s ID or UID\n     * @param integId The integ\\&#39;s ID\n     * @param integrationUpdate\n     */\n    public v1IntegrationUpdateWithHttpInfo(appId: string, integId: string, integrationUpdate: IntegrationUpdate, _options?: Configuration): Observable<HttpInfo<IntegrationOut>> {\n        const requestContextPromise = this.requestFactory.v1IntegrationUpdate(appId, integId, integrationUpdate, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1IntegrationUpdateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Update an integration.\n     * Update Integration\n     * @param appId The app\\&#39;s ID or UID\n     * @param integId The integ\\&#39;s ID\n     * @param integrationUpdate\n     */\n    public v1IntegrationUpdate(appId: string, integId: string, integrationUpdate: IntegrationUpdate, _options?: Configuration): Observable<IntegrationOut> {\n        return this.v1IntegrationUpdateWithHttpInfo(appId, integId, integrationUpdate, _options).pipe(map((apiResponse: HttpInfo<IntegrationOut>) => apiResponse.data));\n    }\n\n}\n\nimport { MessageApiRequestFactory, MessageApiResponseProcessor} from \"../apis/MessageApi\";\nexport class ObservableMessageApi {\n    private requestFactory: MessageApiRequestFactory;\n    private responseProcessor: MessageApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: MessageApiRequestFactory,\n        responseProcessor?: MessageApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new MessageApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new MessageApiResponseProcessor();\n    }\n\n    /**\n     * Creates and sends a message to the specified endpoint.  The message attempt and response from the endpoint is returned.\n     * Create Message Attempt For Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param messageIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public createMessageAttemptForEndpointWithHttpInfo(appId: string, endpointId: string, messageIn: MessageIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<MessageAttemptOut>> {\n        const requestContextPromise = this.requestFactory.createMessageAttemptForEndpoint(appId, endpointId, messageIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.createMessageAttemptForEndpointWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Creates and sends a message to the specified endpoint.  The message attempt and response from the endpoint is returned.\n     * Create Message Attempt For Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param messageIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public createMessageAttemptForEndpoint(appId: string, endpointId: string, messageIn: MessageIn, idempotencyKey?: string, _options?: Configuration): Observable<MessageAttemptOut> {\n        return this.createMessageAttemptForEndpointWithHttpInfo(appId, endpointId, messageIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<MessageAttemptOut>) => apiResponse.data));\n    }\n\n    /**\n     * Reads the stream of created messages for an application, filtered on the Sink\\'s event types and Channels.\n     * Public Events\n     * @param appId The app\\&#39;s ID or UID\n     * @param sinkId The ep\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [eventType] Filters messages sent with this event type (optional).\n     * @param [channel] Filters messages sent with this channel (optional).\n     * @param [after]\n     */\n    public v1EventsPublicWithHttpInfo(appId: string, sinkId: string, limit?: number, iterator?: string, eventType?: string, channel?: string, after?: Date, _options?: Configuration): Observable<HttpInfo<MessageEventsOut>> {\n        const requestContextPromise = this.requestFactory.v1EventsPublic(appId, sinkId, limit, iterator, eventType, channel, after, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventsPublicWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Reads the stream of created messages for an application, filtered on the Sink\\'s event types and Channels.\n     * Public Events\n     * @param appId The app\\&#39;s ID or UID\n     * @param sinkId The ep\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [eventType] Filters messages sent with this event type (optional).\n     * @param [channel] Filters messages sent with this channel (optional).\n     * @param [after]\n     */\n    public v1EventsPublic(appId: string, sinkId: string, limit?: number, iterator?: string, eventType?: string, channel?: string, after?: Date, _options?: Configuration): Observable<MessageEventsOut> {\n        return this.v1EventsPublicWithHttpInfo(appId, sinkId, limit, iterator, eventType, channel, after, _options).pipe(map((apiResponse: HttpInfo<MessageEventsOut>) => apiResponse.data));\n    }\n\n    /**\n     * Creates a new message and dispatches it to all of the application\\'s endpoints.  The `eventId` is an optional custom unique ID. It\\'s verified to be unique only up to a day, after that no verification will be made. If a message with the same `eventId` already exists for the application, a 409 conflict error will be returned.  The `eventType` indicates the type and schema of the event. All messages of a certain `eventType` are expected to have the same schema. Endpoints can choose to only listen to specific event types. Messages can also have `channels`, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don\\'t imply a specific message content or schema.  The `payload` property is the webhook\\'s body (the actual webhook message). Svix supports payload sizes of up to ~350kb, though it\\'s generally a good idea to keep webhook payloads small, probably no larger than 40kb.\n     * Create Message\n     * @param appId The app\\&#39;s ID or UID\n     * @param messageIn\n     * @param [withContent] When &#x60;true&#x60;, message payloads are included in the response.\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1MessageCreateWithHttpInfo(appId: string, messageIn: MessageIn, withContent?: boolean, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<MessageOut>> {\n        const requestContextPromise = this.requestFactory.v1MessageCreate(appId, messageIn, withContent, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageCreateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Creates a new message and dispatches it to all of the application\\'s endpoints.  The `eventId` is an optional custom unique ID. It\\'s verified to be unique only up to a day, after that no verification will be made. If a message with the same `eventId` already exists for the application, a 409 conflict error will be returned.  The `eventType` indicates the type and schema of the event. All messages of a certain `eventType` are expected to have the same schema. Endpoints can choose to only listen to specific event types. Messages can also have `channels`, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don\\'t imply a specific message content or schema.  The `payload` property is the webhook\\'s body (the actual webhook message). Svix supports payload sizes of up to ~350kb, though it\\'s generally a good idea to keep webhook payloads small, probably no larger than 40kb.\n     * Create Message\n     * @param appId The app\\&#39;s ID or UID\n     * @param messageIn\n     * @param [withContent] When &#x60;true&#x60;, message payloads are included in the response.\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1MessageCreate(appId: string, messageIn: MessageIn, withContent?: boolean, idempotencyKey?: string, _options?: Configuration): Observable<MessageOut> {\n        return this.v1MessageCreateWithHttpInfo(appId, messageIn, withContent, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<MessageOut>) => apiResponse.data));\n    }\n\n    /**\n     * Reads the stream of created messages for an application.\n     * Message Events\n     * @param appId The app\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [eventTypes] Filter response based on the event type\n     * @param [channels] Filter response based on the event type.\n     * @param [after]\n     */\n    public v1MessageEventsWithHttpInfo(appId: string, limit?: number, iterator?: string, eventTypes?: Array<string>, channels?: Array<string>, after?: Date, _options?: Configuration): Observable<HttpInfo<MessageEventsOut>> {\n        const requestContextPromise = this.requestFactory.v1MessageEvents(appId, limit, iterator, eventTypes, channels, after, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageEventsWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Reads the stream of created messages for an application.\n     * Message Events\n     * @param appId The app\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [eventTypes] Filter response based on the event type\n     * @param [channels] Filter response based on the event type.\n     * @param [after]\n     */\n    public v1MessageEvents(appId: string, limit?: number, iterator?: string, eventTypes?: Array<string>, channels?: Array<string>, after?: Date, _options?: Configuration): Observable<MessageEventsOut> {\n        return this.v1MessageEventsWithHttpInfo(appId, limit, iterator, eventTypes, channels, after, _options).pipe(map((apiResponse: HttpInfo<MessageEventsOut>) => apiResponse.data));\n    }\n\n    /**\n     * Reads the stream of created messages for an application, but using server-managed iterator tracking.\n     * Message Events Subscription\n     * @param appId The app\\&#39;s ID or UID\n     * @param subscriptionId The esub\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [eventTypes] Filter response based on the event type\n     * @param [channels] Filter response based on the event type.\n     * @param [after]\n     */\n    public v1MessageEventsSubscriptionWithHttpInfo(appId: string, subscriptionId: string, limit?: number, iterator?: string, eventTypes?: Array<string>, channels?: Array<string>, after?: Date, _options?: Configuration): Observable<HttpInfo<MessageEventsOut>> {\n        const requestContextPromise = this.requestFactory.v1MessageEventsSubscription(appId, subscriptionId, limit, iterator, eventTypes, channels, after, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageEventsSubscriptionWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Reads the stream of created messages for an application, but using server-managed iterator tracking.\n     * Message Events Subscription\n     * @param appId The app\\&#39;s ID or UID\n     * @param subscriptionId The esub\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [eventTypes] Filter response based on the event type\n     * @param [channels] Filter response based on the event type.\n     * @param [after]\n     */\n    public v1MessageEventsSubscription(appId: string, subscriptionId: string, limit?: number, iterator?: string, eventTypes?: Array<string>, channels?: Array<string>, after?: Date, _options?: Configuration): Observable<MessageEventsOut> {\n        return this.v1MessageEventsSubscriptionWithHttpInfo(appId, subscriptionId, limit, iterator, eventTypes, channels, after, _options).pipe(map((apiResponse: HttpInfo<MessageEventsOut>) => apiResponse.data));\n    }\n\n    /**\n     * Creates an auth token that can be used with the `v1.message.events-subscription` endpoint.\n     * Message Events Create Token\n     * @param appId The app\\&#39;s ID or UID\n     * @param subscriptionId The esub\\&#39;s ID or UID\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1MessageEventsSubscriptionCreateTokenWithHttpInfo(appId: string, subscriptionId: string, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<MessageSubscriberAuthTokenOut>> {\n        const requestContextPromise = this.requestFactory.v1MessageEventsSubscriptionCreateToken(appId, subscriptionId, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageEventsSubscriptionCreateTokenWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Creates an auth token that can be used with the `v1.message.events-subscription` endpoint.\n     * Message Events Create Token\n     * @param appId The app\\&#39;s ID or UID\n     * @param subscriptionId The esub\\&#39;s ID or UID\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1MessageEventsSubscriptionCreateToken(appId: string, subscriptionId: string, idempotencyKey?: string, _options?: Configuration): Observable<MessageSubscriberAuthTokenOut> {\n        return this.v1MessageEventsSubscriptionCreateTokenWithHttpInfo(appId, subscriptionId, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<MessageSubscriberAuthTokenOut>) => apiResponse.data));\n    }\n\n    /**\n     * Delete the given message\\'s payload.  Useful in cases when a message was accidentally sent with sensitive content. The message can\\'t be replayed or resent once its payload has been deleted or expired.\n     * Delete message payload\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     */\n    public v1MessageExpungeContentWithHttpInfo(appId: string, msgId: string, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1MessageExpungeContent(appId, msgId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageExpungeContentWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Delete the given message\\'s payload.  Useful in cases when a message was accidentally sent with sensitive content. The message can\\'t be replayed or resent once its payload has been deleted or expired.\n     * Delete message payload\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     */\n    public v1MessageExpungeContent(appId: string, msgId: string, _options?: Configuration): Observable<void> {\n        return this.v1MessageExpungeContentWithHttpInfo(appId, msgId, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Get a message by its ID or eventID.\n     * Get Message\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param [withContent] When &#x60;true&#x60; message payloads are included in the response.\n     */\n    public v1MessageGetWithHttpInfo(appId: string, msgId: string, withContent?: boolean, _options?: Configuration): Observable<HttpInfo<MessageOut>> {\n        const requestContextPromise = this.requestFactory.v1MessageGet(appId, msgId, withContent, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageGetWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get a message by its ID or eventID.\n     * Get Message\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param [withContent] When &#x60;true&#x60; message payloads are included in the response.\n     */\n    public v1MessageGet(appId: string, msgId: string, withContent?: boolean, _options?: Configuration): Observable<MessageOut> {\n        return this.v1MessageGetWithHttpInfo(appId, msgId, withContent, _options).pipe(map((apiResponse: HttpInfo<MessageOut>) => apiResponse.data));\n    }\n\n    /**\n     * Get a message raw payload by its ID or eventID.\n     * Get Raw Message Payload\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     */\n    public v1MessageGetRawPayloadWithHttpInfo(appId: string, msgId: string, _options?: Configuration): Observable<HttpInfo<MessageRawPayloadOut>> {\n        const requestContextPromise = this.requestFactory.v1MessageGetRawPayload(appId, msgId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageGetRawPayloadWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get a message raw payload by its ID or eventID.\n     * Get Raw Message Payload\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     */\n    public v1MessageGetRawPayload(appId: string, msgId: string, _options?: Configuration): Observable<MessageRawPayloadOut> {\n        return this.v1MessageGetRawPayloadWithHttpInfo(appId, msgId, _options).pipe(map((apiResponse: HttpInfo<MessageRawPayloadOut>) => apiResponse.data));\n    }\n\n    /**\n     * List all of the application\\'s messages.  The `before` and `after` parameters let you filter all items created before or after a certain date. These can be used alongside an iterator to paginate over results within a certain window.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Messages\n     * @param appId The app\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [channel] Filter response based on the channel.\n     * @param [before] Only include items created before a certain date.\n     * @param [after] Only include items created after a certain date.\n     * @param [withContent] When &#x60;true&#x60; message payloads are included in the response.\n     * @param [tag] Filter messages matching the provided tag.\n     * @param [eventTypes] Filter response based on the event type\n     */\n    public v1MessageListWithHttpInfo(appId: string, limit?: number, iterator?: string, channel?: string, before?: Date, after?: Date, withContent?: boolean, tag?: string, eventTypes?: Array<string>, _options?: Configuration): Observable<HttpInfo<ListResponseMessageOut>> {\n        const requestContextPromise = this.requestFactory.v1MessageList(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageListWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * List all of the application\\'s messages.  The `before` and `after` parameters let you filter all items created before or after a certain date. These can be used alongside an iterator to paginate over results within a certain window.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Messages\n     * @param appId The app\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [channel] Filter response based on the channel.\n     * @param [before] Only include items created before a certain date.\n     * @param [after] Only include items created after a certain date.\n     * @param [withContent] When &#x60;true&#x60; message payloads are included in the response.\n     * @param [tag] Filter messages matching the provided tag.\n     * @param [eventTypes] Filter response based on the event type\n     */\n    public v1MessageList(appId: string, limit?: number, iterator?: string, channel?: string, before?: Date, after?: Date, withContent?: boolean, tag?: string, eventTypes?: Array<string>, _options?: Configuration): Observable<ListResponseMessageOut> {\n        return this.v1MessageListWithHttpInfo(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes, _options).pipe(map((apiResponse: HttpInfo<ListResponseMessageOut>) => apiResponse.data));\n    }\n\n}\n\nimport { MessageAttemptApiRequestFactory, MessageAttemptApiResponseProcessor} from \"../apis/MessageAttemptApi\";\nexport class ObservableMessageAttemptApi {\n    private requestFactory: MessageAttemptApiRequestFactory;\n    private responseProcessor: MessageAttemptApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: MessageAttemptApiRequestFactory,\n        responseProcessor?: MessageAttemptApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new MessageAttemptApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new MessageAttemptApiResponseProcessor();\n    }\n\n    /**\n     * Like `v1.message-attempt.list-by-endpoint` but returning a count only.\n     * Count Attempts By Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param [status] Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * @param [statusCodeClass] Filter response based on the HTTP status code\n     * @param [channel] Filter response based on the channel\n     * @param [tag] Filter response based on the tag\n     * @param [before] Only include items created before a certain date\n     * @param [after] Only include items created after a certain date\n     * @param [eventTypes] Filter response based on the event type\n     */\n    public v1MessageAttemptCountByEndpointWithHttpInfo(appId: string, endpointId: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, before?: Date, after?: Date, eventTypes?: Array<string>, _options?: Configuration): Observable<HttpInfo<CountOut>> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptCountByEndpoint(appId, endpointId, status, statusCodeClass, channel, tag, before, after, eventTypes, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptCountByEndpointWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Like `v1.message-attempt.list-by-endpoint` but returning a count only.\n     * Count Attempts By Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param [status] Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * @param [statusCodeClass] Filter response based on the HTTP status code\n     * @param [channel] Filter response based on the channel\n     * @param [tag] Filter response based on the tag\n     * @param [before] Only include items created before a certain date\n     * @param [after] Only include items created after a certain date\n     * @param [eventTypes] Filter response based on the event type\n     */\n    public v1MessageAttemptCountByEndpoint(appId: string, endpointId: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, before?: Date, after?: Date, eventTypes?: Array<string>, _options?: Configuration): Observable<CountOut> {\n        return this.v1MessageAttemptCountByEndpointWithHttpInfo(appId, endpointId, status, statusCodeClass, channel, tag, before, after, eventTypes, _options).pipe(map((apiResponse: HttpInfo<CountOut>) => apiResponse.data));\n    }\n\n    /**\n     * Deletes the given attempt\\'s response body.  Useful when an endpoint accidentally returned sensitive content. The message can\\'t be replayed or resent once its payload has been deleted or expired.\n     * Delete attempt response body\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param attemptId The attempt\\&#39;s ID\n     */\n    public v1MessageAttemptExpungeContentWithHttpInfo(appId: string, msgId: string, attemptId: string, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptExpungeContent(appId, msgId, attemptId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptExpungeContentWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Deletes the given attempt\\'s response body.  Useful when an endpoint accidentally returned sensitive content. The message can\\'t be replayed or resent once its payload has been deleted or expired.\n     * Delete attempt response body\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param attemptId The attempt\\&#39;s ID\n     */\n    public v1MessageAttemptExpungeContent(appId: string, msgId: string, attemptId: string, _options?: Configuration): Observable<void> {\n        return this.v1MessageAttemptExpungeContentWithHttpInfo(appId, msgId, attemptId, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * `msg_id`: Use a message id or a message `eventId`\n     * Get Attempt\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param attemptId The attempt\\&#39;s ID\n     */\n    public v1MessageAttemptGetWithHttpInfo(appId: string, msgId: string, attemptId: string, _options?: Configuration): Observable<HttpInfo<MessageAttemptOut>> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptGet(appId, msgId, attemptId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptGetWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * `msg_id`: Use a message id or a message `eventId`\n     * Get Attempt\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param attemptId The attempt\\&#39;s ID\n     */\n    public v1MessageAttemptGet(appId: string, msgId: string, attemptId: string, _options?: Configuration): Observable<MessageAttemptOut> {\n        return this.v1MessageAttemptGetWithHttpInfo(appId, msgId, attemptId, _options).pipe(map((apiResponse: HttpInfo<MessageAttemptOut>) => apiResponse.data));\n    }\n\n    /**\n     * Calculate and return headers used on a given message attempt\n     * Get Attempt Headers\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param attemptId The attempt\\&#39;s ID\n     */\n    public v1MessageAttemptGetHeadersWithHttpInfo(appId: string, msgId: string, attemptId: string, _options?: Configuration): Observable<HttpInfo<MessageAttemptHeadersOut>> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptGetHeaders(appId, msgId, attemptId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptGetHeadersWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Calculate and return headers used on a given message attempt\n     * Get Attempt Headers\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param attemptId The attempt\\&#39;s ID\n     */\n    public v1MessageAttemptGetHeaders(appId: string, msgId: string, attemptId: string, _options?: Configuration): Observable<MessageAttemptHeadersOut> {\n        return this.v1MessageAttemptGetHeadersWithHttpInfo(appId, msgId, attemptId, _options).pipe(map((apiResponse: HttpInfo<MessageAttemptHeadersOut>) => apiResponse.data));\n    }\n\n    /**\n     * List endpoints attempted by a given message.  Additionally includes metadata about the latest message attempt. By default, endpoints are listed in ascending order by ID.\n     * List Attempted Destinations\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     */\n    public v1MessageAttemptListAttemptedDestinationsWithHttpInfo(appId: string, msgId: string, limit?: number, iterator?: string, _options?: Configuration): Observable<HttpInfo<ListResponseMessageEndpointOut>> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptListAttemptedDestinations(appId, msgId, limit, iterator, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptListAttemptedDestinationsWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * List endpoints attempted by a given message.  Additionally includes metadata about the latest message attempt. By default, endpoints are listed in ascending order by ID.\n     * List Attempted Destinations\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     */\n    public v1MessageAttemptListAttemptedDestinations(appId: string, msgId: string, limit?: number, iterator?: string, _options?: Configuration): Observable<ListResponseMessageEndpointOut> {\n        return this.v1MessageAttemptListAttemptedDestinationsWithHttpInfo(appId, msgId, limit, iterator, _options).pipe(map((apiResponse: HttpInfo<ListResponseMessageEndpointOut>) => apiResponse.data));\n    }\n\n    /**\n     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempted Messages\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [channel] Filter response based on the channel\n     * @param [tag] Filter response based on the message tags\n     * @param [status] Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * @param [before] Only include items created before a certain date\n     * @param [after] Only include items created after a certain date\n     * @param [withContent] When &#x60;true&#x60; message payloads are included in the response\n     * @param [eventTypes] Filter response based on the event type\n     */\n    public v1MessageAttemptListAttemptedMessagesWithHttpInfo(appId: string, endpointId: string, limit?: number, iterator?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, withContent?: boolean, eventTypes?: Array<string>, _options?: Configuration): Observable<HttpInfo<ListResponseEndpointMessageOut>> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptListAttemptedMessages(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptListAttemptedMessagesWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempted Messages\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [channel] Filter response based on the channel\n     * @param [tag] Filter response based on the message tags\n     * @param [status] Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * @param [before] Only include items created before a certain date\n     * @param [after] Only include items created after a certain date\n     * @param [withContent] When &#x60;true&#x60; message payloads are included in the response\n     * @param [eventTypes] Filter response based on the event type\n     */\n    public v1MessageAttemptListAttemptedMessages(appId: string, endpointId: string, limit?: number, iterator?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, withContent?: boolean, eventTypes?: Array<string>, _options?: Configuration): Observable<ListResponseEndpointMessageOut> {\n        return this.v1MessageAttemptListAttemptedMessagesWithHttpInfo(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes, _options).pipe(map((apiResponse: HttpInfo<ListResponseEndpointMessageOut>) => apiResponse.data));\n    }\n\n    /**\n     * List attempts by endpoint id  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts By Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [status] Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * @param [statusCodeClass] Filter response based on the HTTP status code\n     * @param [channel] Filter response based on the channel\n     * @param [tag] Filter response based on the tag\n     * @param [before] Only include items created before a certain date\n     * @param [after] Only include items created after a certain date\n     * @param [withContent] When &#x60;true&#x60; attempt content is included in the response\n     * @param [withMsg] When &#x60;true&#x60;, the message information is included in the response\n     * @param [eventTypes] Filter response based on the event type\n     */\n    public v1MessageAttemptListByEndpointWithHttpInfo(appId: string, endpointId: string, limit?: number, iterator?: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, before?: Date, after?: Date, withContent?: boolean, withMsg?: boolean, eventTypes?: Array<string>, _options?: Configuration): Observable<HttpInfo<ListResponseMessageAttemptOut>> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptListByEndpoint(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptListByEndpointWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * List attempts by endpoint id  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts By Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [status] Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * @param [statusCodeClass] Filter response based on the HTTP status code\n     * @param [channel] Filter response based on the channel\n     * @param [tag] Filter response based on the tag\n     * @param [before] Only include items created before a certain date\n     * @param [after] Only include items created after a certain date\n     * @param [withContent] When &#x60;true&#x60; attempt content is included in the response\n     * @param [withMsg] When &#x60;true&#x60;, the message information is included in the response\n     * @param [eventTypes] Filter response based on the event type\n     */\n    public v1MessageAttemptListByEndpoint(appId: string, endpointId: string, limit?: number, iterator?: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, before?: Date, after?: Date, withContent?: boolean, withMsg?: boolean, eventTypes?: Array<string>, _options?: Configuration): Observable<ListResponseMessageAttemptOut> {\n        return this.v1MessageAttemptListByEndpointWithHttpInfo(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes, _options).pipe(map((apiResponse: HttpInfo<ListResponseMessageAttemptOut>) => apiResponse.data));\n    }\n\n    /**\n     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts For Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [channel] Filter response based on the channel\n     * @param [tag] Filter response based on the tag\n     * @param [status] Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * @param [before] Only include items created before a certain date\n     * @param [after] Only include items created after a certain date\n     * @param [eventTypes] Filter response based on the event type\n     */\n    public v1MessageAttemptListByEndpointDeprecatedWithHttpInfo(appId: string, msgId: string, endpointId: string, limit?: number, iterator?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, eventTypes?: Array<string>, _options?: Configuration): Observable<HttpInfo<ListResponseMessageAttemptEndpointOut>> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptListByEndpointDeprecated(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptListByEndpointDeprecatedWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts For Endpoint\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [channel] Filter response based on the channel\n     * @param [tag] Filter response based on the tag\n     * @param [status] Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * @param [before] Only include items created before a certain date\n     * @param [after] Only include items created after a certain date\n     * @param [eventTypes] Filter response based on the event type\n     */\n    public v1MessageAttemptListByEndpointDeprecated(appId: string, msgId: string, endpointId: string, limit?: number, iterator?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, eventTypes?: Array<string>, _options?: Configuration): Observable<ListResponseMessageAttemptEndpointOut> {\n        return this.v1MessageAttemptListByEndpointDeprecatedWithHttpInfo(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes, _options).pipe(map((apiResponse: HttpInfo<ListResponseMessageAttemptEndpointOut>) => apiResponse.data));\n    }\n\n    /**\n     * List attempts by message ID.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.\n     * List Attempts By Msg\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [status] Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * @param [statusCodeClass] Filter response based on the HTTP status code\n     * @param [channel] Filter response based on the channel\n     * @param [tag] Filter response based on the tag\n     * @param [endpointId] Filter the attempts based on the attempted endpoint\n     * @param [before] Only include items created before a certain date\n     * @param [after] Only include items created after a certain date\n     * @param [withContent] When &#x60;true&#x60; attempt content is included in the response\n     * @param [eventTypes] Filter response based on the event type\n     */\n    public v1MessageAttemptListByMsgWithHttpInfo(appId: string, msgId: string, limit?: number, iterator?: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, endpointId?: string, before?: Date, after?: Date, withContent?: boolean, eventTypes?: Array<string>, _options?: Configuration): Observable<HttpInfo<ListResponseMessageAttemptOut>> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptListByMsg(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptListByMsgWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * List attempts by message ID.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.\n     * List Attempts By Msg\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [status] Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * @param [statusCodeClass] Filter response based on the HTTP status code\n     * @param [channel] Filter response based on the channel\n     * @param [tag] Filter response based on the tag\n     * @param [endpointId] Filter the attempts based on the attempted endpoint\n     * @param [before] Only include items created before a certain date\n     * @param [after] Only include items created after a certain date\n     * @param [withContent] When &#x60;true&#x60; attempt content is included in the response\n     * @param [eventTypes] Filter response based on the event type\n     */\n    public v1MessageAttemptListByMsg(appId: string, msgId: string, limit?: number, iterator?: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, endpointId?: string, before?: Date, after?: Date, withContent?: boolean, eventTypes?: Array<string>, _options?: Configuration): Observable<ListResponseMessageAttemptOut> {\n        return this.v1MessageAttemptListByMsgWithHttpInfo(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes, _options).pipe(map((apiResponse: HttpInfo<ListResponseMessageAttemptOut>) => apiResponse.data));\n    }\n\n    /**\n     * Deprecated: Please use \\\"List Attempts by Endpoint\\\" and \\\"List Attempts by Msg\\\" instead.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.  `msg_id`: Use a message id or a message `eventId`\n     * List Attempts\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [endpointId] Filter the attempts based on the attempted endpoint\n     * @param [channel] Filter response based on the channel\n     * @param [tag] Filter response based on the tag\n     * @param [status] Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * @param [before] Only include items created before a certain date\n     * @param [after] Only include items created after a certain date\n     * @param [statusCodeClass] Filter response based on the HTTP status code\n     * @param [eventTypes] Filter response based on the event type\n     */\n    public v1MessageAttemptListByMsgDeprecatedWithHttpInfo(appId: string, msgId: string, limit?: number, iterator?: string, endpointId?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, statusCodeClass?: StatusCodeClass, eventTypes?: Array<string>, _options?: Configuration): Observable<HttpInfo<ListResponseMessageAttemptOut>> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptListByMsgDeprecated(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptListByMsgDeprecatedWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Deprecated: Please use \\\"List Attempts by Endpoint\\\" and \\\"List Attempts by Msg\\\" instead.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.  `msg_id`: Use a message id or a message `eventId`\n     * List Attempts\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [endpointId] Filter the attempts based on the attempted endpoint\n     * @param [channel] Filter response based on the channel\n     * @param [tag] Filter response based on the tag\n     * @param [status] Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * @param [before] Only include items created before a certain date\n     * @param [after] Only include items created after a certain date\n     * @param [statusCodeClass] Filter response based on the HTTP status code\n     * @param [eventTypes] Filter response based on the event type\n     */\n    public v1MessageAttemptListByMsgDeprecated(appId: string, msgId: string, limit?: number, iterator?: string, endpointId?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, statusCodeClass?: StatusCodeClass, eventTypes?: Array<string>, _options?: Configuration): Observable<ListResponseMessageAttemptOut> {\n        return this.v1MessageAttemptListByMsgDeprecatedWithHttpInfo(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes, _options).pipe(map((apiResponse: HttpInfo<ListResponseMessageAttemptOut>) => apiResponse.data));\n    }\n\n    /**\n     * Resend a message to the specified endpoint.\n     * Resend Webhook\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1MessageAttemptResendWithHttpInfo(appId: string, msgId: string, endpointId: string, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptResend(appId, msgId, endpointId, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptResendWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Resend a message to the specified endpoint.\n     * Resend Webhook\n     * @param appId The app\\&#39;s ID or UID\n     * @param msgId The msg\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1MessageAttemptResend(appId: string, msgId: string, endpointId: string, idempotencyKey?: string, _options?: Configuration): Observable<void> {\n        return this.v1MessageAttemptResendWithHttpInfo(appId, msgId, endpointId, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n}\n\nimport { StatisticsApiRequestFactory, StatisticsApiResponseProcessor} from \"../apis/StatisticsApi\";\nexport class ObservableStatisticsApi {\n    private requestFactory: StatisticsApiRequestFactory;\n    private responseProcessor: StatisticsApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: StatisticsApiRequestFactory,\n        responseProcessor?: StatisticsApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new StatisticsApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new StatisticsApiResponseProcessor();\n    }\n\n    /**\n     * Creates a background task to calculate the message destinations for all applications in the environment.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.\n     * Aggregate App Stats\n     * @param appUsageStatsIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1StatisticsAggregateAppStatsWithHttpInfo(appUsageStatsIn: AppUsageStatsIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<AppUsageStatsOut>> {\n        const requestContextPromise = this.requestFactory.v1StatisticsAggregateAppStats(appUsageStatsIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StatisticsAggregateAppStatsWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Creates a background task to calculate the message destinations for all applications in the environment.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.\n     * Aggregate App Stats\n     * @param appUsageStatsIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1StatisticsAggregateAppStats(appUsageStatsIn: AppUsageStatsIn, idempotencyKey?: string, _options?: Configuration): Observable<AppUsageStatsOut> {\n        return this.v1StatisticsAggregateAppStatsWithHttpInfo(appUsageStatsIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<AppUsageStatsOut>) => apiResponse.data));\n    }\n\n    /**\n     * Creates a background task to calculate the listed event types for all apps in the organization.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.\n     * Aggregate Event Types\n     */\n    public v1StatisticsAggregateEventTypesWithHttpInfo(_options?: Configuration): Observable<HttpInfo<AggregateEventTypesOut>> {\n        const requestContextPromise = this.requestFactory.v1StatisticsAggregateEventTypes(_options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StatisticsAggregateEventTypesWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Creates a background task to calculate the listed event types for all apps in the organization.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.\n     * Aggregate Event Types\n     */\n    public v1StatisticsAggregateEventTypes(_options?: Configuration): Observable<AggregateEventTypesOut> {\n        return this.v1StatisticsAggregateEventTypesWithHttpInfo(_options).pipe(map((apiResponse: HttpInfo<AggregateEventTypesOut>) => apiResponse.data));\n    }\n\n    /**\n     * Returns application-level statistics on message attempts\n     * Get App Attempt Stats\n     * @param appId The app\\&#39;s ID or UID\n     * @param [startDate] Filter the range to data starting from this date.\n     * @param [endDate] Filter the range to data ending by this date.\n     */\n    public v1StatsAppAttemptsWithHttpInfo(appId: string, startDate?: Date, endDate?: Date, _options?: Configuration): Observable<HttpInfo<AttemptStatisticsResponse>> {\n        const requestContextPromise = this.requestFactory.v1StatsAppAttempts(appId, startDate, endDate, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StatsAppAttemptsWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Returns application-level statistics on message attempts\n     * Get App Attempt Stats\n     * @param appId The app\\&#39;s ID or UID\n     * @param [startDate] Filter the range to data starting from this date.\n     * @param [endDate] Filter the range to data ending by this date.\n     */\n    public v1StatsAppAttempts(appId: string, startDate?: Date, endDate?: Date, _options?: Configuration): Observable<AttemptStatisticsResponse> {\n        return this.v1StatsAppAttemptsWithHttpInfo(appId, startDate, endDate, _options).pipe(map((apiResponse: HttpInfo<AttemptStatisticsResponse>) => apiResponse.data));\n    }\n\n    /**\n     * Returns endpoint-level statistics on message attempts.\n     * Get Ep Stats\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param [startDate] Filter the range to data starting from this date.\n     * @param [endDate] Filter the range to data ending by this date.\n     */\n    public v1StatsEndpointAttemptsWithHttpInfo(appId: string, endpointId: string, startDate?: Date, endDate?: Date, _options?: Configuration): Observable<HttpInfo<AttemptStatisticsResponse>> {\n        const requestContextPromise = this.requestFactory.v1StatsEndpointAttempts(appId, endpointId, startDate, endDate, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StatsEndpointAttemptsWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Returns endpoint-level statistics on message attempts.\n     * Get Ep Stats\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param [startDate] Filter the range to data starting from this date.\n     * @param [endDate] Filter the range to data ending by this date.\n     */\n    public v1StatsEndpointAttempts(appId: string, endpointId: string, startDate?: Date, endDate?: Date, _options?: Configuration): Observable<AttemptStatisticsResponse> {\n        return this.v1StatsEndpointAttemptsWithHttpInfo(appId, endpointId, startDate, endDate, _options).pipe(map((apiResponse: HttpInfo<AttemptStatisticsResponse>) => apiResponse.data));\n    }\n\n}\n\nimport { StreamApiRequestFactory, StreamApiResponseProcessor} from \"../apis/StreamApi\";\nexport class ObservableStreamApi {\n    private requestFactory: StreamApiRequestFactory;\n    private responseProcessor: StreamApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: StreamApiRequestFactory,\n        responseProcessor?: StreamApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new StreamApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new StreamApiResponseProcessor();\n    }\n\n    /**\n     * Creates a new stream.\n     * Create Stream\n     * @param streamIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1StreamCreateWithHttpInfo(streamIn: StreamIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<StreamOut>> {\n        const requestContextPromise = this.requestFactory.v1StreamCreate(streamIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamCreateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Creates a new stream.\n     * Create Stream\n     * @param streamIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1StreamCreate(streamIn: StreamIn, idempotencyKey?: string, _options?: Configuration): Observable<StreamOut> {\n        return this.v1StreamCreateWithHttpInfo(streamIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<StreamOut>) => apiResponse.data));\n    }\n\n    /**\n     * Creates events on the Stream.\n     * Create Events\n     * @param streamId\n     * @param createStreamIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1StreamCreateEventsWithHttpInfo(streamId: string, createStreamIn: CreateStreamIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<any>> {\n        const requestContextPromise = this.requestFactory.v1StreamCreateEvents(streamId, createStreamIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamCreateEventsWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Creates events on the Stream.\n     * Create Events\n     * @param streamId\n     * @param createStreamIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1StreamCreateEvents(streamId: string, createStreamIn: CreateStreamIn, idempotencyKey?: string, _options?: Configuration): Observable<any> {\n        return this.v1StreamCreateEventsWithHttpInfo(streamId, createStreamIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<any>) => apiResponse.data));\n    }\n\n    /**\n     * Delete a stream.\n     * Delete Stream\n     * @param streamId\n     */\n    public v1StreamDeleteWithHttpInfo(streamId: string, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1StreamDelete(streamId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamDeleteWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Delete a stream.\n     * Delete Stream\n     * @param streamId\n     */\n    public v1StreamDelete(streamId: string, _options?: Configuration): Observable<void> {\n        return this.v1StreamDeleteWithHttpInfo(streamId, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Iterate over a stream of events.\n     * Stream Events\n     * @param streamId\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [after]\n     */\n    public v1StreamEventsGetWithHttpInfo(streamId: string, limit?: number, iterator?: string, after?: Date, _options?: Configuration): Observable<HttpInfo<EventStreamOut>> {\n        const requestContextPromise = this.requestFactory.v1StreamEventsGet(streamId, limit, iterator, after, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamEventsGetWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Iterate over a stream of events.\n     * Stream Events\n     * @param streamId\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [after]\n     */\n    public v1StreamEventsGet(streamId: string, limit?: number, iterator?: string, after?: Date, _options?: Configuration): Observable<EventStreamOut> {\n        return this.v1StreamEventsGetWithHttpInfo(streamId, limit, iterator, after, _options).pipe(map((apiResponse: HttpInfo<EventStreamOut>) => apiResponse.data));\n    }\n\n    /**\n     * Get a stream by id or uid.\n     * Get Stream\n     * @param streamId\n     */\n    public v1StreamGetWithHttpInfo(streamId: string, _options?: Configuration): Observable<HttpInfo<StreamOut>> {\n        const requestContextPromise = this.requestFactory.v1StreamGet(streamId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamGetWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get a stream by id or uid.\n     * Get Stream\n     * @param streamId\n     */\n    public v1StreamGet(streamId: string, _options?: Configuration): Observable<StreamOut> {\n        return this.v1StreamGetWithHttpInfo(streamId, _options).pipe(map((apiResponse: HttpInfo<StreamOut>) => apiResponse.data));\n    }\n\n    /**\n     * List of all the organization\\'s streams.\n     * List Streams\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     */\n    public v1StreamListWithHttpInfo(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<HttpInfo<ListResponseStreamOut>> {\n        const requestContextPromise = this.requestFactory.v1StreamList(limit, iterator, order, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamListWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * List of all the organization\\'s streams.\n     * List Streams\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     */\n    public v1StreamList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseStreamOut> {\n        return this.v1StreamListWithHttpInfo(limit, iterator, order, _options).pipe(map((apiResponse: HttpInfo<ListResponseStreamOut>) => apiResponse.data));\n    }\n\n    /**\n     * Partially update a stream.\n     * Patch Stream\n     * @param streamId\n     * @param streamPatch\n     */\n    public v1StreamPatchWithHttpInfo(streamId: string, streamPatch: StreamPatch, _options?: Configuration): Observable<HttpInfo<StreamOut>> {\n        const requestContextPromise = this.requestFactory.v1StreamPatch(streamId, streamPatch, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamPatchWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Partially update a stream.\n     * Patch Stream\n     * @param streamId\n     * @param streamPatch\n     */\n    public v1StreamPatch(streamId: string, streamPatch: StreamPatch, _options?: Configuration): Observable<StreamOut> {\n        return this.v1StreamPatchWithHttpInfo(streamId, streamPatch, _options).pipe(map((apiResponse: HttpInfo<StreamOut>) => apiResponse.data));\n    }\n\n    /**\n     * Update a stream.\n     * Update Stream\n     * @param streamId\n     * @param streamIn\n     */\n    public v1StreamUpdateWithHttpInfo(streamId: string, streamIn: StreamIn, _options?: Configuration): Observable<HttpInfo<StreamOut>> {\n        const requestContextPromise = this.requestFactory.v1StreamUpdate(streamId, streamIn, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamUpdateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Update a stream.\n     * Update Stream\n     * @param streamId\n     * @param streamIn\n     */\n    public v1StreamUpdate(streamId: string, streamIn: StreamIn, _options?: Configuration): Observable<StreamOut> {\n        return this.v1StreamUpdateWithHttpInfo(streamId, streamIn, _options).pipe(map((apiResponse: HttpInfo<StreamOut>) => apiResponse.data));\n    }\n\n}\n\nimport { StreamEventTypesApiRequestFactory, StreamEventTypesApiResponseProcessor} from \"../apis/StreamEventTypesApi\";\nexport class ObservableStreamEventTypesApi {\n    private requestFactory: StreamEventTypesApiRequestFactory;\n    private responseProcessor: StreamEventTypesApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: StreamEventTypesApiRequestFactory,\n        responseProcessor?: StreamEventTypesApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new StreamEventTypesApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new StreamEventTypesApiResponseProcessor();\n    }\n\n    /**\n     * Create an event type for Streams.\n     * Create Stream Event Type\n     * @param streamEventTypeIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1StreamEventTypeCreateWithHttpInfo(streamEventTypeIn: StreamEventTypeIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<StreamEventTypeOut>> {\n        const requestContextPromise = this.requestFactory.v1StreamEventTypeCreate(streamEventTypeIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamEventTypeCreateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Create an event type for Streams.\n     * Create Stream Event Type\n     * @param streamEventTypeIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1StreamEventTypeCreate(streamEventTypeIn: StreamEventTypeIn, idempotencyKey?: string, _options?: Configuration): Observable<StreamEventTypeOut> {\n        return this.v1StreamEventTypeCreateWithHttpInfo(streamEventTypeIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<StreamEventTypeOut>) => apiResponse.data));\n    }\n\n    /**\n     * Delete an event type.\n     * Delete Stream Event Type\n     * @param name The event type\\&#39;s name\n     */\n    public v1StreamEventTypeDeleteWithHttpInfo(name: string, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1StreamEventTypeDelete(name, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamEventTypeDeleteWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Delete an event type.\n     * Delete Stream Event Type\n     * @param name The event type\\&#39;s name\n     */\n    public v1StreamEventTypeDelete(name: string, _options?: Configuration): Observable<void> {\n        return this.v1StreamEventTypeDeleteWithHttpInfo(name, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Get an event type.\n     * Get Stream Event Type\n     * @param name The event type\\&#39;s name\n     */\n    public v1StreamEventTypeGetWithHttpInfo(name: string, _options?: Configuration): Observable<HttpInfo<StreamEventTypeOut>> {\n        const requestContextPromise = this.requestFactory.v1StreamEventTypeGet(name, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamEventTypeGetWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get an event type.\n     * Get Stream Event Type\n     * @param name The event type\\&#39;s name\n     */\n    public v1StreamEventTypeGet(name: string, _options?: Configuration): Observable<StreamEventTypeOut> {\n        return this.v1StreamEventTypeGetWithHttpInfo(name, _options).pipe(map((apiResponse: HttpInfo<StreamEventTypeOut>) => apiResponse.data));\n    }\n\n    /**\n     * List of all the organization\\'s event types for streaming.\n     * List Stream Event Types\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     */\n    public v1StreamEventTypeListWithHttpInfo(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<HttpInfo<ListResponseStreamEventTypeOut>> {\n        const requestContextPromise = this.requestFactory.v1StreamEventTypeList(limit, iterator, order, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamEventTypeListWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * List of all the organization\\'s event types for streaming.\n     * List Stream Event Types\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     */\n    public v1StreamEventTypeList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseStreamEventTypeOut> {\n        return this.v1StreamEventTypeListWithHttpInfo(limit, iterator, order, _options).pipe(map((apiResponse: HttpInfo<ListResponseStreamEventTypeOut>) => apiResponse.data));\n    }\n\n    /**\n     * Patch an event type for Streams.\n     * Patch Stream Event Type\n     * @param name The event type\\&#39;s name\n     * @param streamEventTypePatch\n     */\n    public v1StreamEventTypePatchWithHttpInfo(name: string, streamEventTypePatch: StreamEventTypePatch, _options?: Configuration): Observable<HttpInfo<StreamEventTypeOut>> {\n        const requestContextPromise = this.requestFactory.v1StreamEventTypePatch(name, streamEventTypePatch, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamEventTypePatchWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Patch an event type for Streams.\n     * Patch Stream Event Type\n     * @param name The event type\\&#39;s name\n     * @param streamEventTypePatch\n     */\n    public v1StreamEventTypePatch(name: string, streamEventTypePatch: StreamEventTypePatch, _options?: Configuration): Observable<StreamEventTypeOut> {\n        return this.v1StreamEventTypePatchWithHttpInfo(name, streamEventTypePatch, _options).pipe(map((apiResponse: HttpInfo<StreamEventTypeOut>) => apiResponse.data));\n    }\n\n    /**\n     * Update or create a event type for Streams.\n     * Update Stream Event Type\n     * @param name The event type\\&#39;s name\n     * @param streamEventTypeIn\n     */\n    public v1StreamEventTypeUpdateWithHttpInfo(name: string, streamEventTypeIn: StreamEventTypeIn, _options?: Configuration): Observable<HttpInfo<StreamEventTypeOut>> {\n        const requestContextPromise = this.requestFactory.v1StreamEventTypeUpdate(name, streamEventTypeIn, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamEventTypeUpdateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Update or create a event type for Streams.\n     * Update Stream Event Type\n     * @param name The event type\\&#39;s name\n     * @param streamEventTypeIn\n     */\n    public v1StreamEventTypeUpdate(name: string, streamEventTypeIn: StreamEventTypeIn, _options?: Configuration): Observable<StreamEventTypeOut> {\n        return this.v1StreamEventTypeUpdateWithHttpInfo(name, streamEventTypeIn, _options).pipe(map((apiResponse: HttpInfo<StreamEventTypeOut>) => apiResponse.data));\n    }\n\n}\n\nimport { TransformationTemplateApiRequestFactory, TransformationTemplateApiResponseProcessor} from \"../apis/TransformationTemplateApi\";\nexport class ObservableTransformationTemplateApi {\n    private requestFactory: TransformationTemplateApiRequestFactory;\n    private responseProcessor: TransformationTemplateApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: TransformationTemplateApiRequestFactory,\n        responseProcessor?: TransformationTemplateApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new TransformationTemplateApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new TransformationTemplateApiResponseProcessor();\n    }\n\n    /**\n     * Create/update endpoint Hubspot OAuth configuration Specific private endpoint just for us, to avoid exposing the Hubspot secret to the client.\n     * Update Hubspot Oauth Config\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param hubspotOauthConfigIn\n     */\n    public v1EndpointUpdateHubspotOauthConfigWithHttpInfo(appId: string, endpointId: string, hubspotOauthConfigIn: HubspotOauthConfigIn, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1EndpointUpdateHubspotOauthConfig(appId, endpointId, hubspotOauthConfigIn, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointUpdateHubspotOauthConfigWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Create/update endpoint Hubspot OAuth configuration Specific private endpoint just for us, to avoid exposing the Hubspot secret to the client.\n     * Update Hubspot Oauth Config\n     * @param appId The app\\&#39;s ID or UID\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param hubspotOauthConfigIn\n     */\n    public v1EndpointUpdateHubspotOauthConfig(appId: string, endpointId: string, hubspotOauthConfigIn: HubspotOauthConfigIn, _options?: Configuration): Observable<void> {\n        return this.v1EndpointUpdateHubspotOauthConfigWithHttpInfo(appId, endpointId, hubspotOauthConfigIn, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Create a new transformation template.\n     * Create Transformation Template\n     * @param templateIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1TransformationTemplateCreateWithHttpInfo(templateIn: TemplateIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<TemplateOut>> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateCreate(templateIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateCreateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Create a new transformation template.\n     * Create Transformation Template\n     * @param templateIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1TransformationTemplateCreate(templateIn: TemplateIn, idempotencyKey?: string, _options?: Configuration): Observable<TemplateOut> {\n        return this.v1TransformationTemplateCreateWithHttpInfo(templateIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<TemplateOut>) => apiResponse.data));\n    }\n\n    /**\n     * Delete a transformation template.\n     * Delete Transformation Template\n     * @param transformationTemplateId\n     */\n    public v1TransformationTemplateDeleteWithHttpInfo(transformationTemplateId: string, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateDelete(transformationTemplateId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateDeleteWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Delete a transformation template.\n     * Delete Transformation Template\n     * @param transformationTemplateId\n     */\n    public v1TransformationTemplateDelete(transformationTemplateId: string, _options?: Configuration): Observable<void> {\n        return this.v1TransformationTemplateDeleteWithHttpInfo(transformationTemplateId, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Use OpenAI\\'s Completion API to generate code for a transformation template.\n     * Generate\n     * @param generateIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1TransformationTemplateGenerateWithHttpInfo(generateIn: GenerateIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<GenerateOut>> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateGenerate(generateIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateGenerateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Use OpenAI\\'s Completion API to generate code for a transformation template.\n     * Generate\n     * @param generateIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1TransformationTemplateGenerate(generateIn: GenerateIn, idempotencyKey?: string, _options?: Configuration): Observable<GenerateOut> {\n        return this.v1TransformationTemplateGenerateWithHttpInfo(generateIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<GenerateOut>) => apiResponse.data));\n    }\n\n    /**\n     * Get a transformation template.\n     * Get Transformation Template\n     * @param transformationTemplateId\n     */\n    public v1TransformationTemplateGetWithHttpInfo(transformationTemplateId: string, _options?: Configuration): Observable<HttpInfo<TemplateOut>> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateGet(transformationTemplateId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateGetWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get a transformation template.\n     * Get Transformation Template\n     * @param transformationTemplateId\n     */\n    public v1TransformationTemplateGet(transformationTemplateId: string, _options?: Configuration): Observable<TemplateOut> {\n        return this.v1TransformationTemplateGetWithHttpInfo(transformationTemplateId, _options).pipe(map((apiResponse: HttpInfo<TemplateOut>) => apiResponse.data));\n    }\n\n    /**\n     * List all transformation templates for an application.\n     * List Transformation Templates\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     */\n    public v1TransformationTemplateListWithHttpInfo(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<HttpInfo<ListResponseTemplateOut>> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateList(limit, iterator, order, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateListWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * List all transformation templates for an application.\n     * List Transformation Templates\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     */\n    public v1TransformationTemplateList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseTemplateOut> {\n        return this.v1TransformationTemplateListWithHttpInfo(limit, iterator, order, _options).pipe(map((apiResponse: HttpInfo<ListResponseTemplateOut>) => apiResponse.data));\n    }\n\n    /**\n     * Get Discord Incoming webhook URL.\n     * Authorize Discord\n     * @param oAuthPayloadIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1TransformationTemplateOauthDiscordWithHttpInfo(oAuthPayloadIn: OAuthPayloadIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<IncomingWebhookPayloadOut>> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateOauthDiscord(oAuthPayloadIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateOauthDiscordWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get Discord Incoming webhook URL.\n     * Authorize Discord\n     * @param oAuthPayloadIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1TransformationTemplateOauthDiscord(oAuthPayloadIn: OAuthPayloadIn, idempotencyKey?: string, _options?: Configuration): Observable<IncomingWebhookPayloadOut> {\n        return this.v1TransformationTemplateOauthDiscordWithHttpInfo(oAuthPayloadIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<IncomingWebhookPayloadOut>) => apiResponse.data));\n    }\n\n    /**\n     * Get Hubspot access token using authorization code.\n     * Authorize Hubspot\n     * @param oAuthPayloadIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1TransformationTemplateOauthHubspotWithHttpInfo(oAuthPayloadIn: OAuthPayloadIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<OAuthPayloadOut>> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateOauthHubspot(oAuthPayloadIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateOauthHubspotWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get Hubspot access token using authorization code.\n     * Authorize Hubspot\n     * @param oAuthPayloadIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1TransformationTemplateOauthHubspot(oAuthPayloadIn: OAuthPayloadIn, idempotencyKey?: string, _options?: Configuration): Observable<OAuthPayloadOut> {\n        return this.v1TransformationTemplateOauthHubspotWithHttpInfo(oAuthPayloadIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<OAuthPayloadOut>) => apiResponse.data));\n    }\n\n    /**\n     * Get Slack Incoming webhook URL.\n     * Authorize Slack\n     * @param oAuthPayloadIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1TransformationTemplateOauthSlackWithHttpInfo(oAuthPayloadIn: OAuthPayloadIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<IncomingWebhookPayloadOut>> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateOauthSlack(oAuthPayloadIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateOauthSlackWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get Slack Incoming webhook URL.\n     * Authorize Slack\n     * @param oAuthPayloadIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1TransformationTemplateOauthSlack(oAuthPayloadIn: OAuthPayloadIn, idempotencyKey?: string, _options?: Configuration): Observable<IncomingWebhookPayloadOut> {\n        return this.v1TransformationTemplateOauthSlackWithHttpInfo(oAuthPayloadIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<IncomingWebhookPayloadOut>) => apiResponse.data));\n    }\n\n    /**\n     * Partially update a transformation template.\n     * Patch Transformation Template\n     * @param transformationTemplateId\n     * @param templatePatch\n     */\n    public v1TransformationTemplatePatchWithHttpInfo(transformationTemplateId: string, templatePatch: TemplatePatch, _options?: Configuration): Observable<HttpInfo<TemplateOut>> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplatePatch(transformationTemplateId, templatePatch, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplatePatchWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Partially update a transformation template.\n     * Patch Transformation Template\n     * @param transformationTemplateId\n     * @param templatePatch\n     */\n    public v1TransformationTemplatePatch(transformationTemplateId: string, templatePatch: TemplatePatch, _options?: Configuration): Observable<TemplateOut> {\n        return this.v1TransformationTemplatePatchWithHttpInfo(transformationTemplateId, templatePatch, _options).pipe(map((apiResponse: HttpInfo<TemplateOut>) => apiResponse.data));\n    }\n\n    /**\n     * Simulate running the transformation on the payload and code.\n     * Simulate\n     * @param transformationSimulateIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1TransformationTemplateSimulateWithHttpInfo(transformationSimulateIn: TransformationSimulateIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<TransformationSimulateOut>> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateSimulate(transformationSimulateIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateSimulateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Simulate running the transformation on the payload and code.\n     * Simulate\n     * @param transformationSimulateIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public v1TransformationTemplateSimulate(transformationSimulateIn: TransformationSimulateIn, idempotencyKey?: string, _options?: Configuration): Observable<TransformationSimulateOut> {\n        return this.v1TransformationTemplateSimulateWithHttpInfo(transformationSimulateIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<TransformationSimulateOut>) => apiResponse.data));\n    }\n\n    /**\n     * Update a transformation template.\n     * Update Transformation Template\n     * @param transformationTemplateId\n     * @param templateUpdate\n     */\n    public v1TransformationTemplateUpdateWithHttpInfo(transformationTemplateId: string, templateUpdate: TemplateUpdate, _options?: Configuration): Observable<HttpInfo<TemplateOut>> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateUpdate(transformationTemplateId, templateUpdate, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateUpdateWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Update a transformation template.\n     * Update Transformation Template\n     * @param transformationTemplateId\n     * @param templateUpdate\n     */\n    public v1TransformationTemplateUpdate(transformationTemplateId: string, templateUpdate: TemplateUpdate, _options?: Configuration): Observable<TemplateOut> {\n        return this.v1TransformationTemplateUpdateWithHttpInfo(transformationTemplateId, templateUpdate, _options).pipe(map((apiResponse: HttpInfo<TemplateOut>) => apiResponse.data));\n    }\n\n}\n\nimport { WebhookEndpointApiRequestFactory, WebhookEndpointApiResponseProcessor} from \"../apis/WebhookEndpointApi\";\nexport class ObservableWebhookEndpointApi {\n    private requestFactory: WebhookEndpointApiRequestFactory;\n    private responseProcessor: WebhookEndpointApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: WebhookEndpointApiRequestFactory,\n        responseProcessor?: WebhookEndpointApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new WebhookEndpointApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new WebhookEndpointApiResponseProcessor();\n    }\n\n    /**\n     * Create an operational webhook endpoint.\n     * Create Operational Webhook Endpoint\n     * @param operationalWebhookEndpointIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public createOperationalWebhookEndpointWithHttpInfo(operationalWebhookEndpointIn: OperationalWebhookEndpointIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<OperationalWebhookEndpointOut>> {\n        const requestContextPromise = this.requestFactory.createOperationalWebhookEndpoint(operationalWebhookEndpointIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.createOperationalWebhookEndpointWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Create an operational webhook endpoint.\n     * Create Operational Webhook Endpoint\n     * @param operationalWebhookEndpointIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public createOperationalWebhookEndpoint(operationalWebhookEndpointIn: OperationalWebhookEndpointIn, idempotencyKey?: string, _options?: Configuration): Observable<OperationalWebhookEndpointOut> {\n        return this.createOperationalWebhookEndpointWithHttpInfo(operationalWebhookEndpointIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<OperationalWebhookEndpointOut>) => apiResponse.data));\n    }\n\n    /**\n     * Delete an operational webhook endpoint.\n     * Delete Operational Webhook Endpoint\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public deleteOperationalWebhookEndpointWithHttpInfo(endpointId: string, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.deleteOperationalWebhookEndpoint(endpointId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.deleteOperationalWebhookEndpointWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Delete an operational webhook endpoint.\n     * Delete Operational Webhook Endpoint\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public deleteOperationalWebhookEndpoint(endpointId: string, _options?: Configuration): Observable<void> {\n        return this.deleteOperationalWebhookEndpointWithHttpInfo(endpointId, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Get an operational webhook endpoint.\n     * Get Operational Webhook Endpoint\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public getOperationalWebhookEndpointWithHttpInfo(endpointId: string, _options?: Configuration): Observable<HttpInfo<OperationalWebhookEndpointOut>> {\n        const requestContextPromise = this.requestFactory.getOperationalWebhookEndpoint(endpointId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getOperationalWebhookEndpointWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get an operational webhook endpoint.\n     * Get Operational Webhook Endpoint\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public getOperationalWebhookEndpoint(endpointId: string, _options?: Configuration): Observable<OperationalWebhookEndpointOut> {\n        return this.getOperationalWebhookEndpointWithHttpInfo(endpointId, _options).pipe(map((apiResponse: HttpInfo<OperationalWebhookEndpointOut>) => apiResponse.data));\n    }\n\n    /**\n     * Get an operational webhook endpoint\\'s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).\n     * Get Operational Webhook Endpoint Secret\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public getOperationalWebhookEndpointSecretWithHttpInfo(endpointId: string, _options?: Configuration): Observable<HttpInfo<OperationalWebhookEndpointSecretOut>> {\n        const requestContextPromise = this.requestFactory.getOperationalWebhookEndpointSecret(endpointId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getOperationalWebhookEndpointSecretWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Get an operational webhook endpoint\\'s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).\n     * Get Operational Webhook Endpoint Secret\n     * @param endpointId The ep\\&#39;s ID or UID\n     */\n    public getOperationalWebhookEndpointSecret(endpointId: string, _options?: Configuration): Observable<OperationalWebhookEndpointSecretOut> {\n        return this.getOperationalWebhookEndpointSecretWithHttpInfo(endpointId, _options).pipe(map((apiResponse: HttpInfo<OperationalWebhookEndpointSecretOut>) => apiResponse.data));\n    }\n\n    /**\n     * List operational webhook endpoints.\n     * List Operational Webhook Endpoints\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     */\n    public listOperationalWebhookEndpointsWithHttpInfo(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<HttpInfo<ListResponseOperationalWebhookEndpointOut>> {\n        const requestContextPromise = this.requestFactory.listOperationalWebhookEndpoints(limit, iterator, order, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.listOperationalWebhookEndpointsWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * List operational webhook endpoints.\n     * List Operational Webhook Endpoints\n     * @param [limit] Limit the number of returned items\n     * @param [iterator] The iterator returned from a prior invocation\n     * @param [order] The sorting order of the returned items\n     */\n    public listOperationalWebhookEndpoints(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseOperationalWebhookEndpointOut> {\n        return this.listOperationalWebhookEndpointsWithHttpInfo(limit, iterator, order, _options).pipe(map((apiResponse: HttpInfo<ListResponseOperationalWebhookEndpointOut>) => apiResponse.data));\n    }\n\n    /**\n     * Rotates an operational webhook endpoint\\'s signing secret.  The previous secret will remain valid for the next 24 hours.\n     * Rotate Operational Webhook Endpoint Secret\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param operationalWebhookEndpointSecretIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public rotateOperationalWebhookEndpointSecretWithHttpInfo(endpointId: string, operationalWebhookEndpointSecretIn: OperationalWebhookEndpointSecretIn, idempotencyKey?: string, _options?: Configuration): Observable<HttpInfo<void>> {\n        const requestContextPromise = this.requestFactory.rotateOperationalWebhookEndpointSecret(endpointId, operationalWebhookEndpointSecretIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.rotateOperationalWebhookEndpointSecretWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Rotates an operational webhook endpoint\\'s signing secret.  The previous secret will remain valid for the next 24 hours.\n     * Rotate Operational Webhook Endpoint Secret\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param operationalWebhookEndpointSecretIn\n     * @param [idempotencyKey] The request\\&#39;s idempotency key\n     */\n    public rotateOperationalWebhookEndpointSecret(endpointId: string, operationalWebhookEndpointSecretIn: OperationalWebhookEndpointSecretIn, idempotencyKey?: string, _options?: Configuration): Observable<void> {\n        return this.rotateOperationalWebhookEndpointSecretWithHttpInfo(endpointId, operationalWebhookEndpointSecretIn, idempotencyKey, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));\n    }\n\n    /**\n     * Update an operational webhook endpoint.\n     * Update Operational Webhook Endpoint\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param operationalWebhookEndpointUpdate\n     */\n    public updateOperationalWebhookEndpointWithHttpInfo(endpointId: string, operationalWebhookEndpointUpdate: OperationalWebhookEndpointUpdate, _options?: Configuration): Observable<HttpInfo<OperationalWebhookEndpointOut>> {\n        const requestContextPromise = this.requestFactory.updateOperationalWebhookEndpoint(endpointId, operationalWebhookEndpointUpdate, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (const middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (const middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.updateOperationalWebhookEndpointWithHttpInfo(rsp)));\n            }));\n    }\n\n    /**\n     * Update an operational webhook endpoint.\n     * Update Operational Webhook Endpoint\n     * @param endpointId The ep\\&#39;s ID or UID\n     * @param operationalWebhookEndpointUpdate\n     */\n    public updateOperationalWebhookEndpoint(endpointId: string, operationalWebhookEndpointUpdate: OperationalWebhookEndpointUpdate, _options?: Configuration): Observable<OperationalWebhookEndpointOut> {\n        return this.updateOperationalWebhookEndpointWithHttpInfo(endpointId, operationalWebhookEndpointUpdate, _options).pipe(map((apiResponse: HttpInfo<OperationalWebhookEndpointOut>) => apiResponse.data));\n    }\n\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAA,oCAAmD;AACnD,MAAA,oCAA2C;AAgM3C,MAAA,qDAAsG;AACtG,MAAa,wBAAwB;IAKjC,YACI,aAA4B,EAC5B,cAA6C,EAC7C,iBAAmD,CAAA;QAEnD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,iBAAA,4BAA4B,CAAC,aAAa,CAAC,CAAC;QACxF,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,iBAAA,+BAA+B,EAAE,CAAC;IACxF,CAAC;IAUM,iDAAiD,CAAC,KAAW,EAAE,KAAW,EAAE,KAAc,EAAE,QAAiB,EAAE,QAAwB,EAAA;QAC1I,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,qCAAqC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAGjI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,iDAAiD,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACvJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAUM,qCAAqC,CAAC,KAAW,EAAE,KAAW,EAAE,KAAc,EAAE,QAAiB,EAAE,QAAwB,EAAA;QAC9H,OAAO,IAAI,CAAC,iDAAiD,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAmD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAChM,CAAC;IASM,+BAA+B,CAAC,aAA4B,EAAE,WAAqB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACzI,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,aAAa,EAAE,WAAW,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAG5H,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,+BAA+B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,mBAAmB,CAAC,aAA4B,EAAE,WAAqB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC7H,OAAO,IAAI,CAAC,+BAA+B,CAAC,aAAa,EAAE,WAAW,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAqC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7K,CAAC;IAOM,+BAA+B,CAAC,KAAa,EAAE,QAAwB,EAAA;QAC1E,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAGvF,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,+BAA+B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAOM,mBAAmB,CAAC,KAAa,EAAE,QAAwB,EAAA;QAC9D,OAAO,IAAI,CAAC,+BAA+B,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9H,CAAC;IAOM,4BAA4B,CAAC,KAAa,EAAE,QAAwB,EAAA;QACvE,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAGpF,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,4BAA4B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAOM,gBAAgB,CAAC,KAAa,EAAE,QAAwB,EAAA;QAC3D,OAAO,IAAI,CAAC,4BAA4B,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAqC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACrI,CAAC;IASM,iCAAiC,CAAC,KAAW,EAAE,KAAW,EAAE,KAAa,EAAE,QAAwB,EAAA;QACtG,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAGvG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,iCAAiC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACvI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,qBAAqB,CAAC,KAAW,EAAE,KAAW,EAAE,KAAa,EAAE,QAAwB,EAAA;QAC1F,OAAO,IAAI,CAAC,iCAAiC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAuC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1J,CAAC;IASM,6BAA6B,CAAC,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;QAC9G,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAGtG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,6BAA6B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACnI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,iBAAiB,CAAC,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;QAClG,OAAO,IAAI,CAAC,6BAA6B,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAiD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACnK,CAAC;IAQM,8BAA8B,CAAC,KAAa,EAAE,gBAAkC,EAAE,QAAwB,EAAA;QAC7G,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,KAAK,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC;QAGxG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,8BAA8B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACpI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,kBAAkB,CAAC,KAAa,EAAE,gBAAkC,EAAE,QAAwB,EAAA;QACjG,OAAO,IAAI,CAAC,8BAA8B,CAAC,KAAK,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAqC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACzJ,CAAC;IAQM,+BAA+B,CAAC,KAAa,EAAE,aAA4B,EAAE,QAAwB,EAAA;QACxG,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,KAAK,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;QAGtG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,+BAA+B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,mBAAmB,CAAC,KAAa,EAAE,aAA4B,EAAE,QAAwB,EAAA;QAC5F,OAAO,IAAI,CAAC,+BAA+B,CAAC,KAAK,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAqC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACvJ,CAAC;CAEJ;AA7SD,QAAA,wBAAA,GAAA,yBA6SC;AAED,MAAA,2DAA+G;AAC/G,MAAa,2BAA2B;IAKpC,YACI,aAA4B,EAC5B,cAAgD,EAChD,iBAAsD,CAAA;QAEtD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,oBAAA,+BAA+B,CAAC,aAAa,CAAC,CAAC;QAC3F,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,oBAAA,kCAAkC,EAAE,CAAC;IAC3F,CAAC;IASM,2CAA2C,CAAC,KAAa,EAAE,iBAAoC,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACrJ,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,+BAA+B,CAAC,KAAK,EAAE,iBAAiB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGtI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,2CAA2C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACjJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,+BAA+B,CAAC,KAAa,EAAE,iBAAoC,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACzI,OAAO,IAAI,CAAC,2CAA2C,CAAC,KAAK,EAAE,iBAAiB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAyC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3L,CAAC;IASM,8CAA8C,CAAC,KAAa,EAAE,aAA4B,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAChJ,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,kCAAkC,CAAC,KAAK,EAAE,aAAa,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGrI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,8CAA8C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACpJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,kCAAkC,CAAC,KAAa,EAAE,aAA4B,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACpI,OAAO,IAAI,CAAC,8CAA8C,CAAC,KAAK,EAAE,aAAa,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAmC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACpL,CAAC;IAQM,2CAA2C,CAAC,KAAa,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC/G,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,+BAA+B,CAAC,KAAK,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGnH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,2CAA2C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACjJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,+BAA+B,CAAC,KAAa,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACnG,OAAO,IAAI,CAAC,2CAA2C,CAAC,KAAK,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAyC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACxK,CAAC;IAQM,gDAAgD,CAAC,cAA8B,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACrI,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,oCAAoC,CAAC,cAAc,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGjI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,gDAAgD,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACtJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,oCAAoC,CAAC,cAA8B,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACzH,OAAO,IAAI,CAAC,gDAAgD,CAAC,cAAc,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAsC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACnL,CAAC;IASM,qCAAqC,CAAC,KAAa,EAAE,wBAAkD,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC7J,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,yBAAyB,CAAC,KAAK,EAAE,wBAAwB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGvI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,qCAAqC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC3I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,yBAAyB,CAAC,KAAa,EAAE,wBAAkD,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACjJ,OAAO,IAAI,CAAC,qCAAqC,CAAC,KAAK,EAAE,wBAAwB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9K,CAAC;IAQM,0CAA0C,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAwB,EAAA;QACzG,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,8BAA8B,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAG9G,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,0CAA0C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,8BAA8B,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAwB,EAAA;QAC7F,OAAO,IAAI,CAAC,0CAA0C,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAmC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7J,CAAC;IAOM,kCAAkC,CAAC,cAAuB,EAAE,QAAwB,EAAA;QACvF,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGnG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,kCAAkC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACxI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAOM,sBAAsB,CAAC,cAAuB,EAAE,QAAwB,EAAA;QAC3E,OAAO,IAAI,CAAC,kCAAkC,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1I,CAAC;IAUM,6CAA6C,CAAC,KAAa,EAAE,UAAkB,EAAE,mBAAwC,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC/K,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,iCAAiC,CAAC,KAAK,EAAE,UAAU,EAAE,mBAAmB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGtJ,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,6CAA6C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACnJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAUM,iCAAiC,CAAC,KAAa,EAAE,UAAkB,EAAE,mBAAwC,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACnK,OAAO,IAAI,CAAC,6CAA6C,CAAC,KAAK,EAAE,UAAU,EAAE,mBAAmB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAmC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACrM,CAAC;CAEJ;AA/SD,QAAA,2BAAA,GAAA,4BA+SC;AAED,MAAA,6DAAkH;AAClH,MAAa,4BAA4B;IAKrC,YACI,aAA4B,EAC5B,cAAiD,EACjD,iBAAuD,CAAA;QAEvD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,qBAAA,gCAAgC,CAAC,aAAa,CAAC,CAAC;QAC5F,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,qBAAA,mCAAmC,EAAE,CAAC;IAC5F,CAAC;IAOM,6BAA6B,CAAC,MAAc,EAAE,QAAwB,EAAA;QACzE,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAGtF,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,6BAA6B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACnI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAOM,iBAAiB,CAAC,MAAc,EAAE,QAAwB,EAAA;QAC7D,OAAO,IAAI,CAAC,6BAA6B,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAwC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1I,CAAC;IAWM,+BAA+B,CAAC,MAA6B,EAAE,IAAyB,EAAE,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;QAC1K,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAGtH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,+BAA+B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAWM,mBAAmB,CAAC,MAA6B,EAAE,IAAyB,EAAE,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;QAC9J,OAAO,IAAI,CAAC,+BAA+B,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAoD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACtL,CAAC;CAEJ;AAzFD,QAAA,4BAAA,GAAA,6BAyFC;AAED,MAAA,iDAAgG;AAChG,MAAa,sBAAsB;IAK/B,YACI,aAA4B,EAC5B,cAA2C,EAC3C,iBAAiD,CAAA;QAEjD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,eAAA,0BAA0B,CAAC,aAAa,CAAC,CAAC;QACtF,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,eAAA,6BAA6B,EAAE,CAAC;IACtF,CAAC;IAQM,kCAAkC,CAAC,kBAAsC,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC/H,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,kBAAkB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGvH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,kCAAkC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACxI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,sBAAsB,CAAC,kBAAsC,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACnH,OAAO,IAAI,CAAC,kCAAkC,CAAC,kBAAkB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA0C,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7K,CAAC;CAEJ;AAlDD,QAAA,sBAAA,GAAA,uBAkDC;AAED,MAAA,+CAA6F;AAC7F,MAAa,qBAAqB;IAK9B,YACI,aAA4B,EAC5B,cAA0C,EAC1C,iBAAgD,CAAA;QAEhD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,cAAA,yBAAyB,CAAC,aAAa,CAAC,CAAC;QACrF,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,cAAA,4BAA4B,EAAE,CAAC;IACrF,CAAC;IASM,4BAA4B,CAAC,KAAa,EAAE,UAAsB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACxH,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,KAAK,EAAE,UAAU,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGhH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,4BAA4B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,gBAAgB,CAAC,KAAa,EAAE,UAAsB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC5G,OAAO,IAAI,CAAC,4BAA4B,CAAC,KAAK,EAAE,UAAU,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAkC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9J,CAAC;IAQM,4BAA4B,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAwB,EAAA;QAC3F,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAGhG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,4BAA4B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,gBAAgB,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAwB,EAAA;QAC/E,OAAO,IAAI,CAAC,4BAA4B,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACvI,CAAC;IAQM,sCAAsC,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAwB,EAAA;QACrG,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,0BAA0B,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAG1G,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,sCAAsC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,0BAA0B,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAwB,EAAA;QACzF,OAAO,IAAI,CAAC,sCAAsC,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACjJ,CAAC;IAQM,uCAAuC,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAwB,EAAA;QACtG,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,2BAA2B,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAG3G,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,uCAAuC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,2BAA2B,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAwB,EAAA;QAC1F,OAAO,IAAI,CAAC,uCAAuC,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAClJ,CAAC;IAQM,yBAAyB,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAwB,EAAA;QACxF,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAG7F,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC/H,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,aAAa,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAwB,EAAA;QAC5E,OAAO,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAkC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3I,CAAC;IAQM,gCAAgC,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAwB,EAAA;QAC/F,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAGpG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,gCAAgC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACtI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,oBAAoB,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAwB,EAAA;QACnF,OAAO,IAAI,CAAC,gCAAgC,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAyC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACzJ,CAAC;IAQM,+BAA+B,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAwB,EAAA;QAC9F,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAGnG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,+BAA+B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,mBAAmB,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAwB,EAAA;QAClF,OAAO,IAAI,CAAC,+BAA+B,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAwC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACvJ,CAAC;IAUM,8BAA8B,CAAC,KAAa,EAAE,UAAkB,EAAE,KAAY,EAAE,KAAY,EAAE,QAAwB,EAAA;QACzH,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAGhH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,8BAA8B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACpI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAUM,kBAAkB,CAAC,KAAa,EAAE,UAAkB,EAAE,KAAY,EAAE,KAAY,EAAE,QAAwB,EAAA;QAC7G,OAAO,IAAI,CAAC,8BAA8B,CAAC,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAoC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAChK,CAAC;IAUM,0BAA0B,CAAC,KAAa,EAAE,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;QAC1H,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAG1G,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAUM,cAAc,CAAC,KAAa,EAAE,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;QAC9G,OAAO,IAAI,CAAC,0BAA0B,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA8C,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACpK,CAAC;IASM,2BAA2B,CAAC,KAAa,EAAE,UAAkB,EAAE,aAA4B,EAAE,QAAwB,EAAA;QACxH,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,KAAK,EAAE,UAAU,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;QAG9G,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,2BAA2B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACjI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,eAAe,CAAC,KAAa,EAAE,UAAkB,EAAE,aAA4B,EAAE,QAAwB,EAAA;QAC5G,OAAO,IAAI,CAAC,2BAA2B,CAAC,KAAK,EAAE,UAAU,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAkC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5J,CAAC;IASM,kCAAkC,CAAC,KAAa,EAAE,UAAkB,EAAE,sBAA8C,EAAE,QAAwB,EAAA;QACjJ,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,KAAK,EAAE,UAAU,EAAE,sBAAsB,EAAE,QAAQ,CAAC,CAAC;QAG9H,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,kCAAkC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACxI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,sBAAsB,CAAC,KAAa,EAAE,UAAkB,EAAE,sBAA8C,EAAE,QAAwB,EAAA;QACrI,OAAO,IAAI,CAAC,kCAAkC,CAAC,KAAK,EAAE,UAAU,EAAE,sBAAsB,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACrK,CAAC;IAUM,6BAA6B,CAAC,KAAa,EAAE,UAAkB,EAAE,SAAoB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC3I,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAG5H,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,6BAA6B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACnI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAUM,iBAAiB,CAAC,KAAa,EAAE,UAAkB,EAAE,SAAoB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC/H,OAAO,IAAI,CAAC,6BAA6B,CAAC,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAiC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACzK,CAAC;IAUM,mCAAmC,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAkB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC/I,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGjI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,mCAAmC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAUM,uBAAuB,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAkB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACnI,OAAO,IAAI,CAAC,mCAAmC,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAgC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7K,CAAC;IAUM,kCAAkC,CAAC,KAAa,EAAE,UAAkB,EAAE,sBAA8C,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC1K,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,KAAK,EAAE,UAAU,EAAE,sBAAsB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAG9I,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,kCAAkC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACxI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAUM,sBAAsB,CAAC,KAAa,EAAE,UAAkB,EAAE,sBAA8C,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC9J,OAAO,IAAI,CAAC,kCAAkC,CAAC,KAAK,EAAE,UAAU,EAAE,sBAAsB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACrL,CAAC;IAUM,iCAAiC,CAAC,KAAa,EAAE,UAAkB,EAAE,cAA8B,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACzJ,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,KAAK,EAAE,UAAU,EAAE,cAAc,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGrI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,iCAAiC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACvI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAUM,qBAAqB,CAAC,KAAa,EAAE,UAAkB,EAAE,cAA8B,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC7I,OAAO,IAAI,CAAC,iCAAiC,CAAC,KAAK,EAAE,UAAU,EAAE,cAAc,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAiC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAClL,CAAC;IAQM,uCAAuC,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAwB,EAAA;QACtG,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,2BAA2B,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAG3G,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,uCAAuC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,2BAA2B,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAwB,EAAA;QAC1F,OAAO,IAAI,CAAC,uCAAuC,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAgD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACvK,CAAC;IASM,iDAAiD,CAAC,KAAa,EAAE,UAAkB,EAAE,wBAAkD,EAAE,QAAwB,EAAA;QACpK,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,qCAAqC,CAAC,KAAK,EAAE,UAAU,EAAE,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QAG/I,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,iDAAiD,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACvJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,qCAAqC,CAAC,KAAa,EAAE,UAAkB,EAAE,wBAAkD,EAAE,QAAwB,EAAA;QACxJ,OAAO,IAAI,CAAC,iDAAiD,CAAC,KAAK,EAAE,UAAU,EAAE,wBAAwB,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACtL,CAAC;IAUM,4CAA4C,CAAC,KAAa,EAAE,UAAkB,EAAE,gCAAkE,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACxM,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,gCAAgC,CAAC,KAAK,EAAE,UAAU,EAAE,gCAAgC,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGlK,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,4CAA4C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAUM,gCAAgC,CAAC,KAAa,EAAE,UAAkB,EAAE,gCAAkE,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC5L,OAAO,IAAI,CAAC,4CAA4C,CAAC,KAAK,EAAE,UAAU,EAAE,gCAAgC,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAwD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACtO,CAAC;IASM,4BAA4B,CAAC,KAAa,EAAE,UAAkB,EAAE,cAA8B,EAAE,QAAwB,EAAA;QAC3H,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,KAAK,EAAE,UAAU,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGhH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,4BAA4B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,gBAAgB,CAAC,KAAa,EAAE,UAAkB,EAAE,cAA8B,EAAE,QAAwB,EAAA;QAC/G,OAAO,IAAI,CAAC,4BAA4B,CAAC,KAAK,EAAE,UAAU,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAkC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9J,CAAC;IASM,mCAAmC,CAAC,KAAa,EAAE,UAAkB,EAAE,iBAAoC,EAAE,QAAwB,EAAA;QACxI,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,KAAK,EAAE,UAAU,EAAE,iBAAiB,EAAE,QAAQ,CAAC,CAAC;QAG1H,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,mCAAmC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,uBAAuB,CAAC,KAAa,EAAE,UAAkB,EAAE,iBAAoC,EAAE,QAAwB,EAAA;QAC5H,OAAO,IAAI,CAAC,mCAAmC,CAAC,KAAK,EAAE,UAAU,EAAE,iBAAiB,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACjK,CAAC;IASM,sCAAsC,CAAC,KAAa,EAAE,UAAkB,EAAE,oBAA0C,EAAE,QAAwB,EAAA;QACjJ,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,0BAA0B,CAAC,KAAK,EAAE,UAAU,EAAE,oBAAoB,EAAE,QAAQ,CAAC,CAAC;QAGhI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,sCAAsC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,0BAA0B,CAAC,KAAa,EAAE,UAAkB,EAAE,oBAA0C,EAAE,QAAwB,EAAA;QACrI,OAAO,IAAI,CAAC,sCAAsC,CAAC,KAAK,EAAE,UAAU,EAAE,oBAAoB,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACvK,CAAC;IASM,uCAAuC,CAAC,KAAa,EAAE,UAAkB,EAAE,qBAA4C,EAAE,QAAwB,EAAA;QACpJ,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,2BAA2B,CAAC,KAAK,EAAE,UAAU,EAAE,qBAAqB,EAAE,QAAQ,CAAC,CAAC;QAGlI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,uCAAuC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,2BAA2B,CAAC,KAAa,EAAE,UAAkB,EAAE,qBAA4C,EAAE,QAAwB,EAAA;QACxI,OAAO,IAAI,CAAC,uCAAuC,CAAC,KAAK,EAAE,UAAU,EAAE,qBAAqB,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACzK,CAAC;IASM,wBAAwB,CAAC,KAAa,EAAE,MAAc,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC5G,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGxG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9H,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,YAAY,CAAC,KAAa,EAAE,MAAc,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAChG,OAAO,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,MAAM,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA8B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAClJ,CAAC;IAQM,qBAAqB,CAAC,KAAa,EAAE,MAAc,EAAE,QAAwB,EAAA;QAChF,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;QAGrF,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC3H,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,SAAS,CAAC,KAAa,EAAE,MAAc,EAAE,QAAwB,EAAA;QACpE,OAAO,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA8B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/H,CAAC;IAUM,sBAAsB,CAAC,KAAa,EAAE,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;QACtH,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAGtG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5H,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAUM,UAAU,CAAC,KAAa,EAAE,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;QAC1G,OAAO,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA0C,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5J,CAAC;CAEJ;AA56BD,QAAA,qBAAA,GAAA,sBA46BC;AAED,MAAA,qDAAsG;AACtG,MAAa,wBAAwB;IAKjC,YACI,aAA4B,EAC5B,cAA6C,EAC7C,iBAAmD,CAAA;QAEnD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,iBAAA,4BAA4B,CAAC,aAAa,CAAC,CAAC;QACxF,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,iBAAA,+BAA+B,EAAE,CAAC;IACxF,CAAC;IAOM,+BAA+B,CAAC,cAAuB,EAAE,QAAwB,EAAA;QACpF,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGhG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,+BAA+B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAOM,mBAAmB,CAAC,cAAuB,EAAE,QAAwB,EAAA;QACxE,OAAO,IAAI,CAAC,+BAA+B,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAqC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACjJ,CAAC;IAQM,+BAA+B,CAAC,aAA4B,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAClH,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,aAAa,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAG/G,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,+BAA+B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,mBAAmB,CAAC,aAA4B,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACtG,OAAO,IAAI,CAAC,+BAA+B,CAAC,aAAa,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACtJ,CAAC;CAEJ;AAnFD,QAAA,wBAAA,GAAA,yBAmFC;AAED,MAAA,qEAA8H;AAC9H,MAAa,gCAAgC;IAKzC,YACI,aAA4B,EAC5B,cAAqD,EACrD,iBAA2D,CAAA;QAE3D,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,yBAAA,oCAAoC,CAAC,aAAa,CAAC,CAAC;QAChG,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,yBAAA,uCAAuC,EAAE,CAAC;IAChG,CAAC;IAMM,oCAAoC,CAAC,QAAwB,EAAA;QAChE,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;QAGrF,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,oCAAoC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC1I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAMM,wBAAwB,CAAC,QAAwB,EAAA;QACpD,OAAO,IAAI,CAAC,oCAAoC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA6C,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9I,CAAC;CAEJ;AA9CD,QAAA,gCAAA,GAAA,iCA8CC;AAED,MAAA,iDAAgG;AAChG,MAAa,sBAAsB;IAK/B,YACI,aAA4B,EAC5B,cAA2C,EAC3C,iBAAiD,CAAA;QAEjD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,eAAA,0BAA0B,CAAC,aAAa,CAAC,CAAC;QACtF,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,eAAA,6BAA6B,EAAE,CAAC;IACtF,CAAC;IAQM,6BAA6B,CAAC,WAAwB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC5G,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,WAAW,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAG3G,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,6BAA6B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACnI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,iBAAiB,CAAC,WAAwB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAChG,OAAO,IAAI,CAAC,6BAA6B,CAAC,WAAW,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAmC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1J,CAAC;IAQM,6BAA6B,CAAC,aAAqB,EAAE,OAAiB,EAAE,QAAwB,EAAA;QACnG,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,aAAa,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAGtG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,6BAA6B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACnI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,iBAAiB,CAAC,aAAqB,EAAE,OAAiB,EAAE,QAAwB,EAAA;QACvF,OAAO,IAAI,CAAC,6BAA6B,CAAC,aAAa,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7I,CAAC;IAOM,oCAAoC,CAAC,cAAuB,EAAE,QAAwB,EAAA;QACzF,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGrG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,oCAAoC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC1I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAOM,wBAAwB,CAAC,cAAuB,EAAE,QAAwB,EAAA;QAC7E,OAAO,IAAI,CAAC,oCAAoC,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAyC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1J,CAAC;IAQM,sCAAsC,CAAC,iBAAoC,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACjI,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,0BAA0B,CAAC,iBAAiB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAG1H,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,sCAAsC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,0BAA0B,CAAC,iBAAoC,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACrH,OAAO,IAAI,CAAC,sCAAsC,CAAC,iBAAiB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA0C,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAChL,CAAC;IAOM,0BAA0B,CAAC,aAAqB,EAAE,QAAwB,EAAA;QAC7E,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;QAG1F,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAOM,cAAc,CAAC,aAAqB,EAAE,QAAwB,EAAA;QACjE,OAAO,IAAI,CAAC,0BAA0B,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAmC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACzI,CAAC;IAOM,uCAAuC,CAAC,aAAqB,EAAE,QAAwB,EAAA;QAC1F,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,2BAA2B,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;QAGvG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,uCAAuC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAOM,2BAA2B,CAAC,aAAqB,EAAE,QAAwB,EAAA;QAC9E,OAAO,IAAI,CAAC,uCAAuC,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAyC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5J,CAAC;IAQM,oCAAoC,CAAC,wBAAkD,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC7I,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAC,wBAAwB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAG/H,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,oCAAoC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC1I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,wBAAwB,CAAC,wBAAkD,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACjI,OAAO,IAAI,CAAC,oCAAoC,CAAC,wBAAwB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAgD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3L,CAAC;IAWM,2BAA2B,CAAC,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,eAAyB,EAAE,WAAqB,EAAE,QAAwB,EAAA;QAC9J,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,eAAe,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;QAGlI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,2BAA2B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACjI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAWM,eAAe,CAAC,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,eAAyB,EAAE,WAAqB,EAAE,QAAwB,EAAA;QAClJ,OAAO,IAAI,CAAC,2BAA2B,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,eAAe,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA+C,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7L,CAAC;IAQM,4BAA4B,CAAC,aAAqB,EAAE,cAA8B,EAAE,QAAwB,EAAA;QAC/G,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,aAAa,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAG5G,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,4BAA4B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,gBAAgB,CAAC,aAAqB,EAAE,cAA8B,EAAE,QAAwB,EAAA;QACnG,OAAO,IAAI,CAAC,4BAA4B,CAAC,aAAa,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAmC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3J,CAAC;IAQM,6BAA6B,CAAC,aAAqB,EAAE,eAAgC,EAAE,QAAwB,EAAA;QAClH,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,aAAa,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;QAG9G,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,6BAA6B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACnI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,iBAAiB,CAAC,aAAqB,EAAE,eAAgC,EAAE,QAAwB,EAAA;QACtG,OAAO,IAAI,CAAC,6BAA6B,CAAC,aAAa,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAmC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7J,CAAC;IAQM,0CAA0C,CAAC,aAAqB,EAAE,kBAAsC,EAAE,QAAwB,EAAA;QACrI,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,8BAA8B,CAAC,aAAa,EAAE,kBAAkB,EAAE,QAAQ,CAAC,CAAC;QAG9H,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,0CAA0C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,8BAA8B,CAAC,aAAqB,EAAE,kBAAsC,EAAE,QAAwB,EAAA;QACzH,OAAO,IAAI,CAAC,0CAA0C,CAAC,aAAa,EAAE,kBAAkB,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAyC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACnL,CAAC;CAEJ;AAhZD,QAAA,sBAAA,GAAA,uBAgZC;AAED,MAAA,2CAAuF;AACvF,MAAa,mBAAmB;IAK5B,YACI,aAA4B,EAC5B,cAAwC,EACxC,iBAA8C,CAAA;QAE9C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,YAAA,uBAAuB,CAAC,aAAa,CAAC,CAAC;QACnF,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,YAAA,0BAA0B,EAAE,CAAC;IACnF,CAAC;IAWM,oBAAoB,CAAC,KAAc,EAAE,QAAiB,EAAE,UAA0B,EAAE,QAAwB,EAAE,KAAY,EAAE,QAAwB,EAAA;QACvJ,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAGnH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC1H,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAWM,QAAQ,CAAC,KAAc,EAAE,QAAiB,EAAE,UAA0B,EAAE,QAAwB,EAAE,KAAY,EAAE,QAAwB,EAAA;QAC3I,OAAO,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAuC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACtK,CAAC;CAEJ;AAxDD,QAAA,mBAAA,GAAA,oBAwDC;AAED,MAAA,2CAAuF;AACvF,MAAa,mBAAmB;IAK5B,YACI,aAA4B,EAC5B,cAAwC,EACxC,iBAA8C,CAAA;QAE9C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,YAAA,uBAAuB,CAAC,aAAa,CAAC,CAAC;QACnF,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,YAAA,0BAA0B,EAAE,CAAC;IACnF,CAAC;IAMM,uBAAuB,CAAC,QAAwB,EAAA;QACnD,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAGxE,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7H,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAMM,WAAW,CAAC,QAAwB,EAAA;QACvC,OAAO,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/G,CAAC;CAEJ;AA9CD,QAAA,mBAAA,GAAA,oBA8CC;AAED,MAAA,6CAA0F;AAC1F,MAAa,oBAAoB;IAK7B,YACI,aAA4B,EAC5B,cAAyC,EACzC,iBAA+C,CAAA;QAE/C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,aAAA,wBAAwB,CAAC,aAAa,CAAC,CAAC;QACpF,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,aAAA,2BAA2B,EAAE,CAAC;IACpF,CAAC;IAWM,wBAAwB,CAAC,KAAa,EAAE,YAAoB,EAAE,IAAY,EAAE,SAAkB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACpJ,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,SAAS,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAG/H,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9H,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAWM,YAAY,CAAC,KAAa,EAAE,YAAoB,EAAE,IAAY,EAAE,SAAkB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACxI,OAAO,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,SAAS,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAiC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5K,CAAC;IAQM,8BAA8B,CAAC,KAAa,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAClG,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,KAAK,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGtG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,8BAA8B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACpI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,kBAAkB,CAAC,KAAa,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACtF,OAAO,IAAI,CAAC,8BAA8B,CAAC,KAAK,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAoC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACtJ,CAAC;CAEJ;AA3FD,QAAA,oBAAA,GAAA,qBA2FC;AAED,MAAA,qDAAsG;AACtG,MAAa,wBAAwB;IAKjC,YACI,aAA4B,EAC5B,cAA6C,EAC7C,iBAAmD,CAAA;QAEnD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,iBAAA,4BAA4B,CAAC,aAAa,CAAC,CAAC;QACxF,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,iBAAA,+BAA+B,EAAE,CAAC;IACxF,CAAC;IASM,+BAA+B,CAAC,KAAa,EAAE,aAA4B,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACjI,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,KAAK,EAAE,aAAa,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGtH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,+BAA+B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,mBAAmB,CAAC,KAAa,EAAE,aAA4B,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACrH,OAAO,IAAI,CAAC,+BAA+B,CAAC,KAAK,EAAE,aAAa,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAqC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACvK,CAAC;IAQM,+BAA+B,CAAC,KAAa,EAAE,OAAe,EAAE,QAAwB,EAAA;QAC3F,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAGhG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,+BAA+B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,mBAAmB,CAAC,KAAa,EAAE,OAAe,EAAE,QAAwB,EAAA;QAC/E,OAAO,IAAI,CAAC,+BAA+B,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACvI,CAAC;IAQM,4BAA4B,CAAC,KAAa,EAAE,OAAe,EAAE,QAAwB,EAAA;QACxF,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAG7F,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,4BAA4B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,gBAAgB,CAAC,KAAa,EAAE,OAAe,EAAE,QAAwB,EAAA;QAC5E,OAAO,IAAI,CAAC,4BAA4B,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAqC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9I,CAAC;IAQM,+BAA+B,CAAC,KAAa,EAAE,OAAe,EAAE,QAAwB,EAAA;QAC3F,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAGhG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,+BAA+B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,mBAAmB,CAAC,KAAa,EAAE,OAAe,EAAE,QAAwB,EAAA;QAC/E,OAAO,IAAI,CAAC,+BAA+B,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAwC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACpJ,CAAC;IAUM,6BAA6B,CAAC,KAAa,EAAE,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;QAC7H,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAG7G,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,6BAA6B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACnI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAUM,iBAAiB,CAAC,KAAa,EAAE,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;QACjH,OAAO,IAAI,CAAC,6BAA6B,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAiD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1K,CAAC;IASM,kCAAkC,CAAC,KAAa,EAAE,OAAe,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACvH,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,KAAK,EAAE,OAAO,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGnH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,kCAAkC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACxI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,sBAAsB,CAAC,KAAa,EAAE,OAAe,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC3G,OAAO,IAAI,CAAC,kCAAkC,CAAC,KAAK,EAAE,OAAO,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAwC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACvK,CAAC;IASM,+BAA+B,CAAC,KAAa,EAAE,OAAe,EAAE,iBAAoC,EAAE,QAAwB,EAAA;QACjI,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,KAAK,EAAE,OAAO,EAAE,iBAAiB,EAAE,QAAQ,CAAC,CAAC;QAGnH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,+BAA+B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,mBAAmB,CAAC,KAAa,EAAE,OAAe,EAAE,iBAAoC,EAAE,QAAwB,EAAA;QACrH,OAAO,IAAI,CAAC,+BAA+B,CAAC,KAAK,EAAE,OAAO,EAAE,iBAAiB,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAqC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACpK,CAAC;CAEJ;AA9QD,QAAA,wBAAA,GAAA,yBA8QC;AAED,MAAA,6CAA0F;AAC1F,MAAa,oBAAoB;IAK7B,YACI,aAA4B,EAC5B,cAAyC,EACzC,iBAA+C,CAAA;QAE/C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,aAAA,wBAAwB,CAAC,aAAa,CAAC,CAAC;QACpF,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,aAAA,2BAA2B,EAAE,CAAC;IACpF,CAAC;IAUM,2CAA2C,CAAC,KAAa,EAAE,UAAkB,EAAE,SAAoB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACzJ,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,+BAA+B,CAAC,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAG1I,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,2CAA2C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACjJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAUM,+BAA+B,CAAC,KAAa,EAAE,UAAkB,EAAE,SAAoB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC7I,OAAO,IAAI,CAAC,2CAA2C,CAAC,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAwC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9L,CAAC;IAaM,0BAA0B,CAAC,KAAa,EAAE,MAAc,EAAE,KAAc,EAAE,QAAiB,EAAE,SAAkB,EAAE,OAAgB,EAAE,KAAY,EAAE,QAAwB,EAAA;QAC5K,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAGtI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAaM,cAAc,CAAC,KAAa,EAAE,MAAc,EAAE,KAAc,EAAE,QAAiB,EAAE,SAAkB,EAAE,OAAgB,EAAE,KAAY,EAAE,QAAwB,EAAA;QAChK,OAAO,IAAI,CAAC,0BAA0B,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAuC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACzL,CAAC;IAUM,2BAA2B,CAAC,KAAa,EAAE,SAAoB,EAAE,WAAqB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC5I,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAG3H,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,2BAA2B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACjI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAUM,eAAe,CAAC,KAAa,EAAE,SAAoB,EAAE,WAAqB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAChI,OAAO,IAAI,CAAC,2BAA2B,CAAC,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAiC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACxK,CAAC;IAYM,2BAA2B,CAAC,KAAa,EAAE,KAAc,EAAE,QAAiB,EAAE,UAA0B,EAAE,QAAwB,EAAE,KAAY,EAAE,QAAwB,EAAA;QAC7K,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAGjI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,2BAA2B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACjI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAYM,eAAe,CAAC,KAAa,EAAE,KAAc,EAAE,QAAiB,EAAE,UAA0B,EAAE,QAAwB,EAAE,KAAY,EAAE,QAAwB,EAAA;QACjK,OAAO,IAAI,CAAC,2BAA2B,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAuC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACpL,CAAC;IAaM,uCAAuC,CAAC,KAAa,EAAE,cAAsB,EAAE,KAAc,EAAE,QAAiB,EAAE,UAA0B,EAAE,QAAwB,EAAE,KAAY,EAAE,QAAwB,EAAA;QACjN,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,2BAA2B,CAAC,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAG7J,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,uCAAuC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAaM,2BAA2B,CAAC,KAAa,EAAE,cAAsB,EAAE,KAAc,EAAE,QAAiB,EAAE,UAA0B,EAAE,QAAwB,EAAE,KAAY,EAAE,QAAwB,EAAA;QACrM,OAAO,IAAI,CAAC,uCAAuC,CAAC,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAuC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAChN,CAAC;IASM,kDAAkD,CAAC,KAAa,EAAE,cAAsB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC9I,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,sCAAsC,CAAC,KAAK,EAAE,cAAc,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAG1I,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,kDAAkD,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACxJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,sCAAsC,CAAC,KAAa,EAAE,cAAsB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAClI,OAAO,IAAI,CAAC,kDAAkD,CAAC,KAAK,EAAE,cAAc,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAoD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1M,CAAC;IAQM,mCAAmC,CAAC,KAAa,EAAE,KAAa,EAAE,QAAwB,EAAA;QAC7F,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAGlG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,mCAAmC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,uBAAuB,CAAC,KAAa,EAAE,KAAa,EAAE,QAAwB,EAAA;QACjF,OAAO,IAAI,CAAC,mCAAmC,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACzI,CAAC;IASM,wBAAwB,CAAC,KAAa,EAAE,KAAa,EAAE,WAAqB,EAAE,QAAwB,EAAA;QACzG,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;QAGpG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9H,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,YAAY,CAAC,KAAa,EAAE,KAAa,EAAE,WAAqB,EAAE,QAAwB,EAAA;QAC7F,OAAO,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAiC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACjJ,CAAC;IAQM,kCAAkC,CAAC,KAAa,EAAE,KAAa,EAAE,QAAwB,EAAA;QAC5F,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAGjG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,kCAAkC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACxI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,sBAAsB,CAAC,KAAa,EAAE,KAAa,EAAE,QAAwB,EAAA;QAChF,OAAO,IAAI,CAAC,kCAAkC,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2C,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACxJ,CAAC;IAeM,yBAAyB,CAAC,KAAa,EAAE,KAAc,EAAE,QAAiB,EAAE,OAAgB,EAAE,MAAa,EAAE,KAAY,EAAE,WAAqB,EAAE,GAAY,EAAE,UAA0B,EAAE,QAAwB,EAAA;QACvN,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAGxJ,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC/H,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAeM,aAAa,CAAC,KAAa,EAAE,KAAc,EAAE,QAAiB,EAAE,OAAgB,EAAE,MAAa,EAAE,KAAY,EAAE,WAAqB,EAAE,GAAY,EAAE,UAA0B,EAAE,QAAwB,EAAA;QAC3M,OAAO,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA6C,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACjN,CAAC;CAEJ;AAnaD,QAAA,oBAAA,GAAA,qBAmaC;AAED,MAAA,2DAA+G;AAC/G,MAAa,2BAA2B;IAKpC,YACI,aAA4B,EAC5B,cAAgD,EAChD,iBAAsD,CAAA;QAEtD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,oBAAA,+BAA+B,CAAC,aAAa,CAAC,CAAC;QAC3F,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,oBAAA,kCAAkC,EAAE,CAAC;IAC3F,CAAC;IAeM,2CAA2C,CAAC,KAAa,EAAE,UAAkB,EAAE,MAAsB,EAAE,eAAiC,EAAE,OAAgB,EAAE,GAAY,EAAE,MAAa,EAAE,KAAY,EAAE,UAA0B,EAAE,QAAwB,EAAA;QAC9P,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,+BAA+B,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,eAAe,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAGjL,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,2CAA2C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACjJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAeM,+BAA+B,CAAC,KAAa,EAAE,UAAkB,EAAE,MAAsB,EAAE,eAAiC,EAAE,OAAgB,EAAE,GAAY,EAAE,MAAa,EAAE,KAAY,EAAE,UAA0B,EAAE,QAAwB,EAAA;QAClP,OAAO,IAAI,CAAC,2CAA2C,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,eAAe,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA+B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5N,CAAC;IASM,0CAA0C,CAAC,KAAa,EAAE,KAAa,EAAE,SAAiB,EAAE,QAAwB,EAAA;QACvH,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,8BAA8B,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QAGpH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,0CAA0C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,8BAA8B,CAAC,KAAa,EAAE,KAAa,EAAE,SAAiB,EAAE,QAAwB,EAAA;QAC3G,OAAO,IAAI,CAAC,0CAA0C,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3J,CAAC;IASM,+BAA+B,CAAC,KAAa,EAAE,KAAa,EAAE,SAAiB,EAAE,QAAwB,EAAA;QAC5G,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QAGzG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,+BAA+B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,mBAAmB,CAAC,KAAa,EAAE,KAAa,EAAE,SAAiB,EAAE,QAAwB,EAAA;QAChG,OAAO,IAAI,CAAC,+BAA+B,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAwC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7J,CAAC;IASM,sCAAsC,CAAC,KAAa,EAAE,KAAa,EAAE,SAAiB,EAAE,QAAwB,EAAA;QACnH,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,0BAA0B,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QAGhH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,sCAAsC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,0BAA0B,CAAC,KAAa,EAAE,KAAa,EAAE,SAAiB,EAAE,QAAwB,EAAA;QACvG,OAAO,IAAI,CAAC,sCAAsC,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA+C,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3K,CAAC;IAUM,qDAAqD,CAAC,KAAa,EAAE,KAAa,EAAE,KAAc,EAAE,QAAiB,EAAE,QAAwB,EAAA;QAClJ,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,yCAAyC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAGrI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,qDAAqD,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC3J,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAUM,yCAAyC,CAAC,KAAa,EAAE,KAAa,EAAE,KAAc,EAAE,QAAiB,EAAE,QAAwB,EAAA;QACtI,OAAO,IAAI,CAAC,qDAAqD,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAqD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACtM,CAAC;IAiBM,iDAAiD,CAAC,KAAa,EAAE,UAAkB,EAAE,KAAc,EAAE,QAAiB,EAAE,OAAgB,EAAE,GAAY,EAAE,MAAsB,EAAE,MAAa,EAAE,KAAY,EAAE,WAAqB,EAAE,UAA0B,EAAE,QAAwB,EAAA;QAC3R,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,qCAAqC,CAAC,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAGpM,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,iDAAiD,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACvJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAiBM,qCAAqC,CAAC,KAAa,EAAE,UAAkB,EAAE,KAAc,EAAE,QAAiB,EAAE,OAAgB,EAAE,GAAY,EAAE,MAAsB,EAAE,MAAa,EAAE,KAAY,EAAE,WAAqB,EAAE,UAA0B,EAAE,QAAwB,EAAA;QAC/Q,OAAO,IAAI,CAAC,iDAAiD,CAAC,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAqD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACrQ,CAAC;IAmBM,0CAA0C,CAAC,KAAa,EAAE,UAAkB,EAAE,KAAc,EAAE,QAAiB,EAAE,MAAsB,EAAE,eAAiC,EAAE,OAAgB,EAAE,GAAY,EAAE,MAAa,EAAE,KAAY,EAAE,WAAqB,EAAE,OAAiB,EAAE,UAA0B,EAAE,QAAwB,EAAA;QAC1U,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,8BAA8B,CAAC,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,eAAe,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAGvN,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,0CAA0C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAmBM,8BAA8B,CAAC,KAAa,EAAE,UAAkB,EAAE,KAAc,EAAE,QAAiB,EAAE,MAAsB,EAAE,eAAiC,EAAE,OAAgB,EAAE,GAAY,EAAE,MAAa,EAAE,KAAY,EAAE,WAAqB,EAAE,OAAiB,EAAE,UAA0B,EAAE,QAAwB,EAAA;QAC9T,OAAO,IAAI,CAAC,0CAA0C,CAAC,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,eAAe,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAoD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACvR,CAAC;IAiBM,oDAAoD,CAAC,KAAa,EAAE,KAAa,EAAE,UAAkB,EAAE,KAAc,EAAE,QAAiB,EAAE,OAAgB,EAAE,GAAY,EAAE,MAAsB,EAAE,MAAa,EAAE,KAAY,EAAE,UAA0B,EAAE,QAAwB,EAAA;QACtR,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,wCAAwC,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAGjM,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,oDAAoD,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC1J,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAiBM,wCAAwC,CAAC,KAAa,EAAE,KAAa,EAAE,UAAkB,EAAE,KAAc,EAAE,QAAiB,EAAE,OAAgB,EAAE,GAAY,EAAE,MAAsB,EAAE,MAAa,EAAE,KAAY,EAAE,UAA0B,EAAE,QAAwB,EAAA;QAC1Q,OAAO,IAAI,CAAC,oDAAoD,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA4D,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACzQ,CAAC;IAmBM,qCAAqC,CAAC,KAAa,EAAE,KAAa,EAAE,KAAc,EAAE,QAAiB,EAAE,MAAsB,EAAE,eAAiC,EAAE,OAAgB,EAAE,GAAY,EAAE,UAAmB,EAAE,MAAa,EAAE,KAAY,EAAE,WAAqB,EAAE,UAA0B,EAAE,QAAwB,EAAA;QAClU,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,yBAAyB,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,eAAe,EAAE,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAGhN,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,qCAAqC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC3I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAmBM,yBAAyB,CAAC,KAAa,EAAE,KAAa,EAAE,KAAc,EAAE,QAAiB,EAAE,MAAsB,EAAE,eAAiC,EAAE,OAAgB,EAAE,GAAY,EAAE,UAAmB,EAAE,MAAa,EAAE,KAAY,EAAE,WAAqB,EAAE,UAA0B,EAAE,QAAwB,EAAA;QACtT,OAAO,IAAI,CAAC,qCAAqC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,eAAe,EAAE,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAoD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAChR,CAAC;IAkBM,+CAA+C,CAAC,KAAa,EAAE,KAAa,EAAE,KAAc,EAAE,QAAiB,EAAE,UAAmB,EAAE,OAAgB,EAAE,GAAY,EAAE,MAAsB,EAAE,MAAa,EAAE,KAAY,EAAE,eAAiC,EAAE,UAA0B,EAAE,QAAwB,EAAA;QACrT,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,mCAAmC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,eAAe,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAG7M,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,+CAA+C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAkBM,mCAAmC,CAAC,KAAa,EAAE,KAAa,EAAE,KAAc,EAAE,QAAiB,EAAE,UAAmB,EAAE,OAAgB,EAAE,GAAY,EAAE,MAAsB,EAAE,MAAa,EAAE,KAAY,EAAE,eAAiC,EAAE,UAA0B,EAAE,QAAwB,EAAA;QACzS,OAAO,IAAI,CAAC,+CAA+C,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,eAAe,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAoD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7Q,CAAC;IAUM,kCAAkC,CAAC,KAAa,EAAE,KAAa,EAAE,UAAkB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACzI,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAG7H,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,kCAAkC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACxI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAUM,sBAAsB,CAAC,KAAa,EAAE,KAAa,EAAE,UAAkB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC7H,OAAO,IAAI,CAAC,kCAAkC,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACpK,CAAC;CAEJ;AAhhBD,QAAA,2BAAA,GAAA,4BAghBC;AAED,MAAA,mDAAmG;AACnG,MAAa,uBAAuB;IAKhC,YACI,aAA4B,EAC5B,cAA4C,EAC5C,iBAAkD,CAAA;QAElD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,gBAAA,2BAA2B,CAAC,aAAa,CAAC,CAAC;QACvF,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,gBAAA,8BAA8B,EAAE,CAAC;IACvF,CAAC;IAQM,yCAAyC,CAAC,eAAgC,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAChI,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,6BAA6B,CAAC,eAAe,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAG3H,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,yCAAyC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC/I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,6BAA6B,CAAC,eAAgC,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACpH,OAAO,IAAI,CAAC,yCAAyC,CAAC,eAAe,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAuC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9K,CAAC;IAMM,2CAA2C,CAAC,QAAwB,EAAA;QACvE,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,+BAA+B,CAAC,QAAQ,CAAC,CAAC;QAG5F,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,2CAA2C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACjJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAMM,+BAA+B,CAAC,QAAwB,EAAA;QAC3D,OAAO,IAAI,CAAC,2CAA2C,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA6C,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACrJ,CAAC;IASM,8BAA8B,CAAC,KAAa,EAAE,SAAgB,EAAE,OAAc,EAAE,QAAwB,EAAA;QAC3G,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAG1G,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,8BAA8B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACpI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,kBAAkB,CAAC,KAAa,EAAE,SAAgB,EAAE,OAAc,EAAE,QAAwB,EAAA;QAC/F,OAAO,IAAI,CAAC,8BAA8B,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAgD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACtK,CAAC;IAUM,mCAAmC,CAAC,KAAa,EAAE,UAAkB,EAAE,SAAgB,EAAE,OAAc,EAAE,QAAwB,EAAA;QACpI,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAG3H,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,mCAAmC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAUM,uBAAuB,CAAC,KAAa,EAAE,UAAkB,EAAE,SAAgB,EAAE,OAAc,EAAE,QAAwB,EAAA;QACxH,OAAO,IAAI,CAAC,mCAAmC,CAAC,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAgD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACvL,CAAC;CAEJ;AA7JD,QAAA,uBAAA,GAAA,wBA6JC;AAED,MAAA,2CAAuF;AACvF,MAAa,mBAAmB;IAK5B,YACI,aAA4B,EAC5B,cAAwC,EACxC,iBAA8C,CAAA;QAE9C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,YAAA,uBAAuB,CAAC,aAAa,CAAC,CAAC;QACnF,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,YAAA,0BAA0B,EAAE,CAAC;IACnF,CAAC;IAQM,0BAA0B,CAAC,QAAkB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACnG,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGrG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,cAAc,CAAC,QAAkB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACvF,OAAO,IAAI,CAAC,0BAA0B,CAAC,QAAQ,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAgC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACjJ,CAAC;IASM,gCAAgC,CAAC,QAAgB,EAAE,cAA8B,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACvI,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,QAAQ,EAAE,cAAc,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAG3H,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,gCAAgC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACtI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,oBAAoB,CAAC,QAAgB,EAAE,cAA8B,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC3H,OAAO,IAAI,CAAC,gCAAgC,CAAC,QAAQ,EAAE,cAAc,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA0B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACjK,CAAC;IAOM,0BAA0B,CAAC,QAAgB,EAAE,QAAwB,EAAA;QACxE,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAGrF,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAOM,cAAc,CAAC,QAAgB,EAAE,QAAwB,EAAA;QAC5D,OAAO,IAAI,CAAC,0BAA0B,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5H,CAAC;IAUM,6BAA6B,CAAC,QAAgB,EAAE,KAAc,EAAE,QAAiB,EAAE,KAAY,EAAE,QAAwB,EAAA;QAC5H,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAGhH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,6BAA6B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACnI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAUM,iBAAiB,CAAC,QAAgB,EAAE,KAAc,EAAE,QAAiB,EAAE,KAAY,EAAE,QAAwB,EAAA;QAChH,OAAO,IAAI,CAAC,6BAA6B,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAqC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACjK,CAAC;IAOM,uBAAuB,CAAC,QAAgB,EAAE,QAAwB,EAAA;QACrE,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAGlF,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7H,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAOM,WAAW,CAAC,QAAgB,EAAE,QAAwB,EAAA;QACzD,OAAO,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAgC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9H,CAAC;IASM,wBAAwB,CAAC,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;QACzG,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAGjG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9H,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,YAAY,CAAC,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;QAC7F,OAAO,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA4C,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACzJ,CAAC;IAQM,yBAAyB,CAAC,QAAgB,EAAE,WAAwB,EAAE,QAAwB,EAAA;QACjG,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,QAAQ,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;QAGjG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC/H,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,aAAa,CAAC,QAAgB,EAAE,WAAwB,EAAE,QAAwB,EAAA;QACrF,OAAO,IAAI,CAAC,yBAAyB,CAAC,QAAQ,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAgC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7I,CAAC;IAQM,0BAA0B,CAAC,QAAgB,EAAE,QAAkB,EAAE,QAAwB,EAAA;QAC5F,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAG/F,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,cAAc,CAAC,QAAgB,EAAE,QAAkB,EAAE,QAAwB,EAAA;QAChF,OAAO,IAAI,CAAC,0BAA0B,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAgC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3I,CAAC;CAEJ;AA3SD,QAAA,mBAAA,GAAA,oBA2SC;AAED,MAAA,+DAAqH;AACrH,MAAa,6BAA6B;IAKtC,YACI,aAA4B,EAC5B,cAAkD,EAClD,iBAAwD,CAAA;QAExD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,sBAAA,iCAAiC,CAAC,aAAa,CAAC,CAAC;QAC7F,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,sBAAA,oCAAoC,EAAE,CAAC;IAC7F,CAAC;IAQM,mCAAmC,CAAC,iBAAoC,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC9H,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,iBAAiB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGvH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,mCAAmC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,uBAAuB,CAAC,iBAAoC,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAClH,OAAO,IAAI,CAAC,mCAAmC,CAAC,iBAAiB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAyC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5K,CAAC;IAOM,mCAAmC,CAAC,IAAY,EAAE,QAAwB,EAAA;QAC7E,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAG1F,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,mCAAmC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAOM,uBAAuB,CAAC,IAAY,EAAE,QAAwB,EAAA;QACjE,OAAO,IAAI,CAAC,mCAAmC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACjI,CAAC;IAOM,gCAAgC,CAAC,IAAY,EAAE,QAAwB,EAAA;QAC1E,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAGvF,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,gCAAgC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACtI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAOM,oBAAoB,CAAC,IAAY,EAAE,QAAwB,EAAA;QAC9D,OAAO,IAAI,CAAC,gCAAgC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAyC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5I,CAAC;IASM,iCAAiC,CAAC,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;QAClH,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAG1G,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,iCAAiC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACvI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,qBAAqB,CAAC,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;QACtG,OAAO,IAAI,CAAC,iCAAiC,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAqD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3K,CAAC;IAQM,kCAAkC,CAAC,IAAY,EAAE,oBAA0C,EAAE,QAAwB,EAAA;QACxH,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,IAAI,EAAE,oBAAoB,EAAE,QAAQ,CAAC,CAAC;QAG/G,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,kCAAkC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACxI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,sBAAsB,CAAC,IAAY,EAAE,oBAA0C,EAAE,QAAwB,EAAA;QAC5G,OAAO,IAAI,CAAC,kCAAkC,CAAC,IAAI,EAAE,oBAAoB,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAyC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACpK,CAAC;IAQM,mCAAmC,CAAC,IAAY,EAAE,iBAAoC,EAAE,QAAwB,EAAA;QACnH,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,IAAI,EAAE,iBAAiB,EAAE,QAAQ,CAAC,CAAC;QAG7G,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,mCAAmC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzI,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,uBAAuB,CAAC,IAAY,EAAE,iBAAoC,EAAE,QAAwB,EAAA;QACvG,OAAO,IAAI,CAAC,mCAAmC,CAAC,IAAI,EAAE,iBAAiB,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAyC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAClK,CAAC;CAEJ;AA/ND,QAAA,6BAAA,GAAA,8BA+NC;AAED,MAAA,2EAAuI;AACvI,MAAa,mCAAmC;IAK5C,YACI,aAA4B,EAC5B,cAAwD,EACxD,iBAA8D,CAAA;QAE9D,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,4BAAA,uCAAuC,CAAC,aAAa,CAAC,CAAC;QACnG,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,4BAAA,0CAA0C,EAAE,CAAC;IACnG,CAAC;IASM,8CAA8C,CAAC,KAAa,EAAE,UAAkB,EAAE,oBAA0C,EAAE,QAAwB,EAAA;QACzJ,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,kCAAkC,CAAC,KAAK,EAAE,UAAU,EAAE,oBAAoB,EAAE,QAAQ,CAAC,CAAC;QAGxI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,8CAA8C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACpJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,kCAAkC,CAAC,KAAa,EAAE,UAAkB,EAAE,oBAA0C,EAAE,QAAwB,EAAA;QAC7I,OAAO,IAAI,CAAC,8CAA8C,CAAC,KAAK,EAAE,UAAU,EAAE,oBAAoB,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/K,CAAC;IAQM,0CAA0C,CAAC,UAAsB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACvH,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,8BAA8B,CAAC,UAAU,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGvH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,0CAA0C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,8BAA8B,CAAC,UAAsB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC3G,OAAO,IAAI,CAAC,0CAA0C,CAAC,UAAU,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAkC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACrK,CAAC;IAOM,0CAA0C,CAAC,wBAAgC,EAAE,QAAwB,EAAA;QACxG,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,8BAA8B,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QAGrH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,0CAA0C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAOM,8BAA8B,CAAC,wBAAgC,EAAE,QAAwB,EAAA;QAC5F,OAAO,IAAI,CAAC,0CAA0C,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5J,CAAC;IAQM,4CAA4C,CAAC,UAAsB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACzH,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,gCAAgC,CAAC,UAAU,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGzH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,4CAA4C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,gCAAgC,CAAC,UAAsB,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC7G,OAAO,IAAI,CAAC,4CAA4C,CAAC,UAAU,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAkC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACvK,CAAC;IAOM,uCAAuC,CAAC,wBAAgC,EAAE,QAAwB,EAAA;QACrG,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,2BAA2B,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QAGlH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,uCAAuC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAOM,2BAA2B,CAAC,wBAAgC,EAAE,QAAwB,EAAA;QACzF,OAAO,IAAI,CAAC,uCAAuC,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAkC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAChK,CAAC;IASM,wCAAwC,CAAC,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;QACzH,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,4BAA4B,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAGjH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,wCAAwC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,4BAA4B,CAAC,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;QAC7G,OAAO,IAAI,CAAC,wCAAwC,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA8C,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3K,CAAC;IAQM,gDAAgD,CAAC,cAA8B,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACrI,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,oCAAoC,CAAC,cAAc,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGjI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,gDAAgD,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACtJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,oCAAoC,CAAC,cAA8B,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACzH,OAAO,IAAI,CAAC,gDAAgD,CAAC,cAAc,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAgD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7L,CAAC;IAQM,gDAAgD,CAAC,cAA8B,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACrI,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,oCAAoC,CAAC,cAAc,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGjI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,gDAAgD,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACtJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,oCAAoC,CAAC,cAA8B,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACzH,OAAO,IAAI,CAAC,gDAAgD,CAAC,cAAc,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAsC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACnL,CAAC;IAQM,8CAA8C,CAAC,cAA8B,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACnI,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,kCAAkC,CAAC,cAAc,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAG/H,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,8CAA8C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACpJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,kCAAkC,CAAC,cAA8B,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACvH,OAAO,IAAI,CAAC,8CAA8C,CAAC,cAAc,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAgD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3L,CAAC;IAQM,yCAAyC,CAAC,wBAAgC,EAAE,aAA4B,EAAE,QAAwB,EAAA;QACrI,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,6BAA6B,CAAC,wBAAwB,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;QAGnI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,yCAAyC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC/I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,6BAA6B,CAAC,wBAAgC,EAAE,aAA4B,EAAE,QAAwB,EAAA;QACzH,OAAO,IAAI,CAAC,yCAAyC,CAAC,wBAAwB,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAkC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACjL,CAAC;IAQM,4CAA4C,CAAC,wBAAkD,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACrJ,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,gCAAgC,CAAC,wBAAwB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGvI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,4CAA4C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,gCAAgC,CAAC,wBAAkD,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACzI,OAAO,IAAI,CAAC,4CAA4C,CAAC,wBAAwB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAgD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACnM,CAAC;IAQM,0CAA0C,CAAC,wBAAgC,EAAE,cAA8B,EAAE,QAAwB,EAAA;QACxI,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,8BAA8B,CAAC,wBAAwB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGrI,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,0CAA0C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,8BAA8B,CAAC,wBAAgC,EAAE,cAA8B,EAAE,QAAwB,EAAA;QAC5H,OAAO,IAAI,CAAC,0CAA0C,CAAC,wBAAwB,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAkC,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACnL,CAAC;CAEJ;AAnbD,QAAA,mCAAA,GAAA,oCAmbC;AAED,MAAA,6DAAkH;AAClH,MAAa,4BAA4B;IAKrC,YACI,aAA4B,EAC5B,cAAiD,EACjD,iBAAuD,CAAA;QAEvD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,qBAAA,gCAAgC,CAAC,aAAa,CAAC,CAAC;QAC5F,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,qBAAA,mCAAmC,EAAE,CAAC;IAC5F,CAAC;IAQM,4CAA4C,CAAC,4BAA0D,EAAE,cAAuB,EAAE,QAAwB,EAAA;QAC7J,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,gCAAgC,CAAC,4BAA4B,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAG3I,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,4CAA4C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,gCAAgC,CAAC,4BAA0D,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACjJ,OAAO,IAAI,CAAC,4CAA4C,CAAC,4BAA4B,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAoD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3M,CAAC;IAOM,4CAA4C,CAAC,UAAkB,EAAE,QAAwB,EAAA;QAC5F,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,gCAAgC,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAGzG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,4CAA4C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAOM,gCAAgC,CAAC,UAAkB,EAAE,QAAwB,EAAA;QAChF,OAAO,IAAI,CAAC,4CAA4C,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAChJ,CAAC;IAOM,yCAAyC,CAAC,UAAkB,EAAE,QAAwB,EAAA;QACzF,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,6BAA6B,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAGtG,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,yCAAyC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC/I,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAOM,6BAA6B,CAAC,UAAkB,EAAE,QAAwB,EAAA;QAC7E,OAAO,IAAI,CAAC,yCAAyC,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAoD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACtK,CAAC;IAOM,+CAA+C,CAAC,UAAkB,EAAE,QAAwB,EAAA;QAC/F,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,mCAAmC,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAG5G,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,+CAA+C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAOM,mCAAmC,CAAC,UAAkB,EAAE,QAAwB,EAAA;QACnF,OAAO,IAAI,CAAC,+CAA+C,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA0D,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAClL,CAAC;IASM,2CAA2C,CAAC,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;QAC5H,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,+BAA+B,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAGpH,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,2CAA2C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACjJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,+BAA+B,CAAC,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,QAAwB,EAAA;QAChH,OAAO,IAAI,CAAC,2CAA2C,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAgE,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAChM,CAAC;IASM,kDAAkD,CAAC,UAAkB,EAAE,kCAAsE,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACnM,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,sCAAsC,CAAC,UAAU,EAAE,kCAAkC,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAGnK,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,kDAAkD,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACxJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IASM,sCAAsC,CAAC,UAAkB,EAAE,kCAAsE,EAAE,cAAuB,EAAE,QAAwB,EAAA;QACvL,OAAO,IAAI,CAAC,kDAAkD,CAAC,UAAU,EAAE,kCAAkC,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAA2B,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1M,CAAC;IAQM,4CAA4C,CAAC,UAAkB,EAAE,gCAAkE,EAAE,QAAwB,EAAA;QAChK,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,gCAAgC,CAAC,UAAU,EAAE,gCAAgC,EAAE,QAAQ,CAAC,CAAC;QAG3I,IAAI,uBAAuB,GAAG,CAAA,GAAA,WAAA,IAAI,EAAiB,qBAAqB,CAAC,CAAC;QAC1E,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;YACpD,uBAAuB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,SAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClH;QAED,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAmB,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACxG,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,QAAyB,EAAE,EAAE;YACxC,IAAI,wBAAwB,GAAG,CAAA,GAAA,WAAA,EAAE,EAAC,QAAQ,CAAC,CAAC;YAC5C,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE;gBACpD,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,QAAQ,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,SAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACtH;YACD,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,GAAoB,EAAE,CAAG,CAAD,GAAK,CAAC,iBAAiB,CAAC,4CAA4C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClJ,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAQM,gCAAgC,CAAC,UAAkB,EAAE,gCAAkE,EAAE,QAAwB,EAAA;QACpJ,OAAO,IAAI,CAAC,4CAA4C,CAAC,UAAU,EAAE,gCAAgC,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA,GAAA,WAAA,GAAG,EAAC,CAAC,WAAoD,EAAE,CAAG,CAAD,UAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3M,CAAC;CAEJ;AAlQD,QAAA,4BAAA,GAAA,6BAkQC","ignoreList":[0]}},
    {"offset": {"line": 2343, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2348, "column": 0}, "map": {"version":3,"file":"ObjectParamAPI.js","sources":["file:///workspaces/bark-ai-chatbot/node_modules/.pnpm/svix%401.45.1_encoding%400.1.13/node_modules/svix/src/openapi/types/ObjectParamAPI.ts"],"sourcesContent":["import { ResponseContext, RequestContext, HttpFile, HttpInfo } from '../http/http';\nimport { Configuration} from '../configuration'\n\nimport { AggregateEventTypesOut } from '../models/AggregateEventTypesOut';\nimport { AppPortalAccessIn } from '../models/AppPortalAccessIn';\nimport { AppPortalAccessOut } from '../models/AppPortalAccessOut';\nimport { AppUsageStatsIn } from '../models/AppUsageStatsIn';\nimport { AppUsageStatsOut } from '../models/AppUsageStatsOut';\nimport { ApplicationIn } from '../models/ApplicationIn';\nimport { ApplicationOut } from '../models/ApplicationOut';\nimport { ApplicationPatch } from '../models/ApplicationPatch';\nimport { ApplicationStats } from '../models/ApplicationStats';\nimport { ApplicationTokenExpireIn } from '../models/ApplicationTokenExpireIn';\nimport { AttemptStatisticsData } from '../models/AttemptStatisticsData';\nimport { AttemptStatisticsResponse } from '../models/AttemptStatisticsResponse';\nimport { AuthTokenOut } from '../models/AuthTokenOut';\nimport { AzureBlobStorageConfig } from '../models/AzureBlobStorageConfig';\nimport { BackgroundTaskOut } from '../models/BackgroundTaskOut';\nimport { BackgroundTaskStatus } from '../models/BackgroundTaskStatus';\nimport { BackgroundTaskType } from '../models/BackgroundTaskType';\nimport { BigQueryConfig } from '../models/BigQueryConfig';\nimport { BorderRadiusConfig } from '../models/BorderRadiusConfig';\nimport { BorderRadiusEnum } from '../models/BorderRadiusEnum';\nimport { ClientSecretJwtParamsIn } from '../models/ClientSecretJwtParamsIn';\nimport { CompletionChoice } from '../models/CompletionChoice';\nimport { CompletionMessage } from '../models/CompletionMessage';\nimport { CountOut } from '../models/CountOut';\nimport { CreateStreamIn } from '../models/CreateStreamIn';\nimport { CreateTokenIn } from '../models/CreateTokenIn';\nimport { CustomColorPalette } from '../models/CustomColorPalette';\nimport { CustomStringsOverride } from '../models/CustomStringsOverride';\nimport { CustomThemeOverride } from '../models/CustomThemeOverride';\nimport { DashboardAccessOut } from '../models/DashboardAccessOut';\nimport { Duration } from '../models/Duration';\nimport { EndpointCreatedEvent } from '../models/EndpointCreatedEvent';\nimport { EndpointCreatedEventData } from '../models/EndpointCreatedEventData';\nimport { EndpointDeletedEvent } from '../models/EndpointDeletedEvent';\nimport { EndpointDeletedEventData } from '../models/EndpointDeletedEventData';\nimport { EndpointDisabledEvent } from '../models/EndpointDisabledEvent';\nimport { EndpointDisabledEventData } from '../models/EndpointDisabledEventData';\nimport { EndpointHeadersIn } from '../models/EndpointHeadersIn';\nimport { EndpointHeadersOut } from '../models/EndpointHeadersOut';\nimport { EndpointHeadersPatchIn } from '../models/EndpointHeadersPatchIn';\nimport { EndpointIn } from '../models/EndpointIn';\nimport { EndpointMessageOut } from '../models/EndpointMessageOut';\nimport { EndpointMtlsConfigIn } from '../models/EndpointMtlsConfigIn';\nimport { EndpointOauthConfigIn } from '../models/EndpointOauthConfigIn';\nimport { EndpointOut } from '../models/EndpointOut';\nimport { EndpointPatch } from '../models/EndpointPatch';\nimport { EndpointSecretOut } from '../models/EndpointSecretOut';\nimport { EndpointSecretRotateIn } from '../models/EndpointSecretRotateIn';\nimport { EndpointStats } from '../models/EndpointStats';\nimport { EndpointTransformationIn } from '../models/EndpointTransformationIn';\nimport { EndpointTransformationOut } from '../models/EndpointTransformationOut';\nimport { EndpointTransformationSimulateIn } from '../models/EndpointTransformationSimulateIn';\nimport { EndpointTransformationSimulateOut } from '../models/EndpointTransformationSimulateOut';\nimport { EndpointUpdate } from '../models/EndpointUpdate';\nimport { EndpointUpdatedEvent } from '../models/EndpointUpdatedEvent';\nimport { EndpointUpdatedEventData } from '../models/EndpointUpdatedEventData';\nimport { EnvironmentIn } from '../models/EnvironmentIn';\nimport { EnvironmentOut } from '../models/EnvironmentOut';\nimport { EnvironmentSettingsOut } from '../models/EnvironmentSettingsOut';\nimport { EventExampleIn } from '../models/EventExampleIn';\nimport { EventIn } from '../models/EventIn';\nimport { EventOut } from '../models/EventOut';\nimport { EventStreamOut } from '../models/EventStreamOut';\nimport { EventTypeExampleOut } from '../models/EventTypeExampleOut';\nimport { EventTypeFromOpenApi } from '../models/EventTypeFromOpenApi';\nimport { EventTypeImportOpenApiIn } from '../models/EventTypeImportOpenApiIn';\nimport { EventTypeImportOpenApiOut } from '../models/EventTypeImportOpenApiOut';\nimport { EventTypeImportOpenApiOutData } from '../models/EventTypeImportOpenApiOutData';\nimport { EventTypeIn } from '../models/EventTypeIn';\nimport { EventTypeOut } from '../models/EventTypeOut';\nimport { EventTypePatch } from '../models/EventTypePatch';\nimport { EventTypeSchemaIn } from '../models/EventTypeSchemaIn';\nimport { EventTypeUpdate } from '../models/EventTypeUpdate';\nimport { ExportEventTypeOut } from '../models/ExportEventTypeOut';\nimport { FontSizeConfig } from '../models/FontSizeConfig';\nimport { GenerateIn } from '../models/GenerateIn';\nimport { GenerateOut } from '../models/GenerateOut';\nimport { GoogleCloudStorageConfig } from '../models/GoogleCloudStorageConfig';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { HubspotOauthConfigIn } from '../models/HubspotOauthConfigIn';\nimport { InboundPathParams } from '../models/InboundPathParams';\nimport { IncomingWebhookPayloadOut } from '../models/IncomingWebhookPayloadOut';\nimport { IntegrationIn } from '../models/IntegrationIn';\nimport { IntegrationKeyOut } from '../models/IntegrationKeyOut';\nimport { IntegrationOut } from '../models/IntegrationOut';\nimport { IntegrationUpdate } from '../models/IntegrationUpdate';\nimport { KafkaSecurityProtocolType } from '../models/KafkaSecurityProtocolType';\nimport { ListResponseApplicationOut } from '../models/ListResponseApplicationOut';\nimport { ListResponseApplicationStats } from '../models/ListResponseApplicationStats';\nimport { ListResponseBackgroundTaskOut } from '../models/ListResponseBackgroundTaskOut';\nimport { ListResponseEndpointMessageOut } from '../models/ListResponseEndpointMessageOut';\nimport { ListResponseEndpointOut } from '../models/ListResponseEndpointOut';\nimport { ListResponseEventTypeOut } from '../models/ListResponseEventTypeOut';\nimport { ListResponseIntegrationOut } from '../models/ListResponseIntegrationOut';\nimport { ListResponseMessageAttemptEndpointOut } from '../models/ListResponseMessageAttemptEndpointOut';\nimport { ListResponseMessageAttemptOut } from '../models/ListResponseMessageAttemptOut';\nimport { ListResponseMessageEndpointOut } from '../models/ListResponseMessageEndpointOut';\nimport { ListResponseMessageOut } from '../models/ListResponseMessageOut';\nimport { ListResponseOperationalWebhookEndpointOut } from '../models/ListResponseOperationalWebhookEndpointOut';\nimport { ListResponseSinkOut } from '../models/ListResponseSinkOut';\nimport { ListResponseStreamEventTypeOut } from '../models/ListResponseStreamEventTypeOut';\nimport { ListResponseStreamOut } from '../models/ListResponseStreamOut';\nimport { ListResponseStreamSinkOut } from '../models/ListResponseStreamSinkOut';\nimport { ListResponseTemplateOut } from '../models/ListResponseTemplateOut';\nimport { MessageAttemptEndpointOut } from '../models/MessageAttemptEndpointOut';\nimport { MessageAttemptExhaustedEvent } from '../models/MessageAttemptExhaustedEvent';\nimport { MessageAttemptExhaustedEventData } from '../models/MessageAttemptExhaustedEventData';\nimport { MessageAttemptFailedData } from '../models/MessageAttemptFailedData';\nimport { MessageAttemptFailingEvent } from '../models/MessageAttemptFailingEvent';\nimport { MessageAttemptFailingEventData } from '../models/MessageAttemptFailingEventData';\nimport { MessageAttemptHeadersOut } from '../models/MessageAttemptHeadersOut';\nimport { MessageAttemptOut } from '../models/MessageAttemptOut';\nimport { MessageAttemptRecoveredEvent } from '../models/MessageAttemptRecoveredEvent';\nimport { MessageAttemptRecoveredEventData } from '../models/MessageAttemptRecoveredEventData';\nimport { MessageAttemptTriggerType } from '../models/MessageAttemptTriggerType';\nimport { MessageBroadcastIn } from '../models/MessageBroadcastIn';\nimport { MessageBroadcastOut } from '../models/MessageBroadcastOut';\nimport { MessageEndpointOut } from '../models/MessageEndpointOut';\nimport { MessageEventsOut } from '../models/MessageEventsOut';\nimport { MessageIn } from '../models/MessageIn';\nimport { MessageOut } from '../models/MessageOut';\nimport { MessageRawPayloadOut } from '../models/MessageRawPayloadOut';\nimport { MessageStatus } from '../models/MessageStatus';\nimport { MessageSubscriberAuthTokenOut } from '../models/MessageSubscriberAuthTokenOut';\nimport { OAuthPayloadIn } from '../models/OAuthPayloadIn';\nimport { OAuthPayloadOut } from '../models/OAuthPayloadOut';\nimport { Oauth2AuthMethodIn } from '../models/Oauth2AuthMethodIn';\nimport { Oauth2GrantTypeIn } from '../models/Oauth2GrantTypeIn';\nimport { OauthJwsSigningAlgorithm } from '../models/OauthJwsSigningAlgorithm';\nimport { OneTimeTokenIn } from '../models/OneTimeTokenIn';\nimport { OneTimeTokenOut } from '../models/OneTimeTokenOut';\nimport { OperationalWebhookEndpointIn } from '../models/OperationalWebhookEndpointIn';\nimport { OperationalWebhookEndpointOut } from '../models/OperationalWebhookEndpointOut';\nimport { OperationalWebhookEndpointSecretIn } from '../models/OperationalWebhookEndpointSecretIn';\nimport { OperationalWebhookEndpointSecretOut } from '../models/OperationalWebhookEndpointSecretOut';\nimport { OperationalWebhookEndpointUpdate } from '../models/OperationalWebhookEndpointUpdate';\nimport { Ordering } from '../models/Ordering';\nimport { RecoverIn } from '../models/RecoverIn';\nimport { RecoverOut } from '../models/RecoverOut';\nimport { RedshiftConfig } from '../models/RedshiftConfig';\nimport { ReplayIn } from '../models/ReplayIn';\nimport { ReplayOut } from '../models/ReplayOut';\nimport { RetryScheduleInOut } from '../models/RetryScheduleInOut';\nimport { RotatePollerTokenIn } from '../models/RotatePollerTokenIn';\nimport { RotatedUrlOut } from '../models/RotatedUrlOut';\nimport { S3Config } from '../models/S3Config';\nimport { SinkHttpConfig } from '../models/SinkHttpConfig';\nimport { SinkIn } from '../models/SinkIn';\nimport { SinkInOneOf } from '../models/SinkInOneOf';\nimport { SinkInOneOf1 } from '../models/SinkInOneOf1';\nimport { SinkInOneOf2 } from '../models/SinkInOneOf2';\nimport { SinkInOneOf3 } from '../models/SinkInOneOf3';\nimport { SinkInOneOf4 } from '../models/SinkInOneOf4';\nimport { SinkOtelV1Config } from '../models/SinkOtelV1Config';\nimport { SinkOut } from '../models/SinkOut';\nimport { SinkPayloadFormat } from '../models/SinkPayloadFormat';\nimport { SinkStatus } from '../models/SinkStatus';\nimport { SinkStatusIn } from '../models/SinkStatusIn';\nimport { SinkTransformIn } from '../models/SinkTransformIn';\nimport { SinkTransformationOut } from '../models/SinkTransformationOut';\nimport { SnowflakeConfig } from '../models/SnowflakeConfig';\nimport { StatisticsPeriod } from '../models/StatisticsPeriod';\nimport { StatusCodeClass } from '../models/StatusCodeClass';\nimport { StreamEventTypeIn } from '../models/StreamEventTypeIn';\nimport { StreamEventTypeOut } from '../models/StreamEventTypeOut';\nimport { StreamEventTypePatch } from '../models/StreamEventTypePatch';\nimport { StreamIn } from '../models/StreamIn';\nimport { StreamOut } from '../models/StreamOut';\nimport { StreamPatch } from '../models/StreamPatch';\nimport { StreamSinkIn } from '../models/StreamSinkIn';\nimport { StreamSinkInOneOf } from '../models/StreamSinkInOneOf';\nimport { StreamSinkInOneOf1 } from '../models/StreamSinkInOneOf1';\nimport { StreamSinkInOneOf2 } from '../models/StreamSinkInOneOf2';\nimport { StreamSinkInOneOf3 } from '../models/StreamSinkInOneOf3';\nimport { StreamSinkInOneOf4 } from '../models/StreamSinkInOneOf4';\nimport { StreamSinkInOneOf5 } from '../models/StreamSinkInOneOf5';\nimport { StreamSinkInOneOf6 } from '../models/StreamSinkInOneOf6';\nimport { StreamSinkInOneOf7 } from '../models/StreamSinkInOneOf7';\nimport { StreamSinkOut } from '../models/StreamSinkOut';\nimport { StreamSinkPatch } from '../models/StreamSinkPatch';\nimport { TemplateIn } from '../models/TemplateIn';\nimport { TemplateOut } from '../models/TemplateOut';\nimport { TemplatePatch } from '../models/TemplatePatch';\nimport { TemplateUpdate } from '../models/TemplateUpdate';\nimport { TransformationHttpMethod } from '../models/TransformationHttpMethod';\nimport { TransformationSimulateIn } from '../models/TransformationSimulateIn';\nimport { TransformationSimulateOut } from '../models/TransformationSimulateOut';\nimport { TransformationTemplateKind } from '../models/TransformationTemplateKind';\nimport { ValidationError } from '../models/ValidationError';\n\nimport { ObservableApplicationApi } from \"./ObservableAPI\";\nimport { ApplicationApiRequestFactory, ApplicationApiResponseProcessor} from \"../apis/ApplicationApi\";\n\nexport interface ApplicationApiGetAppUsageStatsApiV1AppStatsUsageGetRequest {\n    /**\n     * Filter the range to data after this date.\n     * Defaults to: undefined\n     * @type Date\n     * @memberof ApplicationApigetAppUsageStatsApiV1AppStatsUsageGet\n     */\n    since: Date\n    /**\n     * Filter the range to data before this date.\n     * Defaults to: undefined\n     * @type Date\n     * @memberof ApplicationApigetAppUsageStatsApiV1AppStatsUsageGet\n     */\n    until: Date\n    /**\n     * Limit the number of returned items.\n     * Maximum: 250\n     * Defaults to: 50\n     * @type number\n     * @memberof ApplicationApigetAppUsageStatsApiV1AppStatsUsageGet\n     */\n    limit?: number\n    /**\n     * The iterator to use (depends on the chosen ordering).\n     * Defaults to: undefined\n     * @type string\n     * @memberof ApplicationApigetAppUsageStatsApiV1AppStatsUsageGet\n     */\n    iterator?: string\n}\n\nexport interface ApplicationApiV1ApplicationCreateRequest {\n    /**\n     * \n     * @type ApplicationIn\n     * @memberof ApplicationApiv1ApplicationCreate\n     */\n    applicationIn: ApplicationIn\n    /**\n     * Get an existing application, or create a new one if doesn\\&#39;t exist. It\\&#39;s two separate functions in the libs.\n     * Defaults to: false\n     * @type boolean\n     * @memberof ApplicationApiv1ApplicationCreate\n     */\n    getIfExists?: boolean\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof ApplicationApiv1ApplicationCreate\n     */\n    idempotencyKey?: string\n}\n\nexport interface ApplicationApiV1ApplicationDeleteRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof ApplicationApiv1ApplicationDelete\n     */\n    appId: string\n}\n\nexport interface ApplicationApiV1ApplicationGetRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof ApplicationApiv1ApplicationGet\n     */\n    appId: string\n}\n\nexport interface ApplicationApiV1ApplicationGetStatsRequest {\n    /**\n     * Filter the range to data starting from this date.\n     * Defaults to: undefined\n     * @type Date\n     * @memberof ApplicationApiv1ApplicationGetStats\n     */\n    since: Date\n    /**\n     * Filter the range to data ending by this date.\n     * Defaults to: undefined\n     * @type Date\n     * @memberof ApplicationApiv1ApplicationGetStats\n     */\n    until: Date\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof ApplicationApiv1ApplicationGetStats\n     */\n    appId: string\n}\n\nexport interface ApplicationApiV1ApplicationListRequest {\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof ApplicationApiv1ApplicationList\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof ApplicationApiv1ApplicationList\n     */\n    iterator?: string\n    /**\n     * The sorting order of the returned items\n     * Defaults to: undefined\n     * @type Ordering\n     * @memberof ApplicationApiv1ApplicationList\n     */\n    order?: Ordering\n}\n\nexport interface ApplicationApiV1ApplicationPatchRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof ApplicationApiv1ApplicationPatch\n     */\n    appId: string\n    /**\n     * \n     * @type ApplicationPatch\n     * @memberof ApplicationApiv1ApplicationPatch\n     */\n    applicationPatch: ApplicationPatch\n}\n\nexport interface ApplicationApiV1ApplicationUpdateRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof ApplicationApiv1ApplicationUpdate\n     */\n    appId: string\n    /**\n     * \n     * @type ApplicationIn\n     * @memberof ApplicationApiv1ApplicationUpdate\n     */\n    applicationIn: ApplicationIn\n}\n\nexport class ObjectApplicationApi {\n    private api: ObservableApplicationApi\n\n    public constructor(configuration: Configuration, requestFactory?: ApplicationApiRequestFactory, responseProcessor?: ApplicationApiResponseProcessor) {\n        this.api = new ObservableApplicationApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Get basic statistics for all applications.\n     * Get App Usage Stats\n     * @param param the request object\n     */\n    public getAppUsageStatsApiV1AppStatsUsageGetWithHttpInfo(param: ApplicationApiGetAppUsageStatsApiV1AppStatsUsageGetRequest, options?: Configuration): Promise<HttpInfo<ListResponseApplicationStats>> {\n        return this.api.getAppUsageStatsApiV1AppStatsUsageGetWithHttpInfo(param.since, param.until, param.limit, param.iterator,  options).toPromise();\n    }\n\n    /**\n     * Get basic statistics for all applications.\n     * Get App Usage Stats\n     * @param param the request object\n     */\n    public getAppUsageStatsApiV1AppStatsUsageGet(param: ApplicationApiGetAppUsageStatsApiV1AppStatsUsageGetRequest, options?: Configuration): Promise<ListResponseApplicationStats> {\n        return this.api.getAppUsageStatsApiV1AppStatsUsageGet(param.since, param.until, param.limit, param.iterator,  options).toPromise();\n    }\n\n    /**\n     * Create a new application.\n     * Create Application\n     * @param param the request object\n     */\n    public v1ApplicationCreateWithHttpInfo(param: ApplicationApiV1ApplicationCreateRequest, options?: Configuration): Promise<HttpInfo<ApplicationOut>> {\n        return this.api.v1ApplicationCreateWithHttpInfo(param.applicationIn, param.getIfExists, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Create a new application.\n     * Create Application\n     * @param param the request object\n     */\n    public v1ApplicationCreate(param: ApplicationApiV1ApplicationCreateRequest, options?: Configuration): Promise<ApplicationOut> {\n        return this.api.v1ApplicationCreate(param.applicationIn, param.getIfExists, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Delete an application.\n     * Delete Application\n     * @param param the request object\n     */\n    public v1ApplicationDeleteWithHttpInfo(param: ApplicationApiV1ApplicationDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1ApplicationDeleteWithHttpInfo(param.appId,  options).toPromise();\n    }\n\n    /**\n     * Delete an application.\n     * Delete Application\n     * @param param the request object\n     */\n    public v1ApplicationDelete(param: ApplicationApiV1ApplicationDeleteRequest, options?: Configuration): Promise<void> {\n        return this.api.v1ApplicationDelete(param.appId,  options).toPromise();\n    }\n\n    /**\n     * Get an application.\n     * Get Application\n     * @param param the request object\n     */\n    public v1ApplicationGetWithHttpInfo(param: ApplicationApiV1ApplicationGetRequest, options?: Configuration): Promise<HttpInfo<ApplicationOut>> {\n        return this.api.v1ApplicationGetWithHttpInfo(param.appId,  options).toPromise();\n    }\n\n    /**\n     * Get an application.\n     * Get Application\n     * @param param the request object\n     */\n    public v1ApplicationGet(param: ApplicationApiV1ApplicationGetRequest, options?: Configuration): Promise<ApplicationOut> {\n        return this.api.v1ApplicationGet(param.appId,  options).toPromise();\n    }\n\n    /**\n     * Get basic statistics for the application.\n     * Get App Stats\n     * @param param the request object\n     */\n    public v1ApplicationGetStatsWithHttpInfo(param: ApplicationApiV1ApplicationGetStatsRequest, options?: Configuration): Promise<HttpInfo<ApplicationStats>> {\n        return this.api.v1ApplicationGetStatsWithHttpInfo(param.since, param.until, param.appId,  options).toPromise();\n    }\n\n    /**\n     * Get basic statistics for the application.\n     * Get App Stats\n     * @param param the request object\n     */\n    public v1ApplicationGetStats(param: ApplicationApiV1ApplicationGetStatsRequest, options?: Configuration): Promise<ApplicationStats> {\n        return this.api.v1ApplicationGetStats(param.since, param.until, param.appId,  options).toPromise();\n    }\n\n    /**\n     * List of all the organization\\'s applications.\n     * List Applications\n     * @param param the request object\n     */\n    public v1ApplicationListWithHttpInfo(param: ApplicationApiV1ApplicationListRequest = {}, options?: Configuration): Promise<HttpInfo<ListResponseApplicationOut>> {\n        return this.api.v1ApplicationListWithHttpInfo(param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * List of all the organization\\'s applications.\n     * List Applications\n     * @param param the request object\n     */\n    public v1ApplicationList(param: ApplicationApiV1ApplicationListRequest = {}, options?: Configuration): Promise<ListResponseApplicationOut> {\n        return this.api.v1ApplicationList(param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * Partially update an application.\n     * Patch Application\n     * @param param the request object\n     */\n    public v1ApplicationPatchWithHttpInfo(param: ApplicationApiV1ApplicationPatchRequest, options?: Configuration): Promise<HttpInfo<ApplicationOut>> {\n        return this.api.v1ApplicationPatchWithHttpInfo(param.appId, param.applicationPatch,  options).toPromise();\n    }\n\n    /**\n     * Partially update an application.\n     * Patch Application\n     * @param param the request object\n     */\n    public v1ApplicationPatch(param: ApplicationApiV1ApplicationPatchRequest, options?: Configuration): Promise<ApplicationOut> {\n        return this.api.v1ApplicationPatch(param.appId, param.applicationPatch,  options).toPromise();\n    }\n\n    /**\n     * Update an application.\n     * Update Application\n     * @param param the request object\n     */\n    public v1ApplicationUpdateWithHttpInfo(param: ApplicationApiV1ApplicationUpdateRequest, options?: Configuration): Promise<HttpInfo<ApplicationOut>> {\n        return this.api.v1ApplicationUpdateWithHttpInfo(param.appId, param.applicationIn,  options).toPromise();\n    }\n\n    /**\n     * Update an application.\n     * Update Application\n     * @param param the request object\n     */\n    public v1ApplicationUpdate(param: ApplicationApiV1ApplicationUpdateRequest, options?: Configuration): Promise<ApplicationOut> {\n        return this.api.v1ApplicationUpdate(param.appId, param.applicationIn,  options).toPromise();\n    }\n\n}\n\nimport { ObservableAuthenticationApi } from \"./ObservableAPI\";\nimport { AuthenticationApiRequestFactory, AuthenticationApiResponseProcessor} from \"../apis/AuthenticationApi\";\n\nexport interface AuthenticationApiV1AuthenticationAppPortalAccessRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationAppPortalAccess\n     */\n    appId: string\n    /**\n     * \n     * @type AppPortalAccessIn\n     * @memberof AuthenticationApiv1AuthenticationAppPortalAccess\n     */\n    appPortalAccessIn: AppPortalAccessIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationAppPortalAccess\n     */\n    idempotencyKey?: string\n}\n\nexport interface AuthenticationApiV1AuthenticationCreateMessageTokenRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationCreateMessageToken\n     */\n    appId: string\n    /**\n     * \n     * @type CreateTokenIn\n     * @memberof AuthenticationApiv1AuthenticationCreateMessageToken\n     */\n    createTokenIn: CreateTokenIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationCreateMessageToken\n     */\n    idempotencyKey?: string\n}\n\nexport interface AuthenticationApiV1AuthenticationDashboardAccessRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationDashboardAccess\n     */\n    appId: string\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationDashboardAccess\n     */\n    idempotencyKey?: string\n}\n\nexport interface AuthenticationApiV1AuthenticationExchangeOneTimeTokenRequest {\n    /**\n     * \n     * @type OneTimeTokenIn\n     * @memberof AuthenticationApiv1AuthenticationExchangeOneTimeToken\n     */\n    oneTimeTokenIn: OneTimeTokenIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationExchangeOneTimeToken\n     */\n    idempotencyKey?: string\n}\n\nexport interface AuthenticationApiV1AuthenticationExpireAllRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationExpireAll\n     */\n    appId: string\n    /**\n     * \n     * @type ApplicationTokenExpireIn\n     * @memberof AuthenticationApiv1AuthenticationExpireAll\n     */\n    applicationTokenExpireIn: ApplicationTokenExpireIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationExpireAll\n     */\n    idempotencyKey?: string\n}\n\nexport interface AuthenticationApiV1AuthenticationGetPollerTokenRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationGetPollerToken\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationGetPollerToken\n     */\n    endpointId: string\n}\n\nexport interface AuthenticationApiV1AuthenticationLogoutRequest {\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationLogout\n     */\n    idempotencyKey?: string\n}\n\nexport interface AuthenticationApiV1AuthenticationRotatePollerTokenRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationRotatePollerToken\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationRotatePollerToken\n     */\n    endpointId: string\n    /**\n     * \n     * @type RotatePollerTokenIn\n     * @memberof AuthenticationApiv1AuthenticationRotatePollerToken\n     */\n    rotatePollerTokenIn: RotatePollerTokenIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationRotatePollerToken\n     */\n    idempotencyKey?: string\n}\n\nexport class ObjectAuthenticationApi {\n    private api: ObservableAuthenticationApi\n\n    public constructor(configuration: Configuration, requestFactory?: AuthenticationApiRequestFactory, responseProcessor?: AuthenticationApiResponseProcessor) {\n        this.api = new ObservableAuthenticationApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.\n     * Get Consumer App Portal Access\n     * @param param the request object\n     */\n    public v1AuthenticationAppPortalAccessWithHttpInfo(param: AuthenticationApiV1AuthenticationAppPortalAccessRequest, options?: Configuration): Promise<HttpInfo<AppPortalAccessOut>> {\n        return this.api.v1AuthenticationAppPortalAccessWithHttpInfo(param.appId, param.appPortalAccessIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.\n     * Get Consumer App Portal Access\n     * @param param the request object\n     */\n    public v1AuthenticationAppPortalAccess(param: AuthenticationApiV1AuthenticationAppPortalAccessRequest, options?: Configuration): Promise<AppPortalAccessOut> {\n        return this.api.v1AuthenticationAppPortalAccess(param.appId, param.appPortalAccessIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Create a new access token that only allows creating messages inside this application.\n     * Create Cmg Token\n     * @param param the request object\n     */\n    public v1AuthenticationCreateMessageTokenWithHttpInfo(param: AuthenticationApiV1AuthenticationCreateMessageTokenRequest, options?: Configuration): Promise<HttpInfo<AuthTokenOut>> {\n        return this.api.v1AuthenticationCreateMessageTokenWithHttpInfo(param.appId, param.createTokenIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Create a new access token that only allows creating messages inside this application.\n     * Create Cmg Token\n     * @param param the request object\n     */\n    public v1AuthenticationCreateMessageToken(param: AuthenticationApiV1AuthenticationCreateMessageTokenRequest, options?: Configuration): Promise<AuthTokenOut> {\n        return this.api.v1AuthenticationCreateMessageToken(param.appId, param.createTokenIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * DEPRECATED: Please use `app-portal-access` instead.  Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.\n     * Dashboard Access\n     * @param param the request object\n     */\n    public v1AuthenticationDashboardAccessWithHttpInfo(param: AuthenticationApiV1AuthenticationDashboardAccessRequest, options?: Configuration): Promise<HttpInfo<DashboardAccessOut>> {\n        return this.api.v1AuthenticationDashboardAccessWithHttpInfo(param.appId, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * DEPRECATED: Please use `app-portal-access` instead.  Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.\n     * Dashboard Access\n     * @param param the request object\n     */\n    public v1AuthenticationDashboardAccess(param: AuthenticationApiV1AuthenticationDashboardAccessRequest, options?: Configuration): Promise<DashboardAccessOut> {\n        return this.api.v1AuthenticationDashboardAccess(param.appId, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * This is a one time token.\n     * Exchange One Time Token\n     * @param param the request object\n     */\n    public v1AuthenticationExchangeOneTimeTokenWithHttpInfo(param: AuthenticationApiV1AuthenticationExchangeOneTimeTokenRequest, options?: Configuration): Promise<HttpInfo<OneTimeTokenOut>> {\n        return this.api.v1AuthenticationExchangeOneTimeTokenWithHttpInfo(param.oneTimeTokenIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * This is a one time token.\n     * Exchange One Time Token\n     * @param param the request object\n     */\n    public v1AuthenticationExchangeOneTimeToken(param: AuthenticationApiV1AuthenticationExchangeOneTimeTokenRequest, options?: Configuration): Promise<OneTimeTokenOut> {\n        return this.api.v1AuthenticationExchangeOneTimeToken(param.oneTimeTokenIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Expire all of the tokens associated with a specific application.\n     * Expire All\n     * @param param the request object\n     */\n    public v1AuthenticationExpireAllWithHttpInfo(param: AuthenticationApiV1AuthenticationExpireAllRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1AuthenticationExpireAllWithHttpInfo(param.appId, param.applicationTokenExpireIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Expire all of the tokens associated with a specific application.\n     * Expire All\n     * @param param the request object\n     */\n    public v1AuthenticationExpireAll(param: AuthenticationApiV1AuthenticationExpireAllRequest, options?: Configuration): Promise<void> {\n        return this.api.v1AuthenticationExpireAll(param.appId, param.applicationTokenExpireIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Get the current auth token for the poller.\n     * Get Poller Token\n     * @param param the request object\n     */\n    public v1AuthenticationGetPollerTokenWithHttpInfo(param: AuthenticationApiV1AuthenticationGetPollerTokenRequest, options?: Configuration): Promise<HttpInfo<AuthTokenOut>> {\n        return this.api.v1AuthenticationGetPollerTokenWithHttpInfo(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Get the current auth token for the poller.\n     * Get Poller Token\n     * @param param the request object\n     */\n    public v1AuthenticationGetPollerToken(param: AuthenticationApiV1AuthenticationGetPollerTokenRequest, options?: Configuration): Promise<AuthTokenOut> {\n        return this.api.v1AuthenticationGetPollerToken(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Logout an app token.  Trying to log out other tokens will fail.\n     * Logout\n     * @param param the request object\n     */\n    public v1AuthenticationLogoutWithHttpInfo(param: AuthenticationApiV1AuthenticationLogoutRequest = {}, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1AuthenticationLogoutWithHttpInfo(param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Logout an app token.  Trying to log out other tokens will fail.\n     * Logout\n     * @param param the request object\n     */\n    public v1AuthenticationLogout(param: AuthenticationApiV1AuthenticationLogoutRequest = {}, options?: Configuration): Promise<void> {\n        return this.api.v1AuthenticationLogout(param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Create a new auth token that can for the poller API.\n     * Rotate Poller Token\n     * @param param the request object\n     */\n    public v1AuthenticationRotatePollerTokenWithHttpInfo(param: AuthenticationApiV1AuthenticationRotatePollerTokenRequest, options?: Configuration): Promise<HttpInfo<AuthTokenOut>> {\n        return this.api.v1AuthenticationRotatePollerTokenWithHttpInfo(param.appId, param.endpointId, param.rotatePollerTokenIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Create a new auth token that can for the poller API.\n     * Rotate Poller Token\n     * @param param the request object\n     */\n    public v1AuthenticationRotatePollerToken(param: AuthenticationApiV1AuthenticationRotatePollerTokenRequest, options?: Configuration): Promise<AuthTokenOut> {\n        return this.api.v1AuthenticationRotatePollerToken(param.appId, param.endpointId, param.rotatePollerTokenIn, param.idempotencyKey,  options).toPromise();\n    }\n\n}\n\nimport { ObservableBackgroundTasksApi } from \"./ObservableAPI\";\nimport { BackgroundTasksApiRequestFactory, BackgroundTasksApiResponseProcessor} from \"../apis/BackgroundTasksApi\";\n\nexport interface BackgroundTasksApiGetBackgroundTaskRequest {\n    /**\n     * \n     * Defaults to: undefined\n     * @type string\n     * @memberof BackgroundTasksApigetBackgroundTask\n     */\n    taskId: string\n}\n\nexport interface BackgroundTasksApiListBackgroundTasksRequest {\n    /**\n     * Filter the response based on the status.\n     * Defaults to: undefined\n     * @type BackgroundTaskStatus\n     * @memberof BackgroundTasksApilistBackgroundTasks\n     */\n    status?: BackgroundTaskStatus\n    /**\n     * Filter the response based on the type.\n     * Defaults to: undefined\n     * @type BackgroundTaskType\n     * @memberof BackgroundTasksApilistBackgroundTasks\n     */\n    task?: BackgroundTaskType\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof BackgroundTasksApilistBackgroundTasks\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof BackgroundTasksApilistBackgroundTasks\n     */\n    iterator?: string\n    /**\n     * The sorting order of the returned items\n     * Defaults to: undefined\n     * @type Ordering\n     * @memberof BackgroundTasksApilistBackgroundTasks\n     */\n    order?: Ordering\n}\n\nexport class ObjectBackgroundTasksApi {\n    private api: ObservableBackgroundTasksApi\n\n    public constructor(configuration: Configuration, requestFactory?: BackgroundTasksApiRequestFactory, responseProcessor?: BackgroundTasksApiResponseProcessor) {\n        this.api = new ObservableBackgroundTasksApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Get a background task by ID.\n     * Get Background Task\n     * @param param the request object\n     */\n    public getBackgroundTaskWithHttpInfo(param: BackgroundTasksApiGetBackgroundTaskRequest, options?: Configuration): Promise<HttpInfo<BackgroundTaskOut>> {\n        return this.api.getBackgroundTaskWithHttpInfo(param.taskId,  options).toPromise();\n    }\n\n    /**\n     * Get a background task by ID.\n     * Get Background Task\n     * @param param the request object\n     */\n    public getBackgroundTask(param: BackgroundTasksApiGetBackgroundTaskRequest, options?: Configuration): Promise<BackgroundTaskOut> {\n        return this.api.getBackgroundTask(param.taskId,  options).toPromise();\n    }\n\n    /**\n     * List background tasks executed in the past 90 days.\n     * List Background Tasks\n     * @param param the request object\n     */\n    public listBackgroundTasksWithHttpInfo(param: BackgroundTasksApiListBackgroundTasksRequest = {}, options?: Configuration): Promise<HttpInfo<ListResponseBackgroundTaskOut>> {\n        return this.api.listBackgroundTasksWithHttpInfo(param.status, param.task, param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * List background tasks executed in the past 90 days.\n     * List Background Tasks\n     * @param param the request object\n     */\n    public listBackgroundTasks(param: BackgroundTasksApiListBackgroundTasksRequest = {}, options?: Configuration): Promise<ListResponseBackgroundTaskOut> {\n        return this.api.listBackgroundTasks(param.status, param.task, param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n}\n\nimport { ObservableBroadcastApi } from \"./ObservableAPI\";\nimport { BroadcastApiRequestFactory, BroadcastApiResponseProcessor} from \"../apis/BroadcastApi\";\n\nexport interface BroadcastApiCreateBroadcastMessageRequest {\n    /**\n     * \n     * @type MessageBroadcastIn\n     * @memberof BroadcastApicreateBroadcastMessage\n     */\n    messageBroadcastIn: MessageBroadcastIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof BroadcastApicreateBroadcastMessage\n     */\n    idempotencyKey?: string\n}\n\nexport class ObjectBroadcastApi {\n    private api: ObservableBroadcastApi\n\n    public constructor(configuration: Configuration, requestFactory?: BroadcastApiRequestFactory, responseProcessor?: BroadcastApiResponseProcessor) {\n        this.api = new ObservableBroadcastApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Creates a background task to send the same message to each application in your organization.\n     * Create Broadcast Message\n     * @param param the request object\n     */\n    public createBroadcastMessageWithHttpInfo(param: BroadcastApiCreateBroadcastMessageRequest, options?: Configuration): Promise<HttpInfo<MessageBroadcastOut>> {\n        return this.api.createBroadcastMessageWithHttpInfo(param.messageBroadcastIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Creates a background task to send the same message to each application in your organization.\n     * Create Broadcast Message\n     * @param param the request object\n     */\n    public createBroadcastMessage(param: BroadcastApiCreateBroadcastMessageRequest, options?: Configuration): Promise<MessageBroadcastOut> {\n        return this.api.createBroadcastMessage(param.messageBroadcastIn, param.idempotencyKey,  options).toPromise();\n    }\n\n}\n\nimport { ObservableEndpointApi } from \"./ObservableAPI\";\nimport { EndpointApiRequestFactory, EndpointApiResponseProcessor} from \"../apis/EndpointApi\";\n\nexport interface EndpointApiV1EndpointCreateRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointCreate\n     */\n    appId: string\n    /**\n     * \n     * @type EndpointIn\n     * @memberof EndpointApiv1EndpointCreate\n     */\n    endpointIn: EndpointIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointCreate\n     */\n    idempotencyKey?: string\n}\n\nexport interface EndpointApiV1EndpointDeleteRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointDelete\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointDelete\n     */\n    endpointId: string\n}\n\nexport interface EndpointApiV1EndpointDeleteMtlsConfigRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointDeleteMtlsConfig\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointDeleteMtlsConfig\n     */\n    endpointId: string\n}\n\nexport interface EndpointApiV1EndpointDeleteOauthConfigRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointDeleteOauthConfig\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointDeleteOauthConfig\n     */\n    endpointId: string\n}\n\nexport interface EndpointApiV1EndpointGetRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointGet\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointGet\n     */\n    endpointId: string\n}\n\nexport interface EndpointApiV1EndpointGetHeadersRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointGetHeaders\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointGetHeaders\n     */\n    endpointId: string\n}\n\nexport interface EndpointApiV1EndpointGetSecretRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointGetSecret\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointGetSecret\n     */\n    endpointId: string\n}\n\nexport interface EndpointApiV1EndpointGetStatsRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointGetStats\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointGetStats\n     */\n    endpointId: string\n    /**\n     * Filter the range to data starting from this date.\n     * Defaults to: undefined\n     * @type Date\n     * @memberof EndpointApiv1EndpointGetStats\n     */\n    since?: Date\n    /**\n     * Filter the range to data ending by this date.\n     * Defaults to: undefined\n     * @type Date\n     * @memberof EndpointApiv1EndpointGetStats\n     */\n    until?: Date\n}\n\nexport interface EndpointApiV1EndpointListRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointList\n     */\n    appId: string\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof EndpointApiv1EndpointList\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointList\n     */\n    iterator?: string\n    /**\n     * The sorting order of the returned items\n     * Defaults to: undefined\n     * @type Ordering\n     * @memberof EndpointApiv1EndpointList\n     */\n    order?: Ordering\n}\n\nexport interface EndpointApiV1EndpointPatchRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointPatch\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointPatch\n     */\n    endpointId: string\n    /**\n     * \n     * @type EndpointPatch\n     * @memberof EndpointApiv1EndpointPatch\n     */\n    endpointPatch: EndpointPatch\n}\n\nexport interface EndpointApiV1EndpointPatchHeadersRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointPatchHeaders\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointPatchHeaders\n     */\n    endpointId: string\n    /**\n     * \n     * @type EndpointHeadersPatchIn\n     * @memberof EndpointApiv1EndpointPatchHeaders\n     */\n    endpointHeadersPatchIn: EndpointHeadersPatchIn\n}\n\nexport interface EndpointApiV1EndpointRecoverRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointRecover\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointRecover\n     */\n    endpointId: string\n    /**\n     * \n     * @type RecoverIn\n     * @memberof EndpointApiv1EndpointRecover\n     */\n    recoverIn: RecoverIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointRecover\n     */\n    idempotencyKey?: string\n}\n\nexport interface EndpointApiV1EndpointReplayMissingRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointReplayMissing\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointReplayMissing\n     */\n    endpointId: string\n    /**\n     * \n     * @type ReplayIn\n     * @memberof EndpointApiv1EndpointReplayMissing\n     */\n    replayIn: ReplayIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointReplayMissing\n     */\n    idempotencyKey?: string\n}\n\nexport interface EndpointApiV1EndpointRotateSecretRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointRotateSecret\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointRotateSecret\n     */\n    endpointId: string\n    /**\n     * \n     * @type EndpointSecretRotateIn\n     * @memberof EndpointApiv1EndpointRotateSecret\n     */\n    endpointSecretRotateIn: EndpointSecretRotateIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointRotateSecret\n     */\n    idempotencyKey?: string\n}\n\nexport interface EndpointApiV1EndpointSendExampleRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointSendExample\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointSendExample\n     */\n    endpointId: string\n    /**\n     * \n     * @type EventExampleIn\n     * @memberof EndpointApiv1EndpointSendExample\n     */\n    eventExampleIn: EventExampleIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointSendExample\n     */\n    idempotencyKey?: string\n}\n\nexport interface EndpointApiV1EndpointTransformationGetRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointTransformationGet\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointTransformationGet\n     */\n    endpointId: string\n}\n\nexport interface EndpointApiV1EndpointTransformationPartialUpdateRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointTransformationPartialUpdate\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointTransformationPartialUpdate\n     */\n    endpointId: string\n    /**\n     * \n     * @type EndpointTransformationIn\n     * @memberof EndpointApiv1EndpointTransformationPartialUpdate\n     */\n    endpointTransformationIn: EndpointTransformationIn\n}\n\nexport interface EndpointApiV1EndpointTransformationSimulateRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointTransformationSimulate\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointTransformationSimulate\n     */\n    endpointId: string\n    /**\n     * \n     * @type EndpointTransformationSimulateIn\n     * @memberof EndpointApiv1EndpointTransformationSimulate\n     */\n    endpointTransformationSimulateIn: EndpointTransformationSimulateIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointTransformationSimulate\n     */\n    idempotencyKey?: string\n}\n\nexport interface EndpointApiV1EndpointUpdateRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointUpdate\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointUpdate\n     */\n    endpointId: string\n    /**\n     * \n     * @type EndpointUpdate\n     * @memberof EndpointApiv1EndpointUpdate\n     */\n    endpointUpdate: EndpointUpdate\n}\n\nexport interface EndpointApiV1EndpointUpdateHeadersRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointUpdateHeaders\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointUpdateHeaders\n     */\n    endpointId: string\n    /**\n     * \n     * @type EndpointHeadersIn\n     * @memberof EndpointApiv1EndpointUpdateHeaders\n     */\n    endpointHeadersIn: EndpointHeadersIn\n}\n\nexport interface EndpointApiV1EndpointUpdateMtlsConfigRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointUpdateMtlsConfig\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointUpdateMtlsConfig\n     */\n    endpointId: string\n    /**\n     * \n     * @type EndpointMtlsConfigIn\n     * @memberof EndpointApiv1EndpointUpdateMtlsConfig\n     */\n    endpointMtlsConfigIn: EndpointMtlsConfigIn\n}\n\nexport interface EndpointApiV1EndpointUpdateOauthConfigRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointUpdateOauthConfig\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1EndpointUpdateOauthConfig\n     */\n    endpointId: string\n    /**\n     * \n     * @type EndpointOauthConfigIn\n     * @memberof EndpointApiv1EndpointUpdateOauthConfig\n     */\n    endpointOauthConfigIn: EndpointOauthConfigIn\n}\n\nexport interface EndpointApiV1SinkCreateRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1SinkCreate\n     */\n    appId: string\n    /**\n     * \n     * @type SinkIn\n     * @memberof EndpointApiv1SinkCreate\n     */\n    sinkIn: SinkIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1SinkCreate\n     */\n    idempotencyKey?: string\n}\n\nexport interface EndpointApiV1SinkGetRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1SinkGet\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1SinkGet\n     */\n    sinkId: string\n}\n\nexport interface EndpointApiV1SinkListRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1SinkList\n     */\n    appId: string\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof EndpointApiv1SinkList\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof EndpointApiv1SinkList\n     */\n    iterator?: string\n    /**\n     * The sorting order of the returned items\n     * Defaults to: undefined\n     * @type Ordering\n     * @memberof EndpointApiv1SinkList\n     */\n    order?: Ordering\n}\n\nexport class ObjectEndpointApi {\n    private api: ObservableEndpointApi\n\n    public constructor(configuration: Configuration, requestFactory?: EndpointApiRequestFactory, responseProcessor?: EndpointApiResponseProcessor) {\n        this.api = new ObservableEndpointApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Create a new endpoint for the application.  When `secret` is `null` the secret is automatically generated (recommended).\n     * Create Endpoint\n     * @param param the request object\n     */\n    public v1EndpointCreateWithHttpInfo(param: EndpointApiV1EndpointCreateRequest, options?: Configuration): Promise<HttpInfo<EndpointOut>> {\n        return this.api.v1EndpointCreateWithHttpInfo(param.appId, param.endpointIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Create a new endpoint for the application.  When `secret` is `null` the secret is automatically generated (recommended).\n     * Create Endpoint\n     * @param param the request object\n     */\n    public v1EndpointCreate(param: EndpointApiV1EndpointCreateRequest, options?: Configuration): Promise<EndpointOut> {\n        return this.api.v1EndpointCreate(param.appId, param.endpointIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Delete an endpoint.\n     * Delete Endpoint\n     * @param param the request object\n     */\n    public v1EndpointDeleteWithHttpInfo(param: EndpointApiV1EndpointDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1EndpointDeleteWithHttpInfo(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Delete an endpoint.\n     * Delete Endpoint\n     * @param param the request object\n     */\n    public v1EndpointDelete(param: EndpointApiV1EndpointDeleteRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointDelete(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Delete endpoint mTLS configuration.\n     * Delete Endpoint Mtls Config\n     * @param param the request object\n     */\n    public v1EndpointDeleteMtlsConfigWithHttpInfo(param: EndpointApiV1EndpointDeleteMtlsConfigRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1EndpointDeleteMtlsConfigWithHttpInfo(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Delete endpoint mTLS configuration.\n     * Delete Endpoint Mtls Config\n     * @param param the request object\n     */\n    public v1EndpointDeleteMtlsConfig(param: EndpointApiV1EndpointDeleteMtlsConfigRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointDeleteMtlsConfig(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Delete endpoint OAuth configuration.\n     * Delete Endpoint Oauth Config\n     * @param param the request object\n     */\n    public v1EndpointDeleteOauthConfigWithHttpInfo(param: EndpointApiV1EndpointDeleteOauthConfigRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1EndpointDeleteOauthConfigWithHttpInfo(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Delete endpoint OAuth configuration.\n     * Delete Endpoint Oauth Config\n     * @param param the request object\n     */\n    public v1EndpointDeleteOauthConfig(param: EndpointApiV1EndpointDeleteOauthConfigRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointDeleteOauthConfig(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Get an endpoint.\n     * Get Endpoint\n     * @param param the request object\n     */\n    public v1EndpointGetWithHttpInfo(param: EndpointApiV1EndpointGetRequest, options?: Configuration): Promise<HttpInfo<EndpointOut>> {\n        return this.api.v1EndpointGetWithHttpInfo(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Get an endpoint.\n     * Get Endpoint\n     * @param param the request object\n     */\n    public v1EndpointGet(param: EndpointApiV1EndpointGetRequest, options?: Configuration): Promise<EndpointOut> {\n        return this.api.v1EndpointGet(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Get the additional headers to be sent with the webhook.\n     * Get Endpoint Headers\n     * @param param the request object\n     */\n    public v1EndpointGetHeadersWithHttpInfo(param: EndpointApiV1EndpointGetHeadersRequest, options?: Configuration): Promise<HttpInfo<EndpointHeadersOut>> {\n        return this.api.v1EndpointGetHeadersWithHttpInfo(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Get the additional headers to be sent with the webhook.\n     * Get Endpoint Headers\n     * @param param the request object\n     */\n    public v1EndpointGetHeaders(param: EndpointApiV1EndpointGetHeadersRequest, options?: Configuration): Promise<EndpointHeadersOut> {\n        return this.api.v1EndpointGetHeaders(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Get the endpoint\\'s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).\n     * Get Endpoint Secret\n     * @param param the request object\n     */\n    public v1EndpointGetSecretWithHttpInfo(param: EndpointApiV1EndpointGetSecretRequest, options?: Configuration): Promise<HttpInfo<EndpointSecretOut>> {\n        return this.api.v1EndpointGetSecretWithHttpInfo(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Get the endpoint\\'s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).\n     * Get Endpoint Secret\n     * @param param the request object\n     */\n    public v1EndpointGetSecret(param: EndpointApiV1EndpointGetSecretRequest, options?: Configuration): Promise<EndpointSecretOut> {\n        return this.api.v1EndpointGetSecret(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Get basic statistics for the endpoint.\n     * Endpoint Stats\n     * @param param the request object\n     */\n    public v1EndpointGetStatsWithHttpInfo(param: EndpointApiV1EndpointGetStatsRequest, options?: Configuration): Promise<HttpInfo<EndpointStats>> {\n        return this.api.v1EndpointGetStatsWithHttpInfo(param.appId, param.endpointId, param.since, param.until,  options).toPromise();\n    }\n\n    /**\n     * Get basic statistics for the endpoint.\n     * Endpoint Stats\n     * @param param the request object\n     */\n    public v1EndpointGetStats(param: EndpointApiV1EndpointGetStatsRequest, options?: Configuration): Promise<EndpointStats> {\n        return this.api.v1EndpointGetStats(param.appId, param.endpointId, param.since, param.until,  options).toPromise();\n    }\n\n    /**\n     * List the application\\'s endpoints.\n     * List Endpoints\n     * @param param the request object\n     */\n    public v1EndpointListWithHttpInfo(param: EndpointApiV1EndpointListRequest, options?: Configuration): Promise<HttpInfo<ListResponseEndpointOut>> {\n        return this.api.v1EndpointListWithHttpInfo(param.appId, param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * List the application\\'s endpoints.\n     * List Endpoints\n     * @param param the request object\n     */\n    public v1EndpointList(param: EndpointApiV1EndpointListRequest, options?: Configuration): Promise<ListResponseEndpointOut> {\n        return this.api.v1EndpointList(param.appId, param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * Partially update an endpoint.\n     * Patch Endpoint\n     * @param param the request object\n     */\n    public v1EndpointPatchWithHttpInfo(param: EndpointApiV1EndpointPatchRequest, options?: Configuration): Promise<HttpInfo<EndpointOut>> {\n        return this.api.v1EndpointPatchWithHttpInfo(param.appId, param.endpointId, param.endpointPatch,  options).toPromise();\n    }\n\n    /**\n     * Partially update an endpoint.\n     * Patch Endpoint\n     * @param param the request object\n     */\n    public v1EndpointPatch(param: EndpointApiV1EndpointPatchRequest, options?: Configuration): Promise<EndpointOut> {\n        return this.api.v1EndpointPatch(param.appId, param.endpointId, param.endpointPatch,  options).toPromise();\n    }\n\n    /**\n     * Partially set the additional headers to be sent with the webhook.\n     * Patch Endpoint Headers\n     * @param param the request object\n     */\n    public v1EndpointPatchHeadersWithHttpInfo(param: EndpointApiV1EndpointPatchHeadersRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1EndpointPatchHeadersWithHttpInfo(param.appId, param.endpointId, param.endpointHeadersPatchIn,  options).toPromise();\n    }\n\n    /**\n     * Partially set the additional headers to be sent with the webhook.\n     * Patch Endpoint Headers\n     * @param param the request object\n     */\n    public v1EndpointPatchHeaders(param: EndpointApiV1EndpointPatchHeadersRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointPatchHeaders(param.appId, param.endpointId, param.endpointHeadersPatchIn,  options).toPromise();\n    }\n\n    /**\n     * Resend all failed messages since a given time.  Messages that were sent successfully, even if failed initially, are not resent.\n     * Recover Failed Webhooks\n     * @param param the request object\n     */\n    public v1EndpointRecoverWithHttpInfo(param: EndpointApiV1EndpointRecoverRequest, options?: Configuration): Promise<HttpInfo<RecoverOut>> {\n        return this.api.v1EndpointRecoverWithHttpInfo(param.appId, param.endpointId, param.recoverIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Resend all failed messages since a given time.  Messages that were sent successfully, even if failed initially, are not resent.\n     * Recover Failed Webhooks\n     * @param param the request object\n     */\n    public v1EndpointRecover(param: EndpointApiV1EndpointRecoverRequest, options?: Configuration): Promise<RecoverOut> {\n        return this.api.v1EndpointRecover(param.appId, param.endpointId, param.recoverIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Replays messages to the endpoint.  Only messages that were created after `since` will be sent. Messages that were previously sent to the endpoint are not resent.\n     * Replay Missing Webhooks\n     * @param param the request object\n     */\n    public v1EndpointReplayMissingWithHttpInfo(param: EndpointApiV1EndpointReplayMissingRequest, options?: Configuration): Promise<HttpInfo<ReplayOut>> {\n        return this.api.v1EndpointReplayMissingWithHttpInfo(param.appId, param.endpointId, param.replayIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Replays messages to the endpoint.  Only messages that were created after `since` will be sent. Messages that were previously sent to the endpoint are not resent.\n     * Replay Missing Webhooks\n     * @param param the request object\n     */\n    public v1EndpointReplayMissing(param: EndpointApiV1EndpointReplayMissingRequest, options?: Configuration): Promise<ReplayOut> {\n        return this.api.v1EndpointReplayMissing(param.appId, param.endpointId, param.replayIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Rotates the endpoint\\'s signing secret.  The previous secret will remain valid for the next 24 hours.\n     * Rotate Endpoint Secret\n     * @param param the request object\n     */\n    public v1EndpointRotateSecretWithHttpInfo(param: EndpointApiV1EndpointRotateSecretRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1EndpointRotateSecretWithHttpInfo(param.appId, param.endpointId, param.endpointSecretRotateIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Rotates the endpoint\\'s signing secret.  The previous secret will remain valid for the next 24 hours.\n     * Rotate Endpoint Secret\n     * @param param the request object\n     */\n    public v1EndpointRotateSecret(param: EndpointApiV1EndpointRotateSecretRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointRotateSecret(param.appId, param.endpointId, param.endpointSecretRotateIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Send an example message for an event.\n     * Send Event Type Example Message\n     * @param param the request object\n     */\n    public v1EndpointSendExampleWithHttpInfo(param: EndpointApiV1EndpointSendExampleRequest, options?: Configuration): Promise<HttpInfo<MessageOut>> {\n        return this.api.v1EndpointSendExampleWithHttpInfo(param.appId, param.endpointId, param.eventExampleIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Send an example message for an event.\n     * Send Event Type Example Message\n     * @param param the request object\n     */\n    public v1EndpointSendExample(param: EndpointApiV1EndpointSendExampleRequest, options?: Configuration): Promise<MessageOut> {\n        return this.api.v1EndpointSendExample(param.appId, param.endpointId, param.eventExampleIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Get the transformation code associated with this endpoint.\n     * Get Endpoint Transformation\n     * @param param the request object\n     */\n    public v1EndpointTransformationGetWithHttpInfo(param: EndpointApiV1EndpointTransformationGetRequest, options?: Configuration): Promise<HttpInfo<EndpointTransformationOut>> {\n        return this.api.v1EndpointTransformationGetWithHttpInfo(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Get the transformation code associated with this endpoint.\n     * Get Endpoint Transformation\n     * @param param the request object\n     */\n    public v1EndpointTransformationGet(param: EndpointApiV1EndpointTransformationGetRequest, options?: Configuration): Promise<EndpointTransformationOut> {\n        return this.api.v1EndpointTransformationGet(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Set or unset the transformation code associated with this endpoint.\n     * Set Endpoint Transformation\n     * @param param the request object\n     */\n    public v1EndpointTransformationPartialUpdateWithHttpInfo(param: EndpointApiV1EndpointTransformationPartialUpdateRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1EndpointTransformationPartialUpdateWithHttpInfo(param.appId, param.endpointId, param.endpointTransformationIn,  options).toPromise();\n    }\n\n    /**\n     * Set or unset the transformation code associated with this endpoint.\n     * Set Endpoint Transformation\n     * @param param the request object\n     */\n    public v1EndpointTransformationPartialUpdate(param: EndpointApiV1EndpointTransformationPartialUpdateRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointTransformationPartialUpdate(param.appId, param.endpointId, param.endpointTransformationIn,  options).toPromise();\n    }\n\n    /**\n     * Simulate running the transformation on the payload and code.\n     * Simulate\n     * @param param the request object\n     */\n    public v1EndpointTransformationSimulateWithHttpInfo(param: EndpointApiV1EndpointTransformationSimulateRequest, options?: Configuration): Promise<HttpInfo<EndpointTransformationSimulateOut>> {\n        return this.api.v1EndpointTransformationSimulateWithHttpInfo(param.appId, param.endpointId, param.endpointTransformationSimulateIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Simulate running the transformation on the payload and code.\n     * Simulate\n     * @param param the request object\n     */\n    public v1EndpointTransformationSimulate(param: EndpointApiV1EndpointTransformationSimulateRequest, options?: Configuration): Promise<EndpointTransformationSimulateOut> {\n        return this.api.v1EndpointTransformationSimulate(param.appId, param.endpointId, param.endpointTransformationSimulateIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Update an endpoint.\n     * Update Endpoint\n     * @param param the request object\n     */\n    public v1EndpointUpdateWithHttpInfo(param: EndpointApiV1EndpointUpdateRequest, options?: Configuration): Promise<HttpInfo<EndpointOut>> {\n        return this.api.v1EndpointUpdateWithHttpInfo(param.appId, param.endpointId, param.endpointUpdate,  options).toPromise();\n    }\n\n    /**\n     * Update an endpoint.\n     * Update Endpoint\n     * @param param the request object\n     */\n    public v1EndpointUpdate(param: EndpointApiV1EndpointUpdateRequest, options?: Configuration): Promise<EndpointOut> {\n        return this.api.v1EndpointUpdate(param.appId, param.endpointId, param.endpointUpdate,  options).toPromise();\n    }\n\n    /**\n     * Set the additional headers to be sent with the webhook.\n     * Update Endpoint Headers\n     * @param param the request object\n     */\n    public v1EndpointUpdateHeadersWithHttpInfo(param: EndpointApiV1EndpointUpdateHeadersRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1EndpointUpdateHeadersWithHttpInfo(param.appId, param.endpointId, param.endpointHeadersIn,  options).toPromise();\n    }\n\n    /**\n     * Set the additional headers to be sent with the webhook.\n     * Update Endpoint Headers\n     * @param param the request object\n     */\n    public v1EndpointUpdateHeaders(param: EndpointApiV1EndpointUpdateHeadersRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointUpdateHeaders(param.appId, param.endpointId, param.endpointHeadersIn,  options).toPromise();\n    }\n\n    /**\n     * Create/update endpoint mTLS configuration.\n     * Update Endpoint Mtls Config\n     * @param param the request object\n     */\n    public v1EndpointUpdateMtlsConfigWithHttpInfo(param: EndpointApiV1EndpointUpdateMtlsConfigRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1EndpointUpdateMtlsConfigWithHttpInfo(param.appId, param.endpointId, param.endpointMtlsConfigIn,  options).toPromise();\n    }\n\n    /**\n     * Create/update endpoint mTLS configuration.\n     * Update Endpoint Mtls Config\n     * @param param the request object\n     */\n    public v1EndpointUpdateMtlsConfig(param: EndpointApiV1EndpointUpdateMtlsConfigRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointUpdateMtlsConfig(param.appId, param.endpointId, param.endpointMtlsConfigIn,  options).toPromise();\n    }\n\n    /**\n     * Create/update endpoint OAuth configuration.\n     * Update Endpoint Oauth Config\n     * @param param the request object\n     */\n    public v1EndpointUpdateOauthConfigWithHttpInfo(param: EndpointApiV1EndpointUpdateOauthConfigRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1EndpointUpdateOauthConfigWithHttpInfo(param.appId, param.endpointId, param.endpointOauthConfigIn,  options).toPromise();\n    }\n\n    /**\n     * Create/update endpoint OAuth configuration.\n     * Update Endpoint Oauth Config\n     * @param param the request object\n     */\n    public v1EndpointUpdateOauthConfig(param: EndpointApiV1EndpointUpdateOauthConfigRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointUpdateOauthConfig(param.appId, param.endpointId, param.endpointOauthConfigIn,  options).toPromise();\n    }\n\n    /**\n     * Create a new sink for the application.\n     * Create Sink\n     * @param param the request object\n     */\n    public v1SinkCreateWithHttpInfo(param: EndpointApiV1SinkCreateRequest, options?: Configuration): Promise<HttpInfo<SinkOut>> {\n        return this.api.v1SinkCreateWithHttpInfo(param.appId, param.sinkIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Create a new sink for the application.\n     * Create Sink\n     * @param param the request object\n     */\n    public v1SinkCreate(param: EndpointApiV1SinkCreateRequest, options?: Configuration): Promise<SinkOut> {\n        return this.api.v1SinkCreate(param.appId, param.sinkIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Get a sink.\n     * Get Sink\n     * @param param the request object\n     */\n    public v1SinkGetWithHttpInfo(param: EndpointApiV1SinkGetRequest, options?: Configuration): Promise<HttpInfo<SinkOut>> {\n        return this.api.v1SinkGetWithHttpInfo(param.appId, param.sinkId,  options).toPromise();\n    }\n\n    /**\n     * Get a sink.\n     * Get Sink\n     * @param param the request object\n     */\n    public v1SinkGet(param: EndpointApiV1SinkGetRequest, options?: Configuration): Promise<SinkOut> {\n        return this.api.v1SinkGet(param.appId, param.sinkId,  options).toPromise();\n    }\n\n    /**\n     * List the application\\'s sinks.\n     * List Sinks\n     * @param param the request object\n     */\n    public v1SinkListWithHttpInfo(param: EndpointApiV1SinkListRequest, options?: Configuration): Promise<HttpInfo<ListResponseSinkOut>> {\n        return this.api.v1SinkListWithHttpInfo(param.appId, param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * List the application\\'s sinks.\n     * List Sinks\n     * @param param the request object\n     */\n    public v1SinkList(param: EndpointApiV1SinkListRequest, options?: Configuration): Promise<ListResponseSinkOut> {\n        return this.api.v1SinkList(param.appId, param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n}\n\nimport { ObservableEnvironmentApi } from \"./ObservableAPI\";\nimport { EnvironmentApiRequestFactory, EnvironmentApiResponseProcessor} from \"../apis/EnvironmentApi\";\n\nexport interface EnvironmentApiV1EnvironmentExportRequest {\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof EnvironmentApiv1EnvironmentExport\n     */\n    idempotencyKey?: string\n}\n\nexport interface EnvironmentApiV1EnvironmentImportRequest {\n    /**\n     * \n     * @type EnvironmentIn\n     * @memberof EnvironmentApiv1EnvironmentImport\n     */\n    environmentIn: EnvironmentIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof EnvironmentApiv1EnvironmentImport\n     */\n    idempotencyKey?: string\n}\n\nexport class ObjectEnvironmentApi {\n    private api: ObservableEnvironmentApi\n\n    public constructor(configuration: Configuration, requestFactory?: EnvironmentApiRequestFactory, responseProcessor?: EnvironmentApiResponseProcessor) {\n        this.api = new ObservableEnvironmentApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Download a JSON file containing all org-settings and event types.\n     * Export Environment Configuration\n     * @param param the request object\n     */\n    public v1EnvironmentExportWithHttpInfo(param: EnvironmentApiV1EnvironmentExportRequest = {}, options?: Configuration): Promise<HttpInfo<EnvironmentOut>> {\n        return this.api.v1EnvironmentExportWithHttpInfo(param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Download a JSON file containing all org-settings and event types.\n     * Export Environment Configuration\n     * @param param the request object\n     */\n    public v1EnvironmentExport(param: EnvironmentApiV1EnvironmentExportRequest = {}, options?: Configuration): Promise<EnvironmentOut> {\n        return this.api.v1EnvironmentExport(param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Import a configuration into the active organization. It doesn\\'t delete anything, only adds/updates what was passed to it.\n     * Import Environment Configuration\n     * @param param the request object\n     */\n    public v1EnvironmentImportWithHttpInfo(param: EnvironmentApiV1EnvironmentImportRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1EnvironmentImportWithHttpInfo(param.environmentIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Import a configuration into the active organization. It doesn\\'t delete anything, only adds/updates what was passed to it.\n     * Import Environment Configuration\n     * @param param the request object\n     */\n    public v1EnvironmentImport(param: EnvironmentApiV1EnvironmentImportRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EnvironmentImport(param.environmentIn, param.idempotencyKey,  options).toPromise();\n    }\n\n}\n\nimport { ObservableEnvironmentSettingsApi } from \"./ObservableAPI\";\nimport { EnvironmentSettingsApiRequestFactory, EnvironmentSettingsApiResponseProcessor} from \"../apis/EnvironmentSettingsApi\";\n\nexport interface EnvironmentSettingsApiV1EnvironmentGetSettingsRequest {\n}\n\nexport class ObjectEnvironmentSettingsApi {\n    private api: ObservableEnvironmentSettingsApi\n\n    public constructor(configuration: Configuration, requestFactory?: EnvironmentSettingsApiRequestFactory, responseProcessor?: EnvironmentSettingsApiResponseProcessor) {\n        this.api = new ObservableEnvironmentSettingsApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Get the environment\\'s settings.\n     * Get Org Settings\n     * @param param the request object\n     */\n    public v1EnvironmentGetSettingsWithHttpInfo(param: EnvironmentSettingsApiV1EnvironmentGetSettingsRequest = {}, options?: Configuration): Promise<HttpInfo<EnvironmentSettingsOut>> {\n        return this.api.v1EnvironmentGetSettingsWithHttpInfo( options).toPromise();\n    }\n\n    /**\n     * Get the environment\\'s settings.\n     * Get Org Settings\n     * @param param the request object\n     */\n    public v1EnvironmentGetSettings(param: EnvironmentSettingsApiV1EnvironmentGetSettingsRequest = {}, options?: Configuration): Promise<EnvironmentSettingsOut> {\n        return this.api.v1EnvironmentGetSettings( options).toPromise();\n    }\n\n}\n\nimport { ObservableEventTypeApi } from \"./ObservableAPI\";\nimport { EventTypeApiRequestFactory, EventTypeApiResponseProcessor} from \"../apis/EventTypeApi\";\n\nexport interface EventTypeApiV1EventTypeCreateRequest {\n    /**\n     * \n     * @type EventTypeIn\n     * @memberof EventTypeApiv1EventTypeCreate\n     */\n    eventTypeIn: EventTypeIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof EventTypeApiv1EventTypeCreate\n     */\n    idempotencyKey?: string\n}\n\nexport interface EventTypeApiV1EventTypeDeleteRequest {\n    /**\n     * The event type\\&#39;s name\n     * Defaults to: undefined\n     * @type string\n     * @memberof EventTypeApiv1EventTypeDelete\n     */\n    eventTypeName: string\n    /**\n     * By default event types are archived when \\&quot;deleted\\&quot;. Passing this to &#x60;true&#x60; deletes them entirely.\n     * Defaults to: false\n     * @type boolean\n     * @memberof EventTypeApiv1EventTypeDelete\n     */\n    expunge?: boolean\n}\n\nexport interface EventTypeApiV1EventTypeExportOpenapiRequest {\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof EventTypeApiv1EventTypeExportOpenapi\n     */\n    idempotencyKey?: string\n}\n\nexport interface EventTypeApiV1EventTypeGenerateExampleRequest {\n    /**\n     * \n     * @type EventTypeSchemaIn\n     * @memberof EventTypeApiv1EventTypeGenerateExample\n     */\n    eventTypeSchemaIn: EventTypeSchemaIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof EventTypeApiv1EventTypeGenerateExample\n     */\n    idempotencyKey?: string\n}\n\nexport interface EventTypeApiV1EventTypeGetRequest {\n    /**\n     * The event type\\&#39;s name\n     * Defaults to: undefined\n     * @type string\n     * @memberof EventTypeApiv1EventTypeGet\n     */\n    eventTypeName: string\n}\n\nexport interface EventTypeApiV1EventTypeGetRetryScheduleRequest {\n    /**\n     * The event type\\&#39;s name\n     * Defaults to: undefined\n     * @type string\n     * @memberof EventTypeApiv1EventTypeGetRetrySchedule\n     */\n    eventTypeName: string\n}\n\nexport interface EventTypeApiV1EventTypeImportOpenapiRequest {\n    /**\n     * Import a list of event types from webhooks defined in an OpenAPI spec.  The OpenAPI spec can be specified as either &#x60;spec&#x60; given the spec as a JSON object, or as &#x60;specRaw&#x60; (a &#x60;string&#x60;) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a &#x60;400&#x60; **Bad Request**.\n     * @type EventTypeImportOpenApiIn\n     * @memberof EventTypeApiv1EventTypeImportOpenapi\n     */\n    eventTypeImportOpenApiIn: EventTypeImportOpenApiIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof EventTypeApiv1EventTypeImportOpenapi\n     */\n    idempotencyKey?: string\n}\n\nexport interface EventTypeApiV1EventTypeListRequest {\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof EventTypeApiv1EventTypeList\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof EventTypeApiv1EventTypeList\n     */\n    iterator?: string\n    /**\n     * The sorting order of the returned items\n     * Defaults to: undefined\n     * @type Ordering\n     * @memberof EventTypeApiv1EventTypeList\n     */\n    order?: Ordering\n    /**\n     * When &#x60;true&#x60; archived (deleted but not expunged) items are included in the response.\n     * Defaults to: false\n     * @type boolean\n     * @memberof EventTypeApiv1EventTypeList\n     */\n    includeArchived?: boolean\n    /**\n     * When &#x60;true&#x60; the full item (including the schema) is included in the response.\n     * Defaults to: false\n     * @type boolean\n     * @memberof EventTypeApiv1EventTypeList\n     */\n    withContent?: boolean\n}\n\nexport interface EventTypeApiV1EventTypePatchRequest {\n    /**\n     * The event type\\&#39;s name\n     * Defaults to: undefined\n     * @type string\n     * @memberof EventTypeApiv1EventTypePatch\n     */\n    eventTypeName: string\n    /**\n     * \n     * @type EventTypePatch\n     * @memberof EventTypeApiv1EventTypePatch\n     */\n    eventTypePatch: EventTypePatch\n}\n\nexport interface EventTypeApiV1EventTypeUpdateRequest {\n    /**\n     * The event type\\&#39;s name\n     * Defaults to: undefined\n     * @type string\n     * @memberof EventTypeApiv1EventTypeUpdate\n     */\n    eventTypeName: string\n    /**\n     * \n     * @type EventTypeUpdate\n     * @memberof EventTypeApiv1EventTypeUpdate\n     */\n    eventTypeUpdate: EventTypeUpdate\n}\n\nexport interface EventTypeApiV1EventTypeUpdateRetryScheduleRequest {\n    /**\n     * The event type\\&#39;s name\n     * Defaults to: undefined\n     * @type string\n     * @memberof EventTypeApiv1EventTypeUpdateRetrySchedule\n     */\n    eventTypeName: string\n    /**\n     * \n     * @type RetryScheduleInOut\n     * @memberof EventTypeApiv1EventTypeUpdateRetrySchedule\n     */\n    retryScheduleInOut: RetryScheduleInOut\n}\n\nexport class ObjectEventTypeApi {\n    private api: ObservableEventTypeApi\n\n    public constructor(configuration: Configuration, requestFactory?: EventTypeApiRequestFactory, responseProcessor?: EventTypeApiResponseProcessor) {\n        this.api = new ObservableEventTypeApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.\n     * Create Event Type\n     * @param param the request object\n     */\n    public v1EventTypeCreateWithHttpInfo(param: EventTypeApiV1EventTypeCreateRequest, options?: Configuration): Promise<HttpInfo<EventTypeOut>> {\n        return this.api.v1EventTypeCreateWithHttpInfo(param.eventTypeIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.\n     * Create Event Type\n     * @param param the request object\n     */\n    public v1EventTypeCreate(param: EventTypeApiV1EventTypeCreateRequest, options?: Configuration): Promise<EventTypeOut> {\n        return this.api.v1EventTypeCreate(param.eventTypeIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).\n     * Delete Event Type\n     * @param param the request object\n     */\n    public v1EventTypeDeleteWithHttpInfo(param: EventTypeApiV1EventTypeDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1EventTypeDeleteWithHttpInfo(param.eventTypeName, param.expunge,  options).toPromise();\n    }\n\n    /**\n     * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).\n     * Delete Event Type\n     * @param param the request object\n     */\n    public v1EventTypeDelete(param: EventTypeApiV1EventTypeDeleteRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EventTypeDelete(param.eventTypeName, param.expunge,  options).toPromise();\n    }\n\n    /**\n     * Exports event type definitions based on the OpenAPI schemas associated with each existing event type.\n     * Event Type Export From Openapi\n     * @param param the request object\n     */\n    public v1EventTypeExportOpenapiWithHttpInfo(param: EventTypeApiV1EventTypeExportOpenapiRequest = {}, options?: Configuration): Promise<HttpInfo<ExportEventTypeOut>> {\n        return this.api.v1EventTypeExportOpenapiWithHttpInfo(param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Exports event type definitions based on the OpenAPI schemas associated with each existing event type.\n     * Event Type Export From Openapi\n     * @param param the request object\n     */\n    public v1EventTypeExportOpenapi(param: EventTypeApiV1EventTypeExportOpenapiRequest = {}, options?: Configuration): Promise<ExportEventTypeOut> {\n        return this.api.v1EventTypeExportOpenapi(param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Generates a fake example from the given JSONSchema.\n     * Generate Schema Example\n     * @param param the request object\n     */\n    public v1EventTypeGenerateExampleWithHttpInfo(param: EventTypeApiV1EventTypeGenerateExampleRequest, options?: Configuration): Promise<HttpInfo<EventTypeExampleOut>> {\n        return this.api.v1EventTypeGenerateExampleWithHttpInfo(param.eventTypeSchemaIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Generates a fake example from the given JSONSchema.\n     * Generate Schema Example\n     * @param param the request object\n     */\n    public v1EventTypeGenerateExample(param: EventTypeApiV1EventTypeGenerateExampleRequest, options?: Configuration): Promise<EventTypeExampleOut> {\n        return this.api.v1EventTypeGenerateExample(param.eventTypeSchemaIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Get an event type.\n     * Get Event Type\n     * @param param the request object\n     */\n    public v1EventTypeGetWithHttpInfo(param: EventTypeApiV1EventTypeGetRequest, options?: Configuration): Promise<HttpInfo<EventTypeOut>> {\n        return this.api.v1EventTypeGetWithHttpInfo(param.eventTypeName,  options).toPromise();\n    }\n\n    /**\n     * Get an event type.\n     * Get Event Type\n     * @param param the request object\n     */\n    public v1EventTypeGet(param: EventTypeApiV1EventTypeGetRequest, options?: Configuration): Promise<EventTypeOut> {\n        return this.api.v1EventTypeGet(param.eventTypeName,  options).toPromise();\n    }\n\n    /**\n     * Gets the retry schedule for messages using the given event type.\n     * Get Retry Schedule\n     * @param param the request object\n     */\n    public v1EventTypeGetRetryScheduleWithHttpInfo(param: EventTypeApiV1EventTypeGetRetryScheduleRequest, options?: Configuration): Promise<HttpInfo<RetryScheduleInOut>> {\n        return this.api.v1EventTypeGetRetryScheduleWithHttpInfo(param.eventTypeName,  options).toPromise();\n    }\n\n    /**\n     * Gets the retry schedule for messages using the given event type.\n     * Get Retry Schedule\n     * @param param the request object\n     */\n    public v1EventTypeGetRetrySchedule(param: EventTypeApiV1EventTypeGetRetryScheduleRequest, options?: Configuration): Promise<RetryScheduleInOut> {\n        return this.api.v1EventTypeGetRetrySchedule(param.eventTypeName,  options).toPromise();\n    }\n\n    /**\n     * Given an OpenAPI spec, create new or update existing event types. If an existing `archived` event type is updated, it will be unarchived.  The importer will convert all webhooks found in the either the `webhooks` or `x-webhooks` top-level.\n     * Event Type Import From Openapi\n     * @param param the request object\n     */\n    public v1EventTypeImportOpenapiWithHttpInfo(param: EventTypeApiV1EventTypeImportOpenapiRequest, options?: Configuration): Promise<HttpInfo<EventTypeImportOpenApiOut>> {\n        return this.api.v1EventTypeImportOpenapiWithHttpInfo(param.eventTypeImportOpenApiIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Given an OpenAPI spec, create new or update existing event types. If an existing `archived` event type is updated, it will be unarchived.  The importer will convert all webhooks found in the either the `webhooks` or `x-webhooks` top-level.\n     * Event Type Import From Openapi\n     * @param param the request object\n     */\n    public v1EventTypeImportOpenapi(param: EventTypeApiV1EventTypeImportOpenapiRequest, options?: Configuration): Promise<EventTypeImportOpenApiOut> {\n        return this.api.v1EventTypeImportOpenapi(param.eventTypeImportOpenApiIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Return the list of event types.\n     * List Event Types\n     * @param param the request object\n     */\n    public v1EventTypeListWithHttpInfo(param: EventTypeApiV1EventTypeListRequest = {}, options?: Configuration): Promise<HttpInfo<ListResponseEventTypeOut>> {\n        return this.api.v1EventTypeListWithHttpInfo(param.limit, param.iterator, param.order, param.includeArchived, param.withContent,  options).toPromise();\n    }\n\n    /**\n     * Return the list of event types.\n     * List Event Types\n     * @param param the request object\n     */\n    public v1EventTypeList(param: EventTypeApiV1EventTypeListRequest = {}, options?: Configuration): Promise<ListResponseEventTypeOut> {\n        return this.api.v1EventTypeList(param.limit, param.iterator, param.order, param.includeArchived, param.withContent,  options).toPromise();\n    }\n\n    /**\n     * Partially update an event type.\n     * Patch Event Type\n     * @param param the request object\n     */\n    public v1EventTypePatchWithHttpInfo(param: EventTypeApiV1EventTypePatchRequest, options?: Configuration): Promise<HttpInfo<EventTypeOut>> {\n        return this.api.v1EventTypePatchWithHttpInfo(param.eventTypeName, param.eventTypePatch,  options).toPromise();\n    }\n\n    /**\n     * Partially update an event type.\n     * Patch Event Type\n     * @param param the request object\n     */\n    public v1EventTypePatch(param: EventTypeApiV1EventTypePatchRequest, options?: Configuration): Promise<EventTypeOut> {\n        return this.api.v1EventTypePatch(param.eventTypeName, param.eventTypePatch,  options).toPromise();\n    }\n\n    /**\n     * Update an event type.\n     * Update Event Type\n     * @param param the request object\n     */\n    public v1EventTypeUpdateWithHttpInfo(param: EventTypeApiV1EventTypeUpdateRequest, options?: Configuration): Promise<HttpInfo<EventTypeOut>> {\n        return this.api.v1EventTypeUpdateWithHttpInfo(param.eventTypeName, param.eventTypeUpdate,  options).toPromise();\n    }\n\n    /**\n     * Update an event type.\n     * Update Event Type\n     * @param param the request object\n     */\n    public v1EventTypeUpdate(param: EventTypeApiV1EventTypeUpdateRequest, options?: Configuration): Promise<EventTypeOut> {\n        return this.api.v1EventTypeUpdate(param.eventTypeName, param.eventTypeUpdate,  options).toPromise();\n    }\n\n    /**\n     * Sets a retry schedule for all messages using the given event type.\n     * Update Retry Schedule\n     * @param param the request object\n     */\n    public v1EventTypeUpdateRetryScheduleWithHttpInfo(param: EventTypeApiV1EventTypeUpdateRetryScheduleRequest, options?: Configuration): Promise<HttpInfo<RetryScheduleInOut>> {\n        return this.api.v1EventTypeUpdateRetryScheduleWithHttpInfo(param.eventTypeName, param.retryScheduleInOut,  options).toPromise();\n    }\n\n    /**\n     * Sets a retry schedule for all messages using the given event type.\n     * Update Retry Schedule\n     * @param param the request object\n     */\n    public v1EventTypeUpdateRetrySchedule(param: EventTypeApiV1EventTypeUpdateRetryScheduleRequest, options?: Configuration): Promise<RetryScheduleInOut> {\n        return this.api.v1EventTypeUpdateRetrySchedule(param.eventTypeName, param.retryScheduleInOut,  options).toPromise();\n    }\n\n}\n\nimport { ObservableEventsApi } from \"./ObservableAPI\";\nimport { EventsApiRequestFactory, EventsApiResponseProcessor} from \"../apis/EventsApi\";\n\nexport interface EventsApiV1EventsRequest {\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof EventsApiv1Events\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof EventsApiv1Events\n     */\n    iterator?: string\n    /**\n     * Filter response based on the event type\n     * Defaults to: undefined\n     * @type Array&lt;string&gt;\n     * @memberof EventsApiv1Events\n     */\n    eventTypes?: Array<string>\n    /**\n     * Filter response based on the event type.\n     * Defaults to: undefined\n     * @type Array&lt;string&gt;\n     * @memberof EventsApiv1Events\n     */\n    channels?: Array<string>\n    /**\n     * \n     * Defaults to: undefined\n     * @type Date\n     * @memberof EventsApiv1Events\n     */\n    after?: Date\n}\n\nexport class ObjectEventsApi {\n    private api: ObservableEventsApi\n\n    public constructor(configuration: Configuration, requestFactory?: EventsApiRequestFactory, responseProcessor?: EventsApiResponseProcessor) {\n        this.api = new ObservableEventsApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Reads the stream of operational webhook events for this environment.\n     * Events\n     * @param param the request object\n     */\n    public v1EventsWithHttpInfo(param: EventsApiV1EventsRequest = {}, options?: Configuration): Promise<HttpInfo<MessageEventsOut>> {\n        return this.api.v1EventsWithHttpInfo(param.limit, param.iterator, param.eventTypes, param.channels, param.after,  options).toPromise();\n    }\n\n    /**\n     * Reads the stream of operational webhook events for this environment.\n     * Events\n     * @param param the request object\n     */\n    public v1Events(param: EventsApiV1EventsRequest = {}, options?: Configuration): Promise<MessageEventsOut> {\n        return this.api.v1Events(param.limit, param.iterator, param.eventTypes, param.channels, param.after,  options).toPromise();\n    }\n\n}\n\nimport { ObservableHealthApi } from \"./ObservableAPI\";\nimport { HealthApiRequestFactory, HealthApiResponseProcessor} from \"../apis/HealthApi\";\n\nexport interface HealthApiV1HealthGetRequest {\n}\n\nexport class ObjectHealthApi {\n    private api: ObservableHealthApi\n\n    public constructor(configuration: Configuration, requestFactory?: HealthApiRequestFactory, responseProcessor?: HealthApiResponseProcessor) {\n        this.api = new ObservableHealthApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Verify the API server is up and running.\n     * Health\n     * @param param the request object\n     */\n    public v1HealthGetWithHttpInfo(param: HealthApiV1HealthGetRequest = {}, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1HealthGetWithHttpInfo( options).toPromise();\n    }\n\n    /**\n     * Verify the API server is up and running.\n     * Health\n     * @param param the request object\n     */\n    public v1HealthGet(param: HealthApiV1HealthGetRequest = {}, options?: Configuration): Promise<void> {\n        return this.api.v1HealthGet( options).toPromise();\n    }\n\n}\n\nimport { ObservableInboundApi } from \"./ObservableAPI\";\nimport { InboundApiRequestFactory, InboundApiResponseProcessor} from \"../apis/InboundApi\";\n\nexport interface InboundApiV1InboundMsgRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof InboundApiv1InboundMsg\n     */\n    appId: string\n    /**\n     * \n     * Defaults to: undefined\n     * @type string\n     * @memberof InboundApiv1InboundMsg\n     */\n    inboundToken: string\n    /**\n     * \n     * @type string\n     * @memberof InboundApiv1InboundMsg\n     */\n    body: string\n    /**\n     * The event type\\&#39;s name\n     * Defaults to: undefined\n     * @type string\n     * @memberof InboundApiv1InboundMsg\n     */\n    eventType?: string\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof InboundApiv1InboundMsg\n     */\n    idempotencyKey?: string\n}\n\nexport interface InboundApiV1InboundRotateUrlRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof InboundApiv1InboundRotateUrl\n     */\n    appId: string\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof InboundApiv1InboundRotateUrl\n     */\n    idempotencyKey?: string\n}\n\nexport class ObjectInboundApi {\n    private api: ObservableInboundApi\n\n    public constructor(configuration: Configuration, requestFactory?: InboundApiRequestFactory, responseProcessor?: InboundApiResponseProcessor) {\n        this.api = new ObservableInboundApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Handles a raw inbound webhook for the application.\n     * Handle Inbound\n     * @param param the request object\n     */\n    public v1InboundMsgWithHttpInfo(param: InboundApiV1InboundMsgRequest, options?: Configuration): Promise<HttpInfo<MessageOut>> {\n        return this.api.v1InboundMsgWithHttpInfo(param.appId, param.inboundToken, param.body, param.eventType, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Handles a raw inbound webhook for the application.\n     * Handle Inbound\n     * @param param the request object\n     */\n    public v1InboundMsg(param: InboundApiV1InboundMsgRequest, options?: Configuration): Promise<MessageOut> {\n        return this.api.v1InboundMsg(param.appId, param.inboundToken, param.body, param.eventType, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Invalidates the previous inbound url (if one exists), producing a new inbound URL for this app.\n     * Rotate Url\n     * @param param the request object\n     */\n    public v1InboundRotateUrlWithHttpInfo(param: InboundApiV1InboundRotateUrlRequest, options?: Configuration): Promise<HttpInfo<RotatedUrlOut>> {\n        return this.api.v1InboundRotateUrlWithHttpInfo(param.appId, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Invalidates the previous inbound url (if one exists), producing a new inbound URL for this app.\n     * Rotate Url\n     * @param param the request object\n     */\n    public v1InboundRotateUrl(param: InboundApiV1InboundRotateUrlRequest, options?: Configuration): Promise<RotatedUrlOut> {\n        return this.api.v1InboundRotateUrl(param.appId, param.idempotencyKey,  options).toPromise();\n    }\n\n}\n\nimport { ObservableIntegrationApi } from \"./ObservableAPI\";\nimport { IntegrationApiRequestFactory, IntegrationApiResponseProcessor} from \"../apis/IntegrationApi\";\n\nexport interface IntegrationApiV1IntegrationCreateRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof IntegrationApiv1IntegrationCreate\n     */\n    appId: string\n    /**\n     * \n     * @type IntegrationIn\n     * @memberof IntegrationApiv1IntegrationCreate\n     */\n    integrationIn: IntegrationIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof IntegrationApiv1IntegrationCreate\n     */\n    idempotencyKey?: string\n}\n\nexport interface IntegrationApiV1IntegrationDeleteRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof IntegrationApiv1IntegrationDelete\n     */\n    appId: string\n    /**\n     * The integ\\&#39;s ID\n     * Defaults to: undefined\n     * @type string\n     * @memberof IntegrationApiv1IntegrationDelete\n     */\n    integId: string\n}\n\nexport interface IntegrationApiV1IntegrationGetRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof IntegrationApiv1IntegrationGet\n     */\n    appId: string\n    /**\n     * The integ\\&#39;s ID\n     * Defaults to: undefined\n     * @type string\n     * @memberof IntegrationApiv1IntegrationGet\n     */\n    integId: string\n}\n\nexport interface IntegrationApiV1IntegrationGetKeyRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof IntegrationApiv1IntegrationGetKey\n     */\n    appId: string\n    /**\n     * The integ\\&#39;s ID\n     * Defaults to: undefined\n     * @type string\n     * @memberof IntegrationApiv1IntegrationGetKey\n     */\n    integId: string\n}\n\nexport interface IntegrationApiV1IntegrationListRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof IntegrationApiv1IntegrationList\n     */\n    appId: string\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof IntegrationApiv1IntegrationList\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof IntegrationApiv1IntegrationList\n     */\n    iterator?: string\n    /**\n     * The sorting order of the returned items\n     * Defaults to: undefined\n     * @type Ordering\n     * @memberof IntegrationApiv1IntegrationList\n     */\n    order?: Ordering\n}\n\nexport interface IntegrationApiV1IntegrationRotateKeyRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof IntegrationApiv1IntegrationRotateKey\n     */\n    appId: string\n    /**\n     * The integ\\&#39;s ID\n     * Defaults to: undefined\n     * @type string\n     * @memberof IntegrationApiv1IntegrationRotateKey\n     */\n    integId: string\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof IntegrationApiv1IntegrationRotateKey\n     */\n    idempotencyKey?: string\n}\n\nexport interface IntegrationApiV1IntegrationUpdateRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof IntegrationApiv1IntegrationUpdate\n     */\n    appId: string\n    /**\n     * The integ\\&#39;s ID\n     * Defaults to: undefined\n     * @type string\n     * @memberof IntegrationApiv1IntegrationUpdate\n     */\n    integId: string\n    /**\n     * \n     * @type IntegrationUpdate\n     * @memberof IntegrationApiv1IntegrationUpdate\n     */\n    integrationUpdate: IntegrationUpdate\n}\n\nexport class ObjectIntegrationApi {\n    private api: ObservableIntegrationApi\n\n    public constructor(configuration: Configuration, requestFactory?: IntegrationApiRequestFactory, responseProcessor?: IntegrationApiResponseProcessor) {\n        this.api = new ObservableIntegrationApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Create an integration.\n     * Create Integration\n     * @param param the request object\n     */\n    public v1IntegrationCreateWithHttpInfo(param: IntegrationApiV1IntegrationCreateRequest, options?: Configuration): Promise<HttpInfo<IntegrationOut>> {\n        return this.api.v1IntegrationCreateWithHttpInfo(param.appId, param.integrationIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Create an integration.\n     * Create Integration\n     * @param param the request object\n     */\n    public v1IntegrationCreate(param: IntegrationApiV1IntegrationCreateRequest, options?: Configuration): Promise<IntegrationOut> {\n        return this.api.v1IntegrationCreate(param.appId, param.integrationIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Delete an integration.\n     * Delete Integration\n     * @param param the request object\n     */\n    public v1IntegrationDeleteWithHttpInfo(param: IntegrationApiV1IntegrationDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1IntegrationDeleteWithHttpInfo(param.appId, param.integId,  options).toPromise();\n    }\n\n    /**\n     * Delete an integration.\n     * Delete Integration\n     * @param param the request object\n     */\n    public v1IntegrationDelete(param: IntegrationApiV1IntegrationDeleteRequest, options?: Configuration): Promise<void> {\n        return this.api.v1IntegrationDelete(param.appId, param.integId,  options).toPromise();\n    }\n\n    /**\n     * Get an integration.\n     * Get Integration\n     * @param param the request object\n     */\n    public v1IntegrationGetWithHttpInfo(param: IntegrationApiV1IntegrationGetRequest, options?: Configuration): Promise<HttpInfo<IntegrationOut>> {\n        return this.api.v1IntegrationGetWithHttpInfo(param.appId, param.integId,  options).toPromise();\n    }\n\n    /**\n     * Get an integration.\n     * Get Integration\n     * @param param the request object\n     */\n    public v1IntegrationGet(param: IntegrationApiV1IntegrationGetRequest, options?: Configuration): Promise<IntegrationOut> {\n        return this.api.v1IntegrationGet(param.appId, param.integId,  options).toPromise();\n    }\n\n    /**\n     * Get an integration\\'s key.\n     * Get Integration Key\n     * @param param the request object\n     */\n    public v1IntegrationGetKeyWithHttpInfo(param: IntegrationApiV1IntegrationGetKeyRequest, options?: Configuration): Promise<HttpInfo<IntegrationKeyOut>> {\n        return this.api.v1IntegrationGetKeyWithHttpInfo(param.appId, param.integId,  options).toPromise();\n    }\n\n    /**\n     * Get an integration\\'s key.\n     * Get Integration Key\n     * @param param the request object\n     */\n    public v1IntegrationGetKey(param: IntegrationApiV1IntegrationGetKeyRequest, options?: Configuration): Promise<IntegrationKeyOut> {\n        return this.api.v1IntegrationGetKey(param.appId, param.integId,  options).toPromise();\n    }\n\n    /**\n     * List the application\\'s integrations.\n     * List Integrations\n     * @param param the request object\n     */\n    public v1IntegrationListWithHttpInfo(param: IntegrationApiV1IntegrationListRequest, options?: Configuration): Promise<HttpInfo<ListResponseIntegrationOut>> {\n        return this.api.v1IntegrationListWithHttpInfo(param.appId, param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * List the application\\'s integrations.\n     * List Integrations\n     * @param param the request object\n     */\n    public v1IntegrationList(param: IntegrationApiV1IntegrationListRequest, options?: Configuration): Promise<ListResponseIntegrationOut> {\n        return this.api.v1IntegrationList(param.appId, param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * Rotate the integration\\'s key. The previous key will be immediately revoked.\n     * Rotate Integration Key\n     * @param param the request object\n     */\n    public v1IntegrationRotateKeyWithHttpInfo(param: IntegrationApiV1IntegrationRotateKeyRequest, options?: Configuration): Promise<HttpInfo<IntegrationKeyOut>> {\n        return this.api.v1IntegrationRotateKeyWithHttpInfo(param.appId, param.integId, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Rotate the integration\\'s key. The previous key will be immediately revoked.\n     * Rotate Integration Key\n     * @param param the request object\n     */\n    public v1IntegrationRotateKey(param: IntegrationApiV1IntegrationRotateKeyRequest, options?: Configuration): Promise<IntegrationKeyOut> {\n        return this.api.v1IntegrationRotateKey(param.appId, param.integId, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Update an integration.\n     * Update Integration\n     * @param param the request object\n     */\n    public v1IntegrationUpdateWithHttpInfo(param: IntegrationApiV1IntegrationUpdateRequest, options?: Configuration): Promise<HttpInfo<IntegrationOut>> {\n        return this.api.v1IntegrationUpdateWithHttpInfo(param.appId, param.integId, param.integrationUpdate,  options).toPromise();\n    }\n\n    /**\n     * Update an integration.\n     * Update Integration\n     * @param param the request object\n     */\n    public v1IntegrationUpdate(param: IntegrationApiV1IntegrationUpdateRequest, options?: Configuration): Promise<IntegrationOut> {\n        return this.api.v1IntegrationUpdate(param.appId, param.integId, param.integrationUpdate,  options).toPromise();\n    }\n\n}\n\nimport { ObservableMessageApi } from \"./ObservableAPI\";\nimport { MessageApiRequestFactory, MessageApiResponseProcessor} from \"../apis/MessageApi\";\n\nexport interface MessageApiCreateMessageAttemptForEndpointRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApicreateMessageAttemptForEndpoint\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApicreateMessageAttemptForEndpoint\n     */\n    endpointId: string\n    /**\n     * \n     * @type MessageIn\n     * @memberof MessageApicreateMessageAttemptForEndpoint\n     */\n    messageIn: MessageIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApicreateMessageAttemptForEndpoint\n     */\n    idempotencyKey?: string\n}\n\nexport interface MessageApiV1EventsPublicRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1EventsPublic\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1EventsPublic\n     */\n    sinkId: string\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof MessageApiv1EventsPublic\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1EventsPublic\n     */\n    iterator?: string\n    /**\n     * Filters messages sent with this event type (optional).\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1EventsPublic\n     */\n    eventType?: string\n    /**\n     * Filters messages sent with this channel (optional).\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1EventsPublic\n     */\n    channel?: string\n    /**\n     * \n     * Defaults to: undefined\n     * @type Date\n     * @memberof MessageApiv1EventsPublic\n     */\n    after?: Date\n}\n\nexport interface MessageApiV1MessageCreateRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageCreate\n     */\n    appId: string\n    /**\n     * \n     * @type MessageIn\n     * @memberof MessageApiv1MessageCreate\n     */\n    messageIn: MessageIn\n    /**\n     * When &#x60;true&#x60;, message payloads are included in the response.\n     * Defaults to: true\n     * @type boolean\n     * @memberof MessageApiv1MessageCreate\n     */\n    withContent?: boolean\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageCreate\n     */\n    idempotencyKey?: string\n}\n\nexport interface MessageApiV1MessageEventsRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageEvents\n     */\n    appId: string\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof MessageApiv1MessageEvents\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageEvents\n     */\n    iterator?: string\n    /**\n     * Filter response based on the event type\n     * Defaults to: undefined\n     * @type Array&lt;string&gt;\n     * @memberof MessageApiv1MessageEvents\n     */\n    eventTypes?: Array<string>\n    /**\n     * Filter response based on the event type.\n     * Defaults to: undefined\n     * @type Array&lt;string&gt;\n     * @memberof MessageApiv1MessageEvents\n     */\n    channels?: Array<string>\n    /**\n     * \n     * Defaults to: undefined\n     * @type Date\n     * @memberof MessageApiv1MessageEvents\n     */\n    after?: Date\n}\n\nexport interface MessageApiV1MessageEventsSubscriptionRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageEventsSubscription\n     */\n    appId: string\n    /**\n     * The esub\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageEventsSubscription\n     */\n    subscriptionId: string\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof MessageApiv1MessageEventsSubscription\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageEventsSubscription\n     */\n    iterator?: string\n    /**\n     * Filter response based on the event type\n     * Defaults to: undefined\n     * @type Array&lt;string&gt;\n     * @memberof MessageApiv1MessageEventsSubscription\n     */\n    eventTypes?: Array<string>\n    /**\n     * Filter response based on the event type.\n     * Defaults to: undefined\n     * @type Array&lt;string&gt;\n     * @memberof MessageApiv1MessageEventsSubscription\n     */\n    channels?: Array<string>\n    /**\n     * \n     * Defaults to: undefined\n     * @type Date\n     * @memberof MessageApiv1MessageEventsSubscription\n     */\n    after?: Date\n}\n\nexport interface MessageApiV1MessageEventsSubscriptionCreateTokenRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageEventsSubscriptionCreateToken\n     */\n    appId: string\n    /**\n     * The esub\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageEventsSubscriptionCreateToken\n     */\n    subscriptionId: string\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageEventsSubscriptionCreateToken\n     */\n    idempotencyKey?: string\n}\n\nexport interface MessageApiV1MessageExpungeContentRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageExpungeContent\n     */\n    appId: string\n    /**\n     * The msg\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageExpungeContent\n     */\n    msgId: string\n}\n\nexport interface MessageApiV1MessageGetRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageGet\n     */\n    appId: string\n    /**\n     * The msg\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageGet\n     */\n    msgId: string\n    /**\n     * When &#x60;true&#x60; message payloads are included in the response.\n     * Defaults to: true\n     * @type boolean\n     * @memberof MessageApiv1MessageGet\n     */\n    withContent?: boolean\n}\n\nexport interface MessageApiV1MessageGetRawPayloadRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageGetRawPayload\n     */\n    appId: string\n    /**\n     * The msg\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageGetRawPayload\n     */\n    msgId: string\n}\n\nexport interface MessageApiV1MessageListRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageList\n     */\n    appId: string\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof MessageApiv1MessageList\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageList\n     */\n    iterator?: string\n    /**\n     * Filter response based on the channel.\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageList\n     */\n    channel?: string\n    /**\n     * Only include items created before a certain date.\n     * Defaults to: undefined\n     * @type Date\n     * @memberof MessageApiv1MessageList\n     */\n    before?: Date\n    /**\n     * Only include items created after a certain date.\n     * Defaults to: undefined\n     * @type Date\n     * @memberof MessageApiv1MessageList\n     */\n    after?: Date\n    /**\n     * When &#x60;true&#x60; message payloads are included in the response.\n     * Defaults to: true\n     * @type boolean\n     * @memberof MessageApiv1MessageList\n     */\n    withContent?: boolean\n    /**\n     * Filter messages matching the provided tag.\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageApiv1MessageList\n     */\n    tag?: string\n    /**\n     * Filter response based on the event type\n     * Defaults to: undefined\n     * @type Array&lt;string&gt;\n     * @memberof MessageApiv1MessageList\n     */\n    eventTypes?: Array<string>\n}\n\nexport class ObjectMessageApi {\n    private api: ObservableMessageApi\n\n    public constructor(configuration: Configuration, requestFactory?: MessageApiRequestFactory, responseProcessor?: MessageApiResponseProcessor) {\n        this.api = new ObservableMessageApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Creates and sends a message to the specified endpoint.  The message attempt and response from the endpoint is returned.\n     * Create Message Attempt For Endpoint\n     * @param param the request object\n     */\n    public createMessageAttemptForEndpointWithHttpInfo(param: MessageApiCreateMessageAttemptForEndpointRequest, options?: Configuration): Promise<HttpInfo<MessageAttemptOut>> {\n        return this.api.createMessageAttemptForEndpointWithHttpInfo(param.appId, param.endpointId, param.messageIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Creates and sends a message to the specified endpoint.  The message attempt and response from the endpoint is returned.\n     * Create Message Attempt For Endpoint\n     * @param param the request object\n     */\n    public createMessageAttemptForEndpoint(param: MessageApiCreateMessageAttemptForEndpointRequest, options?: Configuration): Promise<MessageAttemptOut> {\n        return this.api.createMessageAttemptForEndpoint(param.appId, param.endpointId, param.messageIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Reads the stream of created messages for an application, filtered on the Sink\\'s event types and Channels.\n     * Public Events\n     * @param param the request object\n     */\n    public v1EventsPublicWithHttpInfo(param: MessageApiV1EventsPublicRequest, options?: Configuration): Promise<HttpInfo<MessageEventsOut>> {\n        return this.api.v1EventsPublicWithHttpInfo(param.appId, param.sinkId, param.limit, param.iterator, param.eventType, param.channel, param.after,  options).toPromise();\n    }\n\n    /**\n     * Reads the stream of created messages for an application, filtered on the Sink\\'s event types and Channels.\n     * Public Events\n     * @param param the request object\n     */\n    public v1EventsPublic(param: MessageApiV1EventsPublicRequest, options?: Configuration): Promise<MessageEventsOut> {\n        return this.api.v1EventsPublic(param.appId, param.sinkId, param.limit, param.iterator, param.eventType, param.channel, param.after,  options).toPromise();\n    }\n\n    /**\n     * Creates a new message and dispatches it to all of the application\\'s endpoints.  The `eventId` is an optional custom unique ID. It\\'s verified to be unique only up to a day, after that no verification will be made. If a message with the same `eventId` already exists for the application, a 409 conflict error will be returned.  The `eventType` indicates the type and schema of the event. All messages of a certain `eventType` are expected to have the same schema. Endpoints can choose to only listen to specific event types. Messages can also have `channels`, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don\\'t imply a specific message content or schema.  The `payload` property is the webhook\\'s body (the actual webhook message). Svix supports payload sizes of up to ~350kb, though it\\'s generally a good idea to keep webhook payloads small, probably no larger than 40kb.\n     * Create Message\n     * @param param the request object\n     */\n    public v1MessageCreateWithHttpInfo(param: MessageApiV1MessageCreateRequest, options?: Configuration): Promise<HttpInfo<MessageOut>> {\n        return this.api.v1MessageCreateWithHttpInfo(param.appId, param.messageIn, param.withContent, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Creates a new message and dispatches it to all of the application\\'s endpoints.  The `eventId` is an optional custom unique ID. It\\'s verified to be unique only up to a day, after that no verification will be made. If a message with the same `eventId` already exists for the application, a 409 conflict error will be returned.  The `eventType` indicates the type and schema of the event. All messages of a certain `eventType` are expected to have the same schema. Endpoints can choose to only listen to specific event types. Messages can also have `channels`, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don\\'t imply a specific message content or schema.  The `payload` property is the webhook\\'s body (the actual webhook message). Svix supports payload sizes of up to ~350kb, though it\\'s generally a good idea to keep webhook payloads small, probably no larger than 40kb.\n     * Create Message\n     * @param param the request object\n     */\n    public v1MessageCreate(param: MessageApiV1MessageCreateRequest, options?: Configuration): Promise<MessageOut> {\n        return this.api.v1MessageCreate(param.appId, param.messageIn, param.withContent, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Reads the stream of created messages for an application.\n     * Message Events\n     * @param param the request object\n     */\n    public v1MessageEventsWithHttpInfo(param: MessageApiV1MessageEventsRequest, options?: Configuration): Promise<HttpInfo<MessageEventsOut>> {\n        return this.api.v1MessageEventsWithHttpInfo(param.appId, param.limit, param.iterator, param.eventTypes, param.channels, param.after,  options).toPromise();\n    }\n\n    /**\n     * Reads the stream of created messages for an application.\n     * Message Events\n     * @param param the request object\n     */\n    public v1MessageEvents(param: MessageApiV1MessageEventsRequest, options?: Configuration): Promise<MessageEventsOut> {\n        return this.api.v1MessageEvents(param.appId, param.limit, param.iterator, param.eventTypes, param.channels, param.after,  options).toPromise();\n    }\n\n    /**\n     * Reads the stream of created messages for an application, but using server-managed iterator tracking.\n     * Message Events Subscription\n     * @param param the request object\n     */\n    public v1MessageEventsSubscriptionWithHttpInfo(param: MessageApiV1MessageEventsSubscriptionRequest, options?: Configuration): Promise<HttpInfo<MessageEventsOut>> {\n        return this.api.v1MessageEventsSubscriptionWithHttpInfo(param.appId, param.subscriptionId, param.limit, param.iterator, param.eventTypes, param.channels, param.after,  options).toPromise();\n    }\n\n    /**\n     * Reads the stream of created messages for an application, but using server-managed iterator tracking.\n     * Message Events Subscription\n     * @param param the request object\n     */\n    public v1MessageEventsSubscription(param: MessageApiV1MessageEventsSubscriptionRequest, options?: Configuration): Promise<MessageEventsOut> {\n        return this.api.v1MessageEventsSubscription(param.appId, param.subscriptionId, param.limit, param.iterator, param.eventTypes, param.channels, param.after,  options).toPromise();\n    }\n\n    /**\n     * Creates an auth token that can be used with the `v1.message.events-subscription` endpoint.\n     * Message Events Create Token\n     * @param param the request object\n     */\n    public v1MessageEventsSubscriptionCreateTokenWithHttpInfo(param: MessageApiV1MessageEventsSubscriptionCreateTokenRequest, options?: Configuration): Promise<HttpInfo<MessageSubscriberAuthTokenOut>> {\n        return this.api.v1MessageEventsSubscriptionCreateTokenWithHttpInfo(param.appId, param.subscriptionId, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Creates an auth token that can be used with the `v1.message.events-subscription` endpoint.\n     * Message Events Create Token\n     * @param param the request object\n     */\n    public v1MessageEventsSubscriptionCreateToken(param: MessageApiV1MessageEventsSubscriptionCreateTokenRequest, options?: Configuration): Promise<MessageSubscriberAuthTokenOut> {\n        return this.api.v1MessageEventsSubscriptionCreateToken(param.appId, param.subscriptionId, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Delete the given message\\'s payload.  Useful in cases when a message was accidentally sent with sensitive content. The message can\\'t be replayed or resent once its payload has been deleted or expired.\n     * Delete message payload\n     * @param param the request object\n     */\n    public v1MessageExpungeContentWithHttpInfo(param: MessageApiV1MessageExpungeContentRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1MessageExpungeContentWithHttpInfo(param.appId, param.msgId,  options).toPromise();\n    }\n\n    /**\n     * Delete the given message\\'s payload.  Useful in cases when a message was accidentally sent with sensitive content. The message can\\'t be replayed or resent once its payload has been deleted or expired.\n     * Delete message payload\n     * @param param the request object\n     */\n    public v1MessageExpungeContent(param: MessageApiV1MessageExpungeContentRequest, options?: Configuration): Promise<void> {\n        return this.api.v1MessageExpungeContent(param.appId, param.msgId,  options).toPromise();\n    }\n\n    /**\n     * Get a message by its ID or eventID.\n     * Get Message\n     * @param param the request object\n     */\n    public v1MessageGetWithHttpInfo(param: MessageApiV1MessageGetRequest, options?: Configuration): Promise<HttpInfo<MessageOut>> {\n        return this.api.v1MessageGetWithHttpInfo(param.appId, param.msgId, param.withContent,  options).toPromise();\n    }\n\n    /**\n     * Get a message by its ID or eventID.\n     * Get Message\n     * @param param the request object\n     */\n    public v1MessageGet(param: MessageApiV1MessageGetRequest, options?: Configuration): Promise<MessageOut> {\n        return this.api.v1MessageGet(param.appId, param.msgId, param.withContent,  options).toPromise();\n    }\n\n    /**\n     * Get a message raw payload by its ID or eventID.\n     * Get Raw Message Payload\n     * @param param the request object\n     */\n    public v1MessageGetRawPayloadWithHttpInfo(param: MessageApiV1MessageGetRawPayloadRequest, options?: Configuration): Promise<HttpInfo<MessageRawPayloadOut>> {\n        return this.api.v1MessageGetRawPayloadWithHttpInfo(param.appId, param.msgId,  options).toPromise();\n    }\n\n    /**\n     * Get a message raw payload by its ID or eventID.\n     * Get Raw Message Payload\n     * @param param the request object\n     */\n    public v1MessageGetRawPayload(param: MessageApiV1MessageGetRawPayloadRequest, options?: Configuration): Promise<MessageRawPayloadOut> {\n        return this.api.v1MessageGetRawPayload(param.appId, param.msgId,  options).toPromise();\n    }\n\n    /**\n     * List all of the application\\'s messages.  The `before` and `after` parameters let you filter all items created before or after a certain date. These can be used alongside an iterator to paginate over results within a certain window.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Messages\n     * @param param the request object\n     */\n    public v1MessageListWithHttpInfo(param: MessageApiV1MessageListRequest, options?: Configuration): Promise<HttpInfo<ListResponseMessageOut>> {\n        return this.api.v1MessageListWithHttpInfo(param.appId, param.limit, param.iterator, param.channel, param.before, param.after, param.withContent, param.tag, param.eventTypes,  options).toPromise();\n    }\n\n    /**\n     * List all of the application\\'s messages.  The `before` and `after` parameters let you filter all items created before or after a certain date. These can be used alongside an iterator to paginate over results within a certain window.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Messages\n     * @param param the request object\n     */\n    public v1MessageList(param: MessageApiV1MessageListRequest, options?: Configuration): Promise<ListResponseMessageOut> {\n        return this.api.v1MessageList(param.appId, param.limit, param.iterator, param.channel, param.before, param.after, param.withContent, param.tag, param.eventTypes,  options).toPromise();\n    }\n\n}\n\nimport { ObservableMessageAttemptApi } from \"./ObservableAPI\";\nimport { MessageAttemptApiRequestFactory, MessageAttemptApiResponseProcessor} from \"../apis/MessageAttemptApi\";\n\nexport interface MessageAttemptApiV1MessageAttemptCountByEndpointRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptCountByEndpoint\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptCountByEndpoint\n     */\n    endpointId: string\n    /**\n     * Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * Defaults to: undefined\n     * @type MessageStatus\n     * @memberof MessageAttemptApiv1MessageAttemptCountByEndpoint\n     */\n    status?: MessageStatus\n    /**\n     * Filter response based on the HTTP status code\n     * Defaults to: undefined\n     * @type StatusCodeClass\n     * @memberof MessageAttemptApiv1MessageAttemptCountByEndpoint\n     */\n    statusCodeClass?: StatusCodeClass\n    /**\n     * Filter response based on the channel\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptCountByEndpoint\n     */\n    channel?: string\n    /**\n     * Filter response based on the tag\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptCountByEndpoint\n     */\n    tag?: string\n    /**\n     * Only include items created before a certain date\n     * Defaults to: undefined\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptCountByEndpoint\n     */\n    before?: Date\n    /**\n     * Only include items created after a certain date\n     * Defaults to: undefined\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptCountByEndpoint\n     */\n    after?: Date\n    /**\n     * Filter response based on the event type\n     * Defaults to: undefined\n     * @type Array&lt;string&gt;\n     * @memberof MessageAttemptApiv1MessageAttemptCountByEndpoint\n     */\n    eventTypes?: Array<string>\n}\n\nexport interface MessageAttemptApiV1MessageAttemptExpungeContentRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptExpungeContent\n     */\n    appId: string\n    /**\n     * The msg\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptExpungeContent\n     */\n    msgId: string\n    /**\n     * The attempt\\&#39;s ID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptExpungeContent\n     */\n    attemptId: string\n}\n\nexport interface MessageAttemptApiV1MessageAttemptGetRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptGet\n     */\n    appId: string\n    /**\n     * The msg\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptGet\n     */\n    msgId: string\n    /**\n     * The attempt\\&#39;s ID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptGet\n     */\n    attemptId: string\n}\n\nexport interface MessageAttemptApiV1MessageAttemptGetHeadersRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptGetHeaders\n     */\n    appId: string\n    /**\n     * The msg\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptGetHeaders\n     */\n    msgId: string\n    /**\n     * The attempt\\&#39;s ID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptGetHeaders\n     */\n    attemptId: string\n}\n\nexport interface MessageAttemptApiV1MessageAttemptListAttemptedDestinationsRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedDestinations\n     */\n    appId: string\n    /**\n     * The msg\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedDestinations\n     */\n    msgId: string\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedDestinations\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedDestinations\n     */\n    iterator?: string\n}\n\nexport interface MessageAttemptApiV1MessageAttemptListAttemptedMessagesRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    endpointId: string\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    iterator?: string\n    /**\n     * Filter response based on the channel\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    channel?: string\n    /**\n     * Filter response based on the message tags\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    tag?: string\n    /**\n     * Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * Defaults to: undefined\n     * @type MessageStatus\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    status?: MessageStatus\n    /**\n     * Only include items created before a certain date\n     * Defaults to: undefined\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    before?: Date\n    /**\n     * Only include items created after a certain date\n     * Defaults to: undefined\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    after?: Date\n    /**\n     * When &#x60;true&#x60; message payloads are included in the response\n     * Defaults to: true\n     * @type boolean\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    withContent?: boolean\n    /**\n     * Filter response based on the event type\n     * Defaults to: undefined\n     * @type Array&lt;string&gt;\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    eventTypes?: Array<string>\n}\n\nexport interface MessageAttemptApiV1MessageAttemptListByEndpointRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    endpointId: string\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    iterator?: string\n    /**\n     * Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * Defaults to: undefined\n     * @type MessageStatus\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    status?: MessageStatus\n    /**\n     * Filter response based on the HTTP status code\n     * Defaults to: undefined\n     * @type StatusCodeClass\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    statusCodeClass?: StatusCodeClass\n    /**\n     * Filter response based on the channel\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    channel?: string\n    /**\n     * Filter response based on the tag\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    tag?: string\n    /**\n     * Only include items created before a certain date\n     * Defaults to: undefined\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    before?: Date\n    /**\n     * Only include items created after a certain date\n     * Defaults to: undefined\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    after?: Date\n    /**\n     * When &#x60;true&#x60; attempt content is included in the response\n     * Defaults to: true\n     * @type boolean\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    withContent?: boolean\n    /**\n     * When &#x60;true&#x60;, the message information is included in the response\n     * Defaults to: false\n     * @type boolean\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    withMsg?: boolean\n    /**\n     * Filter response based on the event type\n     * Defaults to: undefined\n     * @type Array&lt;string&gt;\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    eventTypes?: Array<string>\n}\n\nexport interface MessageAttemptApiV1MessageAttemptListByEndpointDeprecatedRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    appId: string\n    /**\n     * The msg\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    msgId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    endpointId: string\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    iterator?: string\n    /**\n     * Filter response based on the channel\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    channel?: string\n    /**\n     * Filter response based on the tag\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    tag?: string\n    /**\n     * Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * Defaults to: undefined\n     * @type MessageStatus\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    status?: MessageStatus\n    /**\n     * Only include items created before a certain date\n     * Defaults to: undefined\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    before?: Date\n    /**\n     * Only include items created after a certain date\n     * Defaults to: undefined\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    after?: Date\n    /**\n     * Filter response based on the event type\n     * Defaults to: undefined\n     * @type Array&lt;string&gt;\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    eventTypes?: Array<string>\n}\n\nexport interface MessageAttemptApiV1MessageAttemptListByMsgRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    appId: string\n    /**\n     * The msg\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    msgId: string\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    iterator?: string\n    /**\n     * Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * Defaults to: undefined\n     * @type MessageStatus\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    status?: MessageStatus\n    /**\n     * Filter response based on the HTTP status code\n     * Defaults to: undefined\n     * @type StatusCodeClass\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    statusCodeClass?: StatusCodeClass\n    /**\n     * Filter response based on the channel\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    channel?: string\n    /**\n     * Filter response based on the tag\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    tag?: string\n    /**\n     * Filter the attempts based on the attempted endpoint\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    endpointId?: string\n    /**\n     * Only include items created before a certain date\n     * Defaults to: undefined\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    before?: Date\n    /**\n     * Only include items created after a certain date\n     * Defaults to: undefined\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    after?: Date\n    /**\n     * When &#x60;true&#x60; attempt content is included in the response\n     * Defaults to: true\n     * @type boolean\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    withContent?: boolean\n    /**\n     * Filter response based on the event type\n     * Defaults to: undefined\n     * @type Array&lt;string&gt;\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    eventTypes?: Array<string>\n}\n\nexport interface MessageAttemptApiV1MessageAttemptListByMsgDeprecatedRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    appId: string\n    /**\n     * The msg\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    msgId: string\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    iterator?: string\n    /**\n     * Filter the attempts based on the attempted endpoint\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    endpointId?: string\n    /**\n     * Filter response based on the channel\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    channel?: string\n    /**\n     * Filter response based on the tag\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    tag?: string\n    /**\n     * Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)\n     * Defaults to: undefined\n     * @type MessageStatus\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    status?: MessageStatus\n    /**\n     * Only include items created before a certain date\n     * Defaults to: undefined\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    before?: Date\n    /**\n     * Only include items created after a certain date\n     * Defaults to: undefined\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    after?: Date\n    /**\n     * Filter response based on the HTTP status code\n     * Defaults to: undefined\n     * @type StatusCodeClass\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    statusCodeClass?: StatusCodeClass\n    /**\n     * Filter response based on the event type\n     * Defaults to: undefined\n     * @type Array&lt;string&gt;\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    eventTypes?: Array<string>\n}\n\nexport interface MessageAttemptApiV1MessageAttemptResendRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptResend\n     */\n    appId: string\n    /**\n     * The msg\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptResend\n     */\n    msgId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptResend\n     */\n    endpointId: string\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptResend\n     */\n    idempotencyKey?: string\n}\n\nexport class ObjectMessageAttemptApi {\n    private api: ObservableMessageAttemptApi\n\n    public constructor(configuration: Configuration, requestFactory?: MessageAttemptApiRequestFactory, responseProcessor?: MessageAttemptApiResponseProcessor) {\n        this.api = new ObservableMessageAttemptApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Like `v1.message-attempt.list-by-endpoint` but returning a count only.\n     * Count Attempts By Endpoint\n     * @param param the request object\n     */\n    public v1MessageAttemptCountByEndpointWithHttpInfo(param: MessageAttemptApiV1MessageAttemptCountByEndpointRequest, options?: Configuration): Promise<HttpInfo<CountOut>> {\n        return this.api.v1MessageAttemptCountByEndpointWithHttpInfo(param.appId, param.endpointId, param.status, param.statusCodeClass, param.channel, param.tag, param.before, param.after, param.eventTypes,  options).toPromise();\n    }\n\n    /**\n     * Like `v1.message-attempt.list-by-endpoint` but returning a count only.\n     * Count Attempts By Endpoint\n     * @param param the request object\n     */\n    public v1MessageAttemptCountByEndpoint(param: MessageAttemptApiV1MessageAttemptCountByEndpointRequest, options?: Configuration): Promise<CountOut> {\n        return this.api.v1MessageAttemptCountByEndpoint(param.appId, param.endpointId, param.status, param.statusCodeClass, param.channel, param.tag, param.before, param.after, param.eventTypes,  options).toPromise();\n    }\n\n    /**\n     * Deletes the given attempt\\'s response body.  Useful when an endpoint accidentally returned sensitive content. The message can\\'t be replayed or resent once its payload has been deleted or expired.\n     * Delete attempt response body\n     * @param param the request object\n     */\n    public v1MessageAttemptExpungeContentWithHttpInfo(param: MessageAttemptApiV1MessageAttemptExpungeContentRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1MessageAttemptExpungeContentWithHttpInfo(param.appId, param.msgId, param.attemptId,  options).toPromise();\n    }\n\n    /**\n     * Deletes the given attempt\\'s response body.  Useful when an endpoint accidentally returned sensitive content. The message can\\'t be replayed or resent once its payload has been deleted or expired.\n     * Delete attempt response body\n     * @param param the request object\n     */\n    public v1MessageAttemptExpungeContent(param: MessageAttemptApiV1MessageAttemptExpungeContentRequest, options?: Configuration): Promise<void> {\n        return this.api.v1MessageAttemptExpungeContent(param.appId, param.msgId, param.attemptId,  options).toPromise();\n    }\n\n    /**\n     * `msg_id`: Use a message id or a message `eventId`\n     * Get Attempt\n     * @param param the request object\n     */\n    public v1MessageAttemptGetWithHttpInfo(param: MessageAttemptApiV1MessageAttemptGetRequest, options?: Configuration): Promise<HttpInfo<MessageAttemptOut>> {\n        return this.api.v1MessageAttemptGetWithHttpInfo(param.appId, param.msgId, param.attemptId,  options).toPromise();\n    }\n\n    /**\n     * `msg_id`: Use a message id or a message `eventId`\n     * Get Attempt\n     * @param param the request object\n     */\n    public v1MessageAttemptGet(param: MessageAttemptApiV1MessageAttemptGetRequest, options?: Configuration): Promise<MessageAttemptOut> {\n        return this.api.v1MessageAttemptGet(param.appId, param.msgId, param.attemptId,  options).toPromise();\n    }\n\n    /**\n     * Calculate and return headers used on a given message attempt\n     * Get Attempt Headers\n     * @param param the request object\n     */\n    public v1MessageAttemptGetHeadersWithHttpInfo(param: MessageAttemptApiV1MessageAttemptGetHeadersRequest, options?: Configuration): Promise<HttpInfo<MessageAttemptHeadersOut>> {\n        return this.api.v1MessageAttemptGetHeadersWithHttpInfo(param.appId, param.msgId, param.attemptId,  options).toPromise();\n    }\n\n    /**\n     * Calculate and return headers used on a given message attempt\n     * Get Attempt Headers\n     * @param param the request object\n     */\n    public v1MessageAttemptGetHeaders(param: MessageAttemptApiV1MessageAttemptGetHeadersRequest, options?: Configuration): Promise<MessageAttemptHeadersOut> {\n        return this.api.v1MessageAttemptGetHeaders(param.appId, param.msgId, param.attemptId,  options).toPromise();\n    }\n\n    /**\n     * List endpoints attempted by a given message.  Additionally includes metadata about the latest message attempt. By default, endpoints are listed in ascending order by ID.\n     * List Attempted Destinations\n     * @param param the request object\n     */\n    public v1MessageAttemptListAttemptedDestinationsWithHttpInfo(param: MessageAttemptApiV1MessageAttemptListAttemptedDestinationsRequest, options?: Configuration): Promise<HttpInfo<ListResponseMessageEndpointOut>> {\n        return this.api.v1MessageAttemptListAttemptedDestinationsWithHttpInfo(param.appId, param.msgId, param.limit, param.iterator,  options).toPromise();\n    }\n\n    /**\n     * List endpoints attempted by a given message.  Additionally includes metadata about the latest message attempt. By default, endpoints are listed in ascending order by ID.\n     * List Attempted Destinations\n     * @param param the request object\n     */\n    public v1MessageAttemptListAttemptedDestinations(param: MessageAttemptApiV1MessageAttemptListAttemptedDestinationsRequest, options?: Configuration): Promise<ListResponseMessageEndpointOut> {\n        return this.api.v1MessageAttemptListAttemptedDestinations(param.appId, param.msgId, param.limit, param.iterator,  options).toPromise();\n    }\n\n    /**\n     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempted Messages\n     * @param param the request object\n     */\n    public v1MessageAttemptListAttemptedMessagesWithHttpInfo(param: MessageAttemptApiV1MessageAttemptListAttemptedMessagesRequest, options?: Configuration): Promise<HttpInfo<ListResponseEndpointMessageOut>> {\n        return this.api.v1MessageAttemptListAttemptedMessagesWithHttpInfo(param.appId, param.endpointId, param.limit, param.iterator, param.channel, param.tag, param.status, param.before, param.after, param.withContent, param.eventTypes,  options).toPromise();\n    }\n\n    /**\n     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempted Messages\n     * @param param the request object\n     */\n    public v1MessageAttemptListAttemptedMessages(param: MessageAttemptApiV1MessageAttemptListAttemptedMessagesRequest, options?: Configuration): Promise<ListResponseEndpointMessageOut> {\n        return this.api.v1MessageAttemptListAttemptedMessages(param.appId, param.endpointId, param.limit, param.iterator, param.channel, param.tag, param.status, param.before, param.after, param.withContent, param.eventTypes,  options).toPromise();\n    }\n\n    /**\n     * List attempts by endpoint id  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts By Endpoint\n     * @param param the request object\n     */\n    public v1MessageAttemptListByEndpointWithHttpInfo(param: MessageAttemptApiV1MessageAttemptListByEndpointRequest, options?: Configuration): Promise<HttpInfo<ListResponseMessageAttemptOut>> {\n        return this.api.v1MessageAttemptListByEndpointWithHttpInfo(param.appId, param.endpointId, param.limit, param.iterator, param.status, param.statusCodeClass, param.channel, param.tag, param.before, param.after, param.withContent, param.withMsg, param.eventTypes,  options).toPromise();\n    }\n\n    /**\n     * List attempts by endpoint id  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts By Endpoint\n     * @param param the request object\n     */\n    public v1MessageAttemptListByEndpoint(param: MessageAttemptApiV1MessageAttemptListByEndpointRequest, options?: Configuration): Promise<ListResponseMessageAttemptOut> {\n        return this.api.v1MessageAttemptListByEndpoint(param.appId, param.endpointId, param.limit, param.iterator, param.status, param.statusCodeClass, param.channel, param.tag, param.before, param.after, param.withContent, param.withMsg, param.eventTypes,  options).toPromise();\n    }\n\n    /**\n     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts For Endpoint\n     * @param param the request object\n     */\n    public v1MessageAttemptListByEndpointDeprecatedWithHttpInfo(param: MessageAttemptApiV1MessageAttemptListByEndpointDeprecatedRequest, options?: Configuration): Promise<HttpInfo<ListResponseMessageAttemptEndpointOut>> {\n        return this.api.v1MessageAttemptListByEndpointDeprecatedWithHttpInfo(param.appId, param.msgId, param.endpointId, param.limit, param.iterator, param.channel, param.tag, param.status, param.before, param.after, param.eventTypes,  options).toPromise();\n    }\n\n    /**\n     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts For Endpoint\n     * @param param the request object\n     */\n    public v1MessageAttemptListByEndpointDeprecated(param: MessageAttemptApiV1MessageAttemptListByEndpointDeprecatedRequest, options?: Configuration): Promise<ListResponseMessageAttemptEndpointOut> {\n        return this.api.v1MessageAttemptListByEndpointDeprecated(param.appId, param.msgId, param.endpointId, param.limit, param.iterator, param.channel, param.tag, param.status, param.before, param.after, param.eventTypes,  options).toPromise();\n    }\n\n    /**\n     * List attempts by message ID.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.\n     * List Attempts By Msg\n     * @param param the request object\n     */\n    public v1MessageAttemptListByMsgWithHttpInfo(param: MessageAttemptApiV1MessageAttemptListByMsgRequest, options?: Configuration): Promise<HttpInfo<ListResponseMessageAttemptOut>> {\n        return this.api.v1MessageAttemptListByMsgWithHttpInfo(param.appId, param.msgId, param.limit, param.iterator, param.status, param.statusCodeClass, param.channel, param.tag, param.endpointId, param.before, param.after, param.withContent, param.eventTypes,  options).toPromise();\n    }\n\n    /**\n     * List attempts by message ID.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.\n     * List Attempts By Msg\n     * @param param the request object\n     */\n    public v1MessageAttemptListByMsg(param: MessageAttemptApiV1MessageAttemptListByMsgRequest, options?: Configuration): Promise<ListResponseMessageAttemptOut> {\n        return this.api.v1MessageAttemptListByMsg(param.appId, param.msgId, param.limit, param.iterator, param.status, param.statusCodeClass, param.channel, param.tag, param.endpointId, param.before, param.after, param.withContent, param.eventTypes,  options).toPromise();\n    }\n\n    /**\n     * Deprecated: Please use \\\"List Attempts by Endpoint\\\" and \\\"List Attempts by Msg\\\" instead.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.  `msg_id`: Use a message id or a message `eventId`\n     * List Attempts\n     * @param param the request object\n     */\n    public v1MessageAttemptListByMsgDeprecatedWithHttpInfo(param: MessageAttemptApiV1MessageAttemptListByMsgDeprecatedRequest, options?: Configuration): Promise<HttpInfo<ListResponseMessageAttemptOut>> {\n        return this.api.v1MessageAttemptListByMsgDeprecatedWithHttpInfo(param.appId, param.msgId, param.limit, param.iterator, param.endpointId, param.channel, param.tag, param.status, param.before, param.after, param.statusCodeClass, param.eventTypes,  options).toPromise();\n    }\n\n    /**\n     * Deprecated: Please use \\\"List Attempts by Endpoint\\\" and \\\"List Attempts by Msg\\\" instead.  Note that by default this endpoint is limited to retrieving 90 days\\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.  `msg_id`: Use a message id or a message `eventId`\n     * List Attempts\n     * @param param the request object\n     */\n    public v1MessageAttemptListByMsgDeprecated(param: MessageAttemptApiV1MessageAttemptListByMsgDeprecatedRequest, options?: Configuration): Promise<ListResponseMessageAttemptOut> {\n        return this.api.v1MessageAttemptListByMsgDeprecated(param.appId, param.msgId, param.limit, param.iterator, param.endpointId, param.channel, param.tag, param.status, param.before, param.after, param.statusCodeClass, param.eventTypes,  options).toPromise();\n    }\n\n    /**\n     * Resend a message to the specified endpoint.\n     * Resend Webhook\n     * @param param the request object\n     */\n    public v1MessageAttemptResendWithHttpInfo(param: MessageAttemptApiV1MessageAttemptResendRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1MessageAttemptResendWithHttpInfo(param.appId, param.msgId, param.endpointId, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Resend a message to the specified endpoint.\n     * Resend Webhook\n     * @param param the request object\n     */\n    public v1MessageAttemptResend(param: MessageAttemptApiV1MessageAttemptResendRequest, options?: Configuration): Promise<void> {\n        return this.api.v1MessageAttemptResend(param.appId, param.msgId, param.endpointId, param.idempotencyKey,  options).toPromise();\n    }\n\n}\n\nimport { ObservableStatisticsApi } from \"./ObservableAPI\";\nimport { StatisticsApiRequestFactory, StatisticsApiResponseProcessor} from \"../apis/StatisticsApi\";\n\nexport interface StatisticsApiV1StatisticsAggregateAppStatsRequest {\n    /**\n     * \n     * @type AppUsageStatsIn\n     * @memberof StatisticsApiv1StatisticsAggregateAppStats\n     */\n    appUsageStatsIn: AppUsageStatsIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof StatisticsApiv1StatisticsAggregateAppStats\n     */\n    idempotencyKey?: string\n}\n\nexport interface StatisticsApiV1StatisticsAggregateEventTypesRequest {\n}\n\nexport interface StatisticsApiV1StatsAppAttemptsRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof StatisticsApiv1StatsAppAttempts\n     */\n    appId: string\n    /**\n     * Filter the range to data starting from this date.\n     * Defaults to: undefined\n     * @type Date\n     * @memberof StatisticsApiv1StatsAppAttempts\n     */\n    startDate?: Date\n    /**\n     * Filter the range to data ending by this date.\n     * Defaults to: undefined\n     * @type Date\n     * @memberof StatisticsApiv1StatsAppAttempts\n     */\n    endDate?: Date\n}\n\nexport interface StatisticsApiV1StatsEndpointAttemptsRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof StatisticsApiv1StatsEndpointAttempts\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof StatisticsApiv1StatsEndpointAttempts\n     */\n    endpointId: string\n    /**\n     * Filter the range to data starting from this date.\n     * Defaults to: undefined\n     * @type Date\n     * @memberof StatisticsApiv1StatsEndpointAttempts\n     */\n    startDate?: Date\n    /**\n     * Filter the range to data ending by this date.\n     * Defaults to: undefined\n     * @type Date\n     * @memberof StatisticsApiv1StatsEndpointAttempts\n     */\n    endDate?: Date\n}\n\nexport class ObjectStatisticsApi {\n    private api: ObservableStatisticsApi\n\n    public constructor(configuration: Configuration, requestFactory?: StatisticsApiRequestFactory, responseProcessor?: StatisticsApiResponseProcessor) {\n        this.api = new ObservableStatisticsApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Creates a background task to calculate the message destinations for all applications in the environment.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.\n     * Aggregate App Stats\n     * @param param the request object\n     */\n    public v1StatisticsAggregateAppStatsWithHttpInfo(param: StatisticsApiV1StatisticsAggregateAppStatsRequest, options?: Configuration): Promise<HttpInfo<AppUsageStatsOut>> {\n        return this.api.v1StatisticsAggregateAppStatsWithHttpInfo(param.appUsageStatsIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Creates a background task to calculate the message destinations for all applications in the environment.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.\n     * Aggregate App Stats\n     * @param param the request object\n     */\n    public v1StatisticsAggregateAppStats(param: StatisticsApiV1StatisticsAggregateAppStatsRequest, options?: Configuration): Promise<AppUsageStatsOut> {\n        return this.api.v1StatisticsAggregateAppStats(param.appUsageStatsIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Creates a background task to calculate the listed event types for all apps in the organization.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.\n     * Aggregate Event Types\n     * @param param the request object\n     */\n    public v1StatisticsAggregateEventTypesWithHttpInfo(param: StatisticsApiV1StatisticsAggregateEventTypesRequest = {}, options?: Configuration): Promise<HttpInfo<AggregateEventTypesOut>> {\n        return this.api.v1StatisticsAggregateEventTypesWithHttpInfo( options).toPromise();\n    }\n\n    /**\n     * Creates a background task to calculate the listed event types for all apps in the organization.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.\n     * Aggregate Event Types\n     * @param param the request object\n     */\n    public v1StatisticsAggregateEventTypes(param: StatisticsApiV1StatisticsAggregateEventTypesRequest = {}, options?: Configuration): Promise<AggregateEventTypesOut> {\n        return this.api.v1StatisticsAggregateEventTypes( options).toPromise();\n    }\n\n    /**\n     * Returns application-level statistics on message attempts\n     * Get App Attempt Stats\n     * @param param the request object\n     */\n    public v1StatsAppAttemptsWithHttpInfo(param: StatisticsApiV1StatsAppAttemptsRequest, options?: Configuration): Promise<HttpInfo<AttemptStatisticsResponse>> {\n        return this.api.v1StatsAppAttemptsWithHttpInfo(param.appId, param.startDate, param.endDate,  options).toPromise();\n    }\n\n    /**\n     * Returns application-level statistics on message attempts\n     * Get App Attempt Stats\n     * @param param the request object\n     */\n    public v1StatsAppAttempts(param: StatisticsApiV1StatsAppAttemptsRequest, options?: Configuration): Promise<AttemptStatisticsResponse> {\n        return this.api.v1StatsAppAttempts(param.appId, param.startDate, param.endDate,  options).toPromise();\n    }\n\n    /**\n     * Returns endpoint-level statistics on message attempts.\n     * Get Ep Stats\n     * @param param the request object\n     */\n    public v1StatsEndpointAttemptsWithHttpInfo(param: StatisticsApiV1StatsEndpointAttemptsRequest, options?: Configuration): Promise<HttpInfo<AttemptStatisticsResponse>> {\n        return this.api.v1StatsEndpointAttemptsWithHttpInfo(param.appId, param.endpointId, param.startDate, param.endDate,  options).toPromise();\n    }\n\n    /**\n     * Returns endpoint-level statistics on message attempts.\n     * Get Ep Stats\n     * @param param the request object\n     */\n    public v1StatsEndpointAttempts(param: StatisticsApiV1StatsEndpointAttemptsRequest, options?: Configuration): Promise<AttemptStatisticsResponse> {\n        return this.api.v1StatsEndpointAttempts(param.appId, param.endpointId, param.startDate, param.endDate,  options).toPromise();\n    }\n\n}\n\nimport { ObservableStreamApi } from \"./ObservableAPI\";\nimport { StreamApiRequestFactory, StreamApiResponseProcessor} from \"../apis/StreamApi\";\n\nexport interface StreamApiV1StreamCreateRequest {\n    /**\n     * \n     * @type StreamIn\n     * @memberof StreamApiv1StreamCreate\n     */\n    streamIn: StreamIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof StreamApiv1StreamCreate\n     */\n    idempotencyKey?: string\n}\n\nexport interface StreamApiV1StreamCreateEventsRequest {\n    /**\n     * \n     * Defaults to: undefined\n     * @type string\n     * @memberof StreamApiv1StreamCreateEvents\n     */\n    streamId: string\n    /**\n     * \n     * @type CreateStreamIn\n     * @memberof StreamApiv1StreamCreateEvents\n     */\n    createStreamIn: CreateStreamIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof StreamApiv1StreamCreateEvents\n     */\n    idempotencyKey?: string\n}\n\nexport interface StreamApiV1StreamDeleteRequest {\n    /**\n     * \n     * Defaults to: undefined\n     * @type string\n     * @memberof StreamApiv1StreamDelete\n     */\n    streamId: string\n}\n\nexport interface StreamApiV1StreamEventsGetRequest {\n    /**\n     * \n     * Defaults to: undefined\n     * @type string\n     * @memberof StreamApiv1StreamEventsGet\n     */\n    streamId: string\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof StreamApiv1StreamEventsGet\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof StreamApiv1StreamEventsGet\n     */\n    iterator?: string\n    /**\n     * \n     * Defaults to: undefined\n     * @type Date\n     * @memberof StreamApiv1StreamEventsGet\n     */\n    after?: Date\n}\n\nexport interface StreamApiV1StreamGetRequest {\n    /**\n     * \n     * Defaults to: undefined\n     * @type string\n     * @memberof StreamApiv1StreamGet\n     */\n    streamId: string\n}\n\nexport interface StreamApiV1StreamListRequest {\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof StreamApiv1StreamList\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof StreamApiv1StreamList\n     */\n    iterator?: string\n    /**\n     * The sorting order of the returned items\n     * Defaults to: undefined\n     * @type Ordering\n     * @memberof StreamApiv1StreamList\n     */\n    order?: Ordering\n}\n\nexport interface StreamApiV1StreamPatchRequest {\n    /**\n     * \n     * Defaults to: undefined\n     * @type string\n     * @memberof StreamApiv1StreamPatch\n     */\n    streamId: string\n    /**\n     * \n     * @type StreamPatch\n     * @memberof StreamApiv1StreamPatch\n     */\n    streamPatch: StreamPatch\n}\n\nexport interface StreamApiV1StreamUpdateRequest {\n    /**\n     * \n     * Defaults to: undefined\n     * @type string\n     * @memberof StreamApiv1StreamUpdate\n     */\n    streamId: string\n    /**\n     * \n     * @type StreamIn\n     * @memberof StreamApiv1StreamUpdate\n     */\n    streamIn: StreamIn\n}\n\nexport class ObjectStreamApi {\n    private api: ObservableStreamApi\n\n    public constructor(configuration: Configuration, requestFactory?: StreamApiRequestFactory, responseProcessor?: StreamApiResponseProcessor) {\n        this.api = new ObservableStreamApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Creates a new stream.\n     * Create Stream\n     * @param param the request object\n     */\n    public v1StreamCreateWithHttpInfo(param: StreamApiV1StreamCreateRequest, options?: Configuration): Promise<HttpInfo<StreamOut>> {\n        return this.api.v1StreamCreateWithHttpInfo(param.streamIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Creates a new stream.\n     * Create Stream\n     * @param param the request object\n     */\n    public v1StreamCreate(param: StreamApiV1StreamCreateRequest, options?: Configuration): Promise<StreamOut> {\n        return this.api.v1StreamCreate(param.streamIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Creates events on the Stream.\n     * Create Events\n     * @param param the request object\n     */\n    public v1StreamCreateEventsWithHttpInfo(param: StreamApiV1StreamCreateEventsRequest, options?: Configuration): Promise<HttpInfo<any>> {\n        return this.api.v1StreamCreateEventsWithHttpInfo(param.streamId, param.createStreamIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Creates events on the Stream.\n     * Create Events\n     * @param param the request object\n     */\n    public v1StreamCreateEvents(param: StreamApiV1StreamCreateEventsRequest, options?: Configuration): Promise<any> {\n        return this.api.v1StreamCreateEvents(param.streamId, param.createStreamIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Delete a stream.\n     * Delete Stream\n     * @param param the request object\n     */\n    public v1StreamDeleteWithHttpInfo(param: StreamApiV1StreamDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1StreamDeleteWithHttpInfo(param.streamId,  options).toPromise();\n    }\n\n    /**\n     * Delete a stream.\n     * Delete Stream\n     * @param param the request object\n     */\n    public v1StreamDelete(param: StreamApiV1StreamDeleteRequest, options?: Configuration): Promise<void> {\n        return this.api.v1StreamDelete(param.streamId,  options).toPromise();\n    }\n\n    /**\n     * Iterate over a stream of events.\n     * Stream Events\n     * @param param the request object\n     */\n    public v1StreamEventsGetWithHttpInfo(param: StreamApiV1StreamEventsGetRequest, options?: Configuration): Promise<HttpInfo<EventStreamOut>> {\n        return this.api.v1StreamEventsGetWithHttpInfo(param.streamId, param.limit, param.iterator, param.after,  options).toPromise();\n    }\n\n    /**\n     * Iterate over a stream of events.\n     * Stream Events\n     * @param param the request object\n     */\n    public v1StreamEventsGet(param: StreamApiV1StreamEventsGetRequest, options?: Configuration): Promise<EventStreamOut> {\n        return this.api.v1StreamEventsGet(param.streamId, param.limit, param.iterator, param.after,  options).toPromise();\n    }\n\n    /**\n     * Get a stream by id or uid.\n     * Get Stream\n     * @param param the request object\n     */\n    public v1StreamGetWithHttpInfo(param: StreamApiV1StreamGetRequest, options?: Configuration): Promise<HttpInfo<StreamOut>> {\n        return this.api.v1StreamGetWithHttpInfo(param.streamId,  options).toPromise();\n    }\n\n    /**\n     * Get a stream by id or uid.\n     * Get Stream\n     * @param param the request object\n     */\n    public v1StreamGet(param: StreamApiV1StreamGetRequest, options?: Configuration): Promise<StreamOut> {\n        return this.api.v1StreamGet(param.streamId,  options).toPromise();\n    }\n\n    /**\n     * List of all the organization\\'s streams.\n     * List Streams\n     * @param param the request object\n     */\n    public v1StreamListWithHttpInfo(param: StreamApiV1StreamListRequest = {}, options?: Configuration): Promise<HttpInfo<ListResponseStreamOut>> {\n        return this.api.v1StreamListWithHttpInfo(param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * List of all the organization\\'s streams.\n     * List Streams\n     * @param param the request object\n     */\n    public v1StreamList(param: StreamApiV1StreamListRequest = {}, options?: Configuration): Promise<ListResponseStreamOut> {\n        return this.api.v1StreamList(param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * Partially update a stream.\n     * Patch Stream\n     * @param param the request object\n     */\n    public v1StreamPatchWithHttpInfo(param: StreamApiV1StreamPatchRequest, options?: Configuration): Promise<HttpInfo<StreamOut>> {\n        return this.api.v1StreamPatchWithHttpInfo(param.streamId, param.streamPatch,  options).toPromise();\n    }\n\n    /**\n     * Partially update a stream.\n     * Patch Stream\n     * @param param the request object\n     */\n    public v1StreamPatch(param: StreamApiV1StreamPatchRequest, options?: Configuration): Promise<StreamOut> {\n        return this.api.v1StreamPatch(param.streamId, param.streamPatch,  options).toPromise();\n    }\n\n    /**\n     * Update a stream.\n     * Update Stream\n     * @param param the request object\n     */\n    public v1StreamUpdateWithHttpInfo(param: StreamApiV1StreamUpdateRequest, options?: Configuration): Promise<HttpInfo<StreamOut>> {\n        return this.api.v1StreamUpdateWithHttpInfo(param.streamId, param.streamIn,  options).toPromise();\n    }\n\n    /**\n     * Update a stream.\n     * Update Stream\n     * @param param the request object\n     */\n    public v1StreamUpdate(param: StreamApiV1StreamUpdateRequest, options?: Configuration): Promise<StreamOut> {\n        return this.api.v1StreamUpdate(param.streamId, param.streamIn,  options).toPromise();\n    }\n\n}\n\nimport { ObservableStreamEventTypesApi } from \"./ObservableAPI\";\nimport { StreamEventTypesApiRequestFactory, StreamEventTypesApiResponseProcessor} from \"../apis/StreamEventTypesApi\";\n\nexport interface StreamEventTypesApiV1StreamEventTypeCreateRequest {\n    /**\n     * \n     * @type StreamEventTypeIn\n     * @memberof StreamEventTypesApiv1StreamEventTypeCreate\n     */\n    streamEventTypeIn: StreamEventTypeIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof StreamEventTypesApiv1StreamEventTypeCreate\n     */\n    idempotencyKey?: string\n}\n\nexport interface StreamEventTypesApiV1StreamEventTypeDeleteRequest {\n    /**\n     * The event type\\&#39;s name\n     * Defaults to: undefined\n     * @type string\n     * @memberof StreamEventTypesApiv1StreamEventTypeDelete\n     */\n    name: string\n}\n\nexport interface StreamEventTypesApiV1StreamEventTypeGetRequest {\n    /**\n     * The event type\\&#39;s name\n     * Defaults to: undefined\n     * @type string\n     * @memberof StreamEventTypesApiv1StreamEventTypeGet\n     */\n    name: string\n}\n\nexport interface StreamEventTypesApiV1StreamEventTypeListRequest {\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof StreamEventTypesApiv1StreamEventTypeList\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof StreamEventTypesApiv1StreamEventTypeList\n     */\n    iterator?: string\n    /**\n     * The sorting order of the returned items\n     * Defaults to: undefined\n     * @type Ordering\n     * @memberof StreamEventTypesApiv1StreamEventTypeList\n     */\n    order?: Ordering\n}\n\nexport interface StreamEventTypesApiV1StreamEventTypePatchRequest {\n    /**\n     * The event type\\&#39;s name\n     * Defaults to: undefined\n     * @type string\n     * @memberof StreamEventTypesApiv1StreamEventTypePatch\n     */\n    name: string\n    /**\n     * \n     * @type StreamEventTypePatch\n     * @memberof StreamEventTypesApiv1StreamEventTypePatch\n     */\n    streamEventTypePatch: StreamEventTypePatch\n}\n\nexport interface StreamEventTypesApiV1StreamEventTypeUpdateRequest {\n    /**\n     * The event type\\&#39;s name\n     * Defaults to: undefined\n     * @type string\n     * @memberof StreamEventTypesApiv1StreamEventTypeUpdate\n     */\n    name: string\n    /**\n     * \n     * @type StreamEventTypeIn\n     * @memberof StreamEventTypesApiv1StreamEventTypeUpdate\n     */\n    streamEventTypeIn: StreamEventTypeIn\n}\n\nexport class ObjectStreamEventTypesApi {\n    private api: ObservableStreamEventTypesApi\n\n    public constructor(configuration: Configuration, requestFactory?: StreamEventTypesApiRequestFactory, responseProcessor?: StreamEventTypesApiResponseProcessor) {\n        this.api = new ObservableStreamEventTypesApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Create an event type for Streams.\n     * Create Stream Event Type\n     * @param param the request object\n     */\n    public v1StreamEventTypeCreateWithHttpInfo(param: StreamEventTypesApiV1StreamEventTypeCreateRequest, options?: Configuration): Promise<HttpInfo<StreamEventTypeOut>> {\n        return this.api.v1StreamEventTypeCreateWithHttpInfo(param.streamEventTypeIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Create an event type for Streams.\n     * Create Stream Event Type\n     * @param param the request object\n     */\n    public v1StreamEventTypeCreate(param: StreamEventTypesApiV1StreamEventTypeCreateRequest, options?: Configuration): Promise<StreamEventTypeOut> {\n        return this.api.v1StreamEventTypeCreate(param.streamEventTypeIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Delete an event type.\n     * Delete Stream Event Type\n     * @param param the request object\n     */\n    public v1StreamEventTypeDeleteWithHttpInfo(param: StreamEventTypesApiV1StreamEventTypeDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1StreamEventTypeDeleteWithHttpInfo(param.name,  options).toPromise();\n    }\n\n    /**\n     * Delete an event type.\n     * Delete Stream Event Type\n     * @param param the request object\n     */\n    public v1StreamEventTypeDelete(param: StreamEventTypesApiV1StreamEventTypeDeleteRequest, options?: Configuration): Promise<void> {\n        return this.api.v1StreamEventTypeDelete(param.name,  options).toPromise();\n    }\n\n    /**\n     * Get an event type.\n     * Get Stream Event Type\n     * @param param the request object\n     */\n    public v1StreamEventTypeGetWithHttpInfo(param: StreamEventTypesApiV1StreamEventTypeGetRequest, options?: Configuration): Promise<HttpInfo<StreamEventTypeOut>> {\n        return this.api.v1StreamEventTypeGetWithHttpInfo(param.name,  options).toPromise();\n    }\n\n    /**\n     * Get an event type.\n     * Get Stream Event Type\n     * @param param the request object\n     */\n    public v1StreamEventTypeGet(param: StreamEventTypesApiV1StreamEventTypeGetRequest, options?: Configuration): Promise<StreamEventTypeOut> {\n        return this.api.v1StreamEventTypeGet(param.name,  options).toPromise();\n    }\n\n    /**\n     * List of all the organization\\'s event types for streaming.\n     * List Stream Event Types\n     * @param param the request object\n     */\n    public v1StreamEventTypeListWithHttpInfo(param: StreamEventTypesApiV1StreamEventTypeListRequest = {}, options?: Configuration): Promise<HttpInfo<ListResponseStreamEventTypeOut>> {\n        return this.api.v1StreamEventTypeListWithHttpInfo(param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * List of all the organization\\'s event types for streaming.\n     * List Stream Event Types\n     * @param param the request object\n     */\n    public v1StreamEventTypeList(param: StreamEventTypesApiV1StreamEventTypeListRequest = {}, options?: Configuration): Promise<ListResponseStreamEventTypeOut> {\n        return this.api.v1StreamEventTypeList(param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * Patch an event type for Streams.\n     * Patch Stream Event Type\n     * @param param the request object\n     */\n    public v1StreamEventTypePatchWithHttpInfo(param: StreamEventTypesApiV1StreamEventTypePatchRequest, options?: Configuration): Promise<HttpInfo<StreamEventTypeOut>> {\n        return this.api.v1StreamEventTypePatchWithHttpInfo(param.name, param.streamEventTypePatch,  options).toPromise();\n    }\n\n    /**\n     * Patch an event type for Streams.\n     * Patch Stream Event Type\n     * @param param the request object\n     */\n    public v1StreamEventTypePatch(param: StreamEventTypesApiV1StreamEventTypePatchRequest, options?: Configuration): Promise<StreamEventTypeOut> {\n        return this.api.v1StreamEventTypePatch(param.name, param.streamEventTypePatch,  options).toPromise();\n    }\n\n    /**\n     * Update or create a event type for Streams.\n     * Update Stream Event Type\n     * @param param the request object\n     */\n    public v1StreamEventTypeUpdateWithHttpInfo(param: StreamEventTypesApiV1StreamEventTypeUpdateRequest, options?: Configuration): Promise<HttpInfo<StreamEventTypeOut>> {\n        return this.api.v1StreamEventTypeUpdateWithHttpInfo(param.name, param.streamEventTypeIn,  options).toPromise();\n    }\n\n    /**\n     * Update or create a event type for Streams.\n     * Update Stream Event Type\n     * @param param the request object\n     */\n    public v1StreamEventTypeUpdate(param: StreamEventTypesApiV1StreamEventTypeUpdateRequest, options?: Configuration): Promise<StreamEventTypeOut> {\n        return this.api.v1StreamEventTypeUpdate(param.name, param.streamEventTypeIn,  options).toPromise();\n    }\n\n}\n\nimport { ObservableTransformationTemplateApi } from \"./ObservableAPI\";\nimport { TransformationTemplateApiRequestFactory, TransformationTemplateApiResponseProcessor} from \"../apis/TransformationTemplateApi\";\n\nexport interface TransformationTemplateApiV1EndpointUpdateHubspotOauthConfigRequest {\n    /**\n     * The app\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof TransformationTemplateApiv1EndpointUpdateHubspotOauthConfig\n     */\n    appId: string\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof TransformationTemplateApiv1EndpointUpdateHubspotOauthConfig\n     */\n    endpointId: string\n    /**\n     * \n     * @type HubspotOauthConfigIn\n     * @memberof TransformationTemplateApiv1EndpointUpdateHubspotOauthConfig\n     */\n    hubspotOauthConfigIn: HubspotOauthConfigIn\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateCreateRequest {\n    /**\n     * \n     * @type TemplateIn\n     * @memberof TransformationTemplateApiv1TransformationTemplateCreate\n     */\n    templateIn: TemplateIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateCreate\n     */\n    idempotencyKey?: string\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateDeleteRequest {\n    /**\n     * \n     * Defaults to: undefined\n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateDelete\n     */\n    transformationTemplateId: string\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateGenerateRequest {\n    /**\n     * \n     * @type GenerateIn\n     * @memberof TransformationTemplateApiv1TransformationTemplateGenerate\n     */\n    generateIn: GenerateIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateGenerate\n     */\n    idempotencyKey?: string\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateGetRequest {\n    /**\n     * \n     * Defaults to: undefined\n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateGet\n     */\n    transformationTemplateId: string\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateListRequest {\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof TransformationTemplateApiv1TransformationTemplateList\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateList\n     */\n    iterator?: string\n    /**\n     * The sorting order of the returned items\n     * Defaults to: undefined\n     * @type Ordering\n     * @memberof TransformationTemplateApiv1TransformationTemplateList\n     */\n    order?: Ordering\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateOauthDiscordRequest {\n    /**\n     * \n     * @type OAuthPayloadIn\n     * @memberof TransformationTemplateApiv1TransformationTemplateOauthDiscord\n     */\n    oAuthPayloadIn: OAuthPayloadIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateOauthDiscord\n     */\n    idempotencyKey?: string\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateOauthHubspotRequest {\n    /**\n     * \n     * @type OAuthPayloadIn\n     * @memberof TransformationTemplateApiv1TransformationTemplateOauthHubspot\n     */\n    oAuthPayloadIn: OAuthPayloadIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateOauthHubspot\n     */\n    idempotencyKey?: string\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateOauthSlackRequest {\n    /**\n     * \n     * @type OAuthPayloadIn\n     * @memberof TransformationTemplateApiv1TransformationTemplateOauthSlack\n     */\n    oAuthPayloadIn: OAuthPayloadIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateOauthSlack\n     */\n    idempotencyKey?: string\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplatePatchRequest {\n    /**\n     * \n     * Defaults to: undefined\n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplatePatch\n     */\n    transformationTemplateId: string\n    /**\n     * \n     * @type TemplatePatch\n     * @memberof TransformationTemplateApiv1TransformationTemplatePatch\n     */\n    templatePatch: TemplatePatch\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateSimulateRequest {\n    /**\n     * \n     * @type TransformationSimulateIn\n     * @memberof TransformationTemplateApiv1TransformationTemplateSimulate\n     */\n    transformationSimulateIn: TransformationSimulateIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateSimulate\n     */\n    idempotencyKey?: string\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateUpdateRequest {\n    /**\n     * \n     * Defaults to: undefined\n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateUpdate\n     */\n    transformationTemplateId: string\n    /**\n     * \n     * @type TemplateUpdate\n     * @memberof TransformationTemplateApiv1TransformationTemplateUpdate\n     */\n    templateUpdate: TemplateUpdate\n}\n\nexport class ObjectTransformationTemplateApi {\n    private api: ObservableTransformationTemplateApi\n\n    public constructor(configuration: Configuration, requestFactory?: TransformationTemplateApiRequestFactory, responseProcessor?: TransformationTemplateApiResponseProcessor) {\n        this.api = new ObservableTransformationTemplateApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Create/update endpoint Hubspot OAuth configuration Specific private endpoint just for us, to avoid exposing the Hubspot secret to the client.\n     * Update Hubspot Oauth Config\n     * @param param the request object\n     */\n    public v1EndpointUpdateHubspotOauthConfigWithHttpInfo(param: TransformationTemplateApiV1EndpointUpdateHubspotOauthConfigRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1EndpointUpdateHubspotOauthConfigWithHttpInfo(param.appId, param.endpointId, param.hubspotOauthConfigIn,  options).toPromise();\n    }\n\n    /**\n     * Create/update endpoint Hubspot OAuth configuration Specific private endpoint just for us, to avoid exposing the Hubspot secret to the client.\n     * Update Hubspot Oauth Config\n     * @param param the request object\n     */\n    public v1EndpointUpdateHubspotOauthConfig(param: TransformationTemplateApiV1EndpointUpdateHubspotOauthConfigRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointUpdateHubspotOauthConfig(param.appId, param.endpointId, param.hubspotOauthConfigIn,  options).toPromise();\n    }\n\n    /**\n     * Create a new transformation template.\n     * Create Transformation Template\n     * @param param the request object\n     */\n    public v1TransformationTemplateCreateWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateCreateRequest, options?: Configuration): Promise<HttpInfo<TemplateOut>> {\n        return this.api.v1TransformationTemplateCreateWithHttpInfo(param.templateIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Create a new transformation template.\n     * Create Transformation Template\n     * @param param the request object\n     */\n    public v1TransformationTemplateCreate(param: TransformationTemplateApiV1TransformationTemplateCreateRequest, options?: Configuration): Promise<TemplateOut> {\n        return this.api.v1TransformationTemplateCreate(param.templateIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Delete a transformation template.\n     * Delete Transformation Template\n     * @param param the request object\n     */\n    public v1TransformationTemplateDeleteWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.v1TransformationTemplateDeleteWithHttpInfo(param.transformationTemplateId,  options).toPromise();\n    }\n\n    /**\n     * Delete a transformation template.\n     * Delete Transformation Template\n     * @param param the request object\n     */\n    public v1TransformationTemplateDelete(param: TransformationTemplateApiV1TransformationTemplateDeleteRequest, options?: Configuration): Promise<void> {\n        return this.api.v1TransformationTemplateDelete(param.transformationTemplateId,  options).toPromise();\n    }\n\n    /**\n     * Use OpenAI\\'s Completion API to generate code for a transformation template.\n     * Generate\n     * @param param the request object\n     */\n    public v1TransformationTemplateGenerateWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateGenerateRequest, options?: Configuration): Promise<HttpInfo<GenerateOut>> {\n        return this.api.v1TransformationTemplateGenerateWithHttpInfo(param.generateIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Use OpenAI\\'s Completion API to generate code for a transformation template.\n     * Generate\n     * @param param the request object\n     */\n    public v1TransformationTemplateGenerate(param: TransformationTemplateApiV1TransformationTemplateGenerateRequest, options?: Configuration): Promise<GenerateOut> {\n        return this.api.v1TransformationTemplateGenerate(param.generateIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Get a transformation template.\n     * Get Transformation Template\n     * @param param the request object\n     */\n    public v1TransformationTemplateGetWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateGetRequest, options?: Configuration): Promise<HttpInfo<TemplateOut>> {\n        return this.api.v1TransformationTemplateGetWithHttpInfo(param.transformationTemplateId,  options).toPromise();\n    }\n\n    /**\n     * Get a transformation template.\n     * Get Transformation Template\n     * @param param the request object\n     */\n    public v1TransformationTemplateGet(param: TransformationTemplateApiV1TransformationTemplateGetRequest, options?: Configuration): Promise<TemplateOut> {\n        return this.api.v1TransformationTemplateGet(param.transformationTemplateId,  options).toPromise();\n    }\n\n    /**\n     * List all transformation templates for an application.\n     * List Transformation Templates\n     * @param param the request object\n     */\n    public v1TransformationTemplateListWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateListRequest = {}, options?: Configuration): Promise<HttpInfo<ListResponseTemplateOut>> {\n        return this.api.v1TransformationTemplateListWithHttpInfo(param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * List all transformation templates for an application.\n     * List Transformation Templates\n     * @param param the request object\n     */\n    public v1TransformationTemplateList(param: TransformationTemplateApiV1TransformationTemplateListRequest = {}, options?: Configuration): Promise<ListResponseTemplateOut> {\n        return this.api.v1TransformationTemplateList(param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * Get Discord Incoming webhook URL.\n     * Authorize Discord\n     * @param param the request object\n     */\n    public v1TransformationTemplateOauthDiscordWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateOauthDiscordRequest, options?: Configuration): Promise<HttpInfo<IncomingWebhookPayloadOut>> {\n        return this.api.v1TransformationTemplateOauthDiscordWithHttpInfo(param.oAuthPayloadIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Get Discord Incoming webhook URL.\n     * Authorize Discord\n     * @param param the request object\n     */\n    public v1TransformationTemplateOauthDiscord(param: TransformationTemplateApiV1TransformationTemplateOauthDiscordRequest, options?: Configuration): Promise<IncomingWebhookPayloadOut> {\n        return this.api.v1TransformationTemplateOauthDiscord(param.oAuthPayloadIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Get Hubspot access token using authorization code.\n     * Authorize Hubspot\n     * @param param the request object\n     */\n    public v1TransformationTemplateOauthHubspotWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateOauthHubspotRequest, options?: Configuration): Promise<HttpInfo<OAuthPayloadOut>> {\n        return this.api.v1TransformationTemplateOauthHubspotWithHttpInfo(param.oAuthPayloadIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Get Hubspot access token using authorization code.\n     * Authorize Hubspot\n     * @param param the request object\n     */\n    public v1TransformationTemplateOauthHubspot(param: TransformationTemplateApiV1TransformationTemplateOauthHubspotRequest, options?: Configuration): Promise<OAuthPayloadOut> {\n        return this.api.v1TransformationTemplateOauthHubspot(param.oAuthPayloadIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Get Slack Incoming webhook URL.\n     * Authorize Slack\n     * @param param the request object\n     */\n    public v1TransformationTemplateOauthSlackWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateOauthSlackRequest, options?: Configuration): Promise<HttpInfo<IncomingWebhookPayloadOut>> {\n        return this.api.v1TransformationTemplateOauthSlackWithHttpInfo(param.oAuthPayloadIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Get Slack Incoming webhook URL.\n     * Authorize Slack\n     * @param param the request object\n     */\n    public v1TransformationTemplateOauthSlack(param: TransformationTemplateApiV1TransformationTemplateOauthSlackRequest, options?: Configuration): Promise<IncomingWebhookPayloadOut> {\n        return this.api.v1TransformationTemplateOauthSlack(param.oAuthPayloadIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Partially update a transformation template.\n     * Patch Transformation Template\n     * @param param the request object\n     */\n    public v1TransformationTemplatePatchWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplatePatchRequest, options?: Configuration): Promise<HttpInfo<TemplateOut>> {\n        return this.api.v1TransformationTemplatePatchWithHttpInfo(param.transformationTemplateId, param.templatePatch,  options).toPromise();\n    }\n\n    /**\n     * Partially update a transformation template.\n     * Patch Transformation Template\n     * @param param the request object\n     */\n    public v1TransformationTemplatePatch(param: TransformationTemplateApiV1TransformationTemplatePatchRequest, options?: Configuration): Promise<TemplateOut> {\n        return this.api.v1TransformationTemplatePatch(param.transformationTemplateId, param.templatePatch,  options).toPromise();\n    }\n\n    /**\n     * Simulate running the transformation on the payload and code.\n     * Simulate\n     * @param param the request object\n     */\n    public v1TransformationTemplateSimulateWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateSimulateRequest, options?: Configuration): Promise<HttpInfo<TransformationSimulateOut>> {\n        return this.api.v1TransformationTemplateSimulateWithHttpInfo(param.transformationSimulateIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Simulate running the transformation on the payload and code.\n     * Simulate\n     * @param param the request object\n     */\n    public v1TransformationTemplateSimulate(param: TransformationTemplateApiV1TransformationTemplateSimulateRequest, options?: Configuration): Promise<TransformationSimulateOut> {\n        return this.api.v1TransformationTemplateSimulate(param.transformationSimulateIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Update a transformation template.\n     * Update Transformation Template\n     * @param param the request object\n     */\n    public v1TransformationTemplateUpdateWithHttpInfo(param: TransformationTemplateApiV1TransformationTemplateUpdateRequest, options?: Configuration): Promise<HttpInfo<TemplateOut>> {\n        return this.api.v1TransformationTemplateUpdateWithHttpInfo(param.transformationTemplateId, param.templateUpdate,  options).toPromise();\n    }\n\n    /**\n     * Update a transformation template.\n     * Update Transformation Template\n     * @param param the request object\n     */\n    public v1TransformationTemplateUpdate(param: TransformationTemplateApiV1TransformationTemplateUpdateRequest, options?: Configuration): Promise<TemplateOut> {\n        return this.api.v1TransformationTemplateUpdate(param.transformationTemplateId, param.templateUpdate,  options).toPromise();\n    }\n\n}\n\nimport { ObservableWebhookEndpointApi } from \"./ObservableAPI\";\nimport { WebhookEndpointApiRequestFactory, WebhookEndpointApiResponseProcessor} from \"../apis/WebhookEndpointApi\";\n\nexport interface WebhookEndpointApiCreateOperationalWebhookEndpointRequest {\n    /**\n     * \n     * @type OperationalWebhookEndpointIn\n     * @memberof WebhookEndpointApicreateOperationalWebhookEndpoint\n     */\n    operationalWebhookEndpointIn: OperationalWebhookEndpointIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof WebhookEndpointApicreateOperationalWebhookEndpoint\n     */\n    idempotencyKey?: string\n}\n\nexport interface WebhookEndpointApiDeleteOperationalWebhookEndpointRequest {\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof WebhookEndpointApideleteOperationalWebhookEndpoint\n     */\n    endpointId: string\n}\n\nexport interface WebhookEndpointApiGetOperationalWebhookEndpointRequest {\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof WebhookEndpointApigetOperationalWebhookEndpoint\n     */\n    endpointId: string\n}\n\nexport interface WebhookEndpointApiGetOperationalWebhookEndpointSecretRequest {\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof WebhookEndpointApigetOperationalWebhookEndpointSecret\n     */\n    endpointId: string\n}\n\nexport interface WebhookEndpointApiListOperationalWebhookEndpointsRequest {\n    /**\n     * Limit the number of returned items\n     * Minimum: 1\n     * Maximum: 250\n     * Defaults to: undefined\n     * @type number\n     * @memberof WebhookEndpointApilistOperationalWebhookEndpoints\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * Defaults to: undefined\n     * @type string\n     * @memberof WebhookEndpointApilistOperationalWebhookEndpoints\n     */\n    iterator?: string\n    /**\n     * The sorting order of the returned items\n     * Defaults to: undefined\n     * @type Ordering\n     * @memberof WebhookEndpointApilistOperationalWebhookEndpoints\n     */\n    order?: Ordering\n}\n\nexport interface WebhookEndpointApiRotateOperationalWebhookEndpointSecretRequest {\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof WebhookEndpointApirotateOperationalWebhookEndpointSecret\n     */\n    endpointId: string\n    /**\n     * \n     * @type OperationalWebhookEndpointSecretIn\n     * @memberof WebhookEndpointApirotateOperationalWebhookEndpointSecret\n     */\n    operationalWebhookEndpointSecretIn: OperationalWebhookEndpointSecretIn\n    /**\n     * The request\\&#39;s idempotency key\n     * Defaults to: undefined\n     * @type string\n     * @memberof WebhookEndpointApirotateOperationalWebhookEndpointSecret\n     */\n    idempotencyKey?: string\n}\n\nexport interface WebhookEndpointApiUpdateOperationalWebhookEndpointRequest {\n    /**\n     * The ep\\&#39;s ID or UID\n     * Defaults to: undefined\n     * @type string\n     * @memberof WebhookEndpointApiupdateOperationalWebhookEndpoint\n     */\n    endpointId: string\n    /**\n     * \n     * @type OperationalWebhookEndpointUpdate\n     * @memberof WebhookEndpointApiupdateOperationalWebhookEndpoint\n     */\n    operationalWebhookEndpointUpdate: OperationalWebhookEndpointUpdate\n}\n\nexport class ObjectWebhookEndpointApi {\n    private api: ObservableWebhookEndpointApi\n\n    public constructor(configuration: Configuration, requestFactory?: WebhookEndpointApiRequestFactory, responseProcessor?: WebhookEndpointApiResponseProcessor) {\n        this.api = new ObservableWebhookEndpointApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Create an operational webhook endpoint.\n     * Create Operational Webhook Endpoint\n     * @param param the request object\n     */\n    public createOperationalWebhookEndpointWithHttpInfo(param: WebhookEndpointApiCreateOperationalWebhookEndpointRequest, options?: Configuration): Promise<HttpInfo<OperationalWebhookEndpointOut>> {\n        return this.api.createOperationalWebhookEndpointWithHttpInfo(param.operationalWebhookEndpointIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Create an operational webhook endpoint.\n     * Create Operational Webhook Endpoint\n     * @param param the request object\n     */\n    public createOperationalWebhookEndpoint(param: WebhookEndpointApiCreateOperationalWebhookEndpointRequest, options?: Configuration): Promise<OperationalWebhookEndpointOut> {\n        return this.api.createOperationalWebhookEndpoint(param.operationalWebhookEndpointIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Delete an operational webhook endpoint.\n     * Delete Operational Webhook Endpoint\n     * @param param the request object\n     */\n    public deleteOperationalWebhookEndpointWithHttpInfo(param: WebhookEndpointApiDeleteOperationalWebhookEndpointRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.deleteOperationalWebhookEndpointWithHttpInfo(param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Delete an operational webhook endpoint.\n     * Delete Operational Webhook Endpoint\n     * @param param the request object\n     */\n    public deleteOperationalWebhookEndpoint(param: WebhookEndpointApiDeleteOperationalWebhookEndpointRequest, options?: Configuration): Promise<void> {\n        return this.api.deleteOperationalWebhookEndpoint(param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Get an operational webhook endpoint.\n     * Get Operational Webhook Endpoint\n     * @param param the request object\n     */\n    public getOperationalWebhookEndpointWithHttpInfo(param: WebhookEndpointApiGetOperationalWebhookEndpointRequest, options?: Configuration): Promise<HttpInfo<OperationalWebhookEndpointOut>> {\n        return this.api.getOperationalWebhookEndpointWithHttpInfo(param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Get an operational webhook endpoint.\n     * Get Operational Webhook Endpoint\n     * @param param the request object\n     */\n    public getOperationalWebhookEndpoint(param: WebhookEndpointApiGetOperationalWebhookEndpointRequest, options?: Configuration): Promise<OperationalWebhookEndpointOut> {\n        return this.api.getOperationalWebhookEndpoint(param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Get an operational webhook endpoint\\'s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).\n     * Get Operational Webhook Endpoint Secret\n     * @param param the request object\n     */\n    public getOperationalWebhookEndpointSecretWithHttpInfo(param: WebhookEndpointApiGetOperationalWebhookEndpointSecretRequest, options?: Configuration): Promise<HttpInfo<OperationalWebhookEndpointSecretOut>> {\n        return this.api.getOperationalWebhookEndpointSecretWithHttpInfo(param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Get an operational webhook endpoint\\'s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).\n     * Get Operational Webhook Endpoint Secret\n     * @param param the request object\n     */\n    public getOperationalWebhookEndpointSecret(param: WebhookEndpointApiGetOperationalWebhookEndpointSecretRequest, options?: Configuration): Promise<OperationalWebhookEndpointSecretOut> {\n        return this.api.getOperationalWebhookEndpointSecret(param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * List operational webhook endpoints.\n     * List Operational Webhook Endpoints\n     * @param param the request object\n     */\n    public listOperationalWebhookEndpointsWithHttpInfo(param: WebhookEndpointApiListOperationalWebhookEndpointsRequest = {}, options?: Configuration): Promise<HttpInfo<ListResponseOperationalWebhookEndpointOut>> {\n        return this.api.listOperationalWebhookEndpointsWithHttpInfo(param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * List operational webhook endpoints.\n     * List Operational Webhook Endpoints\n     * @param param the request object\n     */\n    public listOperationalWebhookEndpoints(param: WebhookEndpointApiListOperationalWebhookEndpointsRequest = {}, options?: Configuration): Promise<ListResponseOperationalWebhookEndpointOut> {\n        return this.api.listOperationalWebhookEndpoints(param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * Rotates an operational webhook endpoint\\'s signing secret.  The previous secret will remain valid for the next 24 hours.\n     * Rotate Operational Webhook Endpoint Secret\n     * @param param the request object\n     */\n    public rotateOperationalWebhookEndpointSecretWithHttpInfo(param: WebhookEndpointApiRotateOperationalWebhookEndpointSecretRequest, options?: Configuration): Promise<HttpInfo<void>> {\n        return this.api.rotateOperationalWebhookEndpointSecretWithHttpInfo(param.endpointId, param.operationalWebhookEndpointSecretIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Rotates an operational webhook endpoint\\'s signing secret.  The previous secret will remain valid for the next 24 hours.\n     * Rotate Operational Webhook Endpoint Secret\n     * @param param the request object\n     */\n    public rotateOperationalWebhookEndpointSecret(param: WebhookEndpointApiRotateOperationalWebhookEndpointSecretRequest, options?: Configuration): Promise<void> {\n        return this.api.rotateOperationalWebhookEndpointSecret(param.endpointId, param.operationalWebhookEndpointSecretIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Update an operational webhook endpoint.\n     * Update Operational Webhook Endpoint\n     * @param param the request object\n     */\n    public updateOperationalWebhookEndpointWithHttpInfo(param: WebhookEndpointApiUpdateOperationalWebhookEndpointRequest, options?: Configuration): Promise<HttpInfo<OperationalWebhookEndpointOut>> {\n        return this.api.updateOperationalWebhookEndpointWithHttpInfo(param.endpointId, param.operationalWebhookEndpointUpdate,  options).toPromise();\n    }\n\n    /**\n     * Update an operational webhook endpoint.\n     * Update Operational Webhook Endpoint\n     * @param param the request object\n     */\n    public updateOperationalWebhookEndpoint(param: WebhookEndpointApiUpdateOperationalWebhookEndpointRequest, options?: Configuration): Promise<OperationalWebhookEndpointOut> {\n        return this.api.updateOperationalWebhookEndpoint(param.endpointId, param.operationalWebhookEndpointUpdate,  options).toPromise();\n    }\n\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3248, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}