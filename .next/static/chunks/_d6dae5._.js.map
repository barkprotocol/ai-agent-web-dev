{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/bark-ai-chatbot/components/wallet-context-provider.tsx"],"sourcesContent":["'use client';\n\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport {\n  PhantomWalletAdapter,\n  SolflareWalletAdapter,\n  TorusWalletAdapter,\n  LedgerWalletAdapter,\n} from '@solana/wallet-adapter-wallets';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { useMemo } from 'react';\n\n// Import wallet adapter styles\nimport '@solana/wallet-adapter-react-ui/styles.css';\n\ninterface WalletContextProviderProps {\n  children: React.ReactNode;\n}\n\nexport function WalletContextProvider({ children }: WalletContextProviderProps) {\n  // You can change this to 'devnet', 'testnet', or 'mainnet-beta' based on your needs\n  const network = WalletAdapterNetwork.Mainnet;\n\n  // You can also provide a custom RPC endpoint\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n  const wallets = useMemo(\n    () => [\n      new PhantomWalletAdapter(),\n      new SolflareWalletAdapter(),\n      new TorusWalletAdapter(),\n      new LedgerWalletAdapter(),\n    ],\n    []\n  );\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>{children}</WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\n"],"names":[],"mappings":";;;;AAWA;AACA;AAVA;AAGA;AAAA;AAAA;AAAA;AAFA;AAAA;AACA;;;AAJA;;;;;;;;AAqBO,SAAS,sBAAsB,EAAE,QAAQ,EAA8B;;IAC5E,oFAAoF;IACpF,MAAM,UAAU,oYAAA,CAAA,uBAAoB,CAAC,OAAO;IAE5C,6CAA6C;IAC7C,MAAM,WAAW,CAAA,GAAA,sWAAA,CAAA,UAAO,AAAD;mDAAE,IAAM,CAAA,GAAA,uUAAA,CAAA,gBAAa,AAAD,EAAE;kDAAU;QAAC;KAAQ;IAEhE,MAAM,UAAU,CAAA,GAAA,sWAAA,CAAA,UAAO,AAAD;kDACpB,IAAM;gBACJ,IAAI,4YAAA,CAAA,uBAAoB;gBACxB,IAAI,8YAAA,CAAA,wBAAqB;gBACzB,IAAI,+XAAA,CAAA,qBAAkB;gBACtB,IAAI,0YAAA,CAAA,sBAAmB;aACxB;iDACD,EAAE;IAGJ,qBACE,sYAAC,6YAAA,CAAA,qBAAkB;QAAC,UAAU;kBAC5B,cAAA,sYAAC,yYAAA,CAAA,iBAAc;YAAC,SAAS;YAAS,WAAW;sBAC3C,cAAA,sYAAC,oZAAA,CAAA,sBAAmB;0BAAE;;;;;;;;;;;;;;;;AAI9B;GAxBgB;KAAA"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}